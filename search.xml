<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数据架构学习</title>
      <link href="/2018/04/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/04/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中MS Word转HTML/PDF实现</title>
      <link href="/2018/03/28/Java%E4%B8%ADMS-Word%E8%BD%ACHTML-PDF%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/03/28/Java%E4%B8%ADMS-Word%E8%BD%ACHTML-PDF%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2018-03-28/funny_dog.jpg" alt></p><p><span class="picture-source">—— 图片来自 <a href="https://imgur.com/gallery/Kap6L" target="_blank" rel="noopener">arditaadree</a></span></p><p>最近的项目中有这样一个需求：根据给定的文档目录将另外一个文档的内容拆分为独立且风格与原文一致的Word文档，在这个过程中了解了一下Java中如何将MS Word转化为HTML、PDF等实现，记录一下。</p><a id="more"></a><p>在网上查找解决方案时，提到最多的便是 <a href="https://poi.apache.org/" target="_blank" rel="noopener">Apache POI</a>、<a href="https://github.com/opensagres/xdocreport" target="_blank" rel="noopener">XDocReport</a>、<a href="https://itextpdf.com/" target="_blank" rel="noopener">iText</a>、<a href="https://www.docx4java.org/trac/docx4j" target="_blank" rel="noopener">docx4j</a>、<a href="https://github.com/yeokm1/docs-to-pdf-converter" target="_blank" rel="noopener">docs-to-pdf-converter</a>、<a href="https://www.libreoffice.org/" target="_blank" rel="noopener">Libreoffice</a> 等，其中，除 Libreoffice外，其余的类库或多或少的与使用了Apache POI。Apache POI对MS文档支持较为全面，涵盖各版本Word、PPT、Excel、Visio、Outlook。MS文档早期采用<a href="https://msdn.microsoft.com/zh-cn/library/office/gg615407%28v=office.14.aspx%29" target="_blank" rel="noopener">二进制文件格式</a>存储，即OLE2格式，对应的文档为.doc、.xls和.ppt，后期版本采用<a href="https://support.office.com/zh-cn/article/open-xml-%E6%A0%BC%E5%BC%8F%E5%92%8C%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D-5200d93c-3449-4380-8e11-31ef14555b18" target="_blank" rel="noopener">Open XML格式</a>，存储的文档后缀为.docx/.xlsx/.pptx等。采用POI读取MS文档内容极为方便，但其不适合生成带有复杂格式的文档。Apache POI有详细的Javadocs文档。XDocReport、iText、docx4j均仅支持Open XML格式文档，其中iText主要特点是用来操作PDF文档。docx4j可以将XHTML文档生成DOCX、PDF，也可以将DOCX转化为XHTML、PDF，并且官网有较为详细的PDF文档可供下载。docs-to-pdf-converter采用POI、XDocReport等类库实现的MS转PDF功能。若想将MS文档转为PDF并保持较好的格式，则可采用<a href="https://help.libreoffice.org/Common/Starting_the_Software_With_Parameters/zh-CN" target="_blank" rel="noopener">Libreoffice Command Line Tool</a>。</p><h3 id="DOC-to-HTML"><a href="#DOC-to-HTML" class="headerlink" title="DOC to HTML"></a>DOC to HTML</h3><p>将DOC文件转化为HTML可以直接采用Apache POI中提供的接口实现，此外，POI中还提供接口可将DOC文件直接转化为XML、Text格式等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream   DOC文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream  HTML文件输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> imageSaveDir  图片存储路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(InputStream inputStream, OutputStream outputStream, String imageSaveDir)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HWPFDocument document = <span class="keyword">new</span> HWPFDocument(inputStream);</span><br><span class="line">    AbstractWordConverter wordToHtmlConverter = <span class="keyword">new</span> WordToHtmlConverter(DocumentBuilderFactory.newInstance()</span><br><span class="line">            .newDocumentBuilder().newDocument());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文档中的图片抽取放入到指定位置</span></span><br><span class="line">    wordToHtmlConverter.setPicturesManager(<span class="keyword">new</span> PicturesManager() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">savePicture</span><span class="params">(<span class="keyword">byte</span>[] content, PictureType pictureType, String suggestedName, <span class="keyword">float</span></span></span></span><br><span class="line"><span class="function"><span class="params">                widthInches, <span class="keyword">float</span> heightInches)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(imageSaveDir + suggestedName);</span><br><span class="line">                fileOutputStream.write(content);</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> imageSaveDir + suggestedName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wordToHtmlConverter.processDocument(document);</span><br><span class="line">    Transformer transformer = TransformerFactory.newInstance().newTransformer();</span><br><span class="line">    transformer.setOutputProperty(OutputKeys.ENCODING, StandardCharsets.UTF_8.toString());</span><br><span class="line">    transformer.setOutputProperty(OutputKeys.INDENT, <span class="string">"true"</span>);</span><br><span class="line">    transformer.setOutputProperty(OutputKeys.METHOD, <span class="string">"html"</span>);</span><br><span class="line">    DOMSource domSource = <span class="keyword">new</span> DOMSource(wordToHtmlConverter.getDocument());</span><br><span class="line"></span><br><span class="line">    transformer.transform(domSource, <span class="keyword">new</span> StreamResult(outputStream));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOCX-to-HTML"><a href="#DOCX-to-HTML" class="headerlink" title="DOCX to HTML"></a>DOCX to HTML</h3><p>POI中并没有提供将DOCX文件转化为HTML、XML等格式的接口，这里采用的是XDocReport中提供的接口，此外XDocReport中还提供将DOCX直接转化为PDF的接口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>fr.opensagres.xdocreport<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.poi.xwpf.converter.xhtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xdocreport.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream   DOCX文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream  HTML文件输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> imageSaveDir  图片存储路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(InputStream inputStream, OutputStream outputStream, String imageSaveDir)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    XWPFDocument document = <span class="keyword">new</span> XWPFDocument(inputStream);</span><br><span class="line"></span><br><span class="line">    XHTMLOptions options = XHTMLOptions.create();</span><br><span class="line">    options.setExtractor(<span class="keyword">new</span> FileImageExtractor(<span class="keyword">new</span> File(imageSaveDir)));</span><br><span class="line">    options.URIResolver(<span class="keyword">new</span> BasicURIResolver(imageSaveDir));</span><br><span class="line"></span><br><span class="line">    org.apache.poi.xwpf.converter.xhtml.XHTMLConverter.getInstance().convert(document, outputStream, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML-to-PDF"><a href="#HTML-to-PDF" class="headerlink" title="HTML to PDF"></a>HTML to PDF</h3><p>HTML转化为PDF采用的是iText，这个过程中首先要将HTML文件格式化为XHTML，然后再进行转换。如果不进行转换，使用iText将HTML文件转化为PDF的过程中会提示存在未闭合的标签等错误。关于HTML、XML、XHTML之间的区别，请参阅<a href="https://www.jianshu.com/p/412dbdd337ff" target="_blank" rel="noopener">HTML,XML,XHTML的区别</a>、<a href="https://www.jianshu.com/p/8e65f98980bb" target="_blank" rel="noopener">HTML、XML、XHTML 有什么区别</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itextpdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;itext.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf.tool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlworker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;itext.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream   HTML文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream  PDF文件输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(InputStream inputStream, OutputStream outputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String standardizedHtml = standardize(inputStream);</span><br><span class="line"></span><br><span class="line">    Document document = <span class="keyword">new</span> Document();</span><br><span class="line">    PdfWriter pdfWriter = PdfWriter.getInstance(document, outputStream);</span><br><span class="line"></span><br><span class="line">    document.open();</span><br><span class="line">    XMLWorkerHelper.getInstance().parseXHtml(pdfWriter, document, <span class="keyword">new</span> ByteArrayInputStream</span><br><span class="line">                (standardizedHtml.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);</span><br><span class="line">    document.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream   HTML文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>              格式化后的HTML字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">standardize</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    IOUtils.copy(inputStream, writer, StandardCharsets.UTF_8);</span><br><span class="line">    String content = writer.toString();</span><br><span class="line"></span><br><span class="line">    org.jsoup.nodes.Document doc = Jsoup.parse(content, StandardCharsets.UTF_8.toString());</span><br><span class="line">    doc.outputSettings().syntax(org.jsoup.nodes.Document.OutputSettings.Syntax.xml);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> doc.html();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOC-to-PDF"><a href="#DOC-to-PDF" class="headerlink" title="DOC to PDF"></a>DOC to PDF</h3><p>DOC转换为PDF可采用docx4j实现，不过新版本中似乎没有这个接口了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.docx4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docx4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream   DOC文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream  PDF文件输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(InputStream inputStream, OutputStream outputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    WordprocessingMLPackage wordprocessingMLPackage = Doc.convert(inputStream);  </span><br><span class="line"></span><br><span class="line">    Docx4J.toPDF(wordprocessingMLPackage, outputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOCX-to-PDF"><a href="#DOCX-to-PDF" class="headerlink" title="DOCX to PDF"></a>DOCX to PDF</h3><p>DOCX转化为PDF可以采用XDocReport接口直接实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>fr.opensagres.xdocreport<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.poi.xwpf.converter.pdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xdocreport.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream   DOCX文件输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream  PDF文件输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(InputStream inputStream, OutputStream outputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    XWPFDocument document = <span class="keyword">new</span> XWPFDocument(inputStream);</span><br><span class="line"></span><br><span class="line">    PdfOptions options = PdfOptions.create().fontEncoding(StandardCharsets.UTF_8.toString());</span><br><span class="line"></span><br><span class="line">    PdfConverter.getInstance().convert(document, outputStream, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Libreoffice-Command-Line-Tool"><a href="#Libreoffice-Command-Line-Tool" class="headerlink" title="Libreoffice Command Line Tool"></a>Libreoffice Command Line Tool</h3><p>在尝试了各种方案后，笔者发现，以上的这些类库虽然可以实现相应的转换功能，但在格式上极难控制，若想在将MS文档转换为PDF格式的同时，保持源文档的格式，最好的方式还是使用<a href="https://help.libreoffice.org/Common/Starting_the_Software_With_Parameters/zh-CN" target="_blank" rel="noopener">Libreoffice Command Line Tool</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soffice --headless --convert-to pdf demo.doc</span><br></pre></td></tr></table></figure><p>如果需要批量的处理文档，则可以结合<a href="https://github.com/dagwieers/unoconv" target="_blank" rel="noopener">unoconv</a>工具来做。</p><p>另外，通过页码来获取MS Word内容是不可取的，因为MS Word页码是在文档打开时动态渲染的，跟实际使用的渲染引擎有关，在Stack Overflow上面提了一个<a href="https://stackoverflow.com/questions/49465814/how-to-access-ms-word-content-by-page-number-in-apache-poi?noredirect=1#comment85981616_49465814" target="_blank" rel="noopener">问题</a>，别人建议我采用读取Heading的方式实现，但是实际操作后发现也不行，并不能完整的读取页码信息。后来，根据目录拆分Word文档的需求变为根据内容提取文档目录，现在也没有特别好的办法，目前我采用的是正则表达式+标题关键字+标题停用词的方式实现。这种方法中首先将MS Word转化为HTML，并过滤掉所有的样式，只保留<code>p</code>标签，而后通过正则表达式提取类似于标题的HTML字符串（根据标题前的空行等），最后过滤所有的HMTL标签，再通过配置的关键字和停用词得到最终的标题。这种做法有一定的局限性，第一个是对格式有一定限制，在该项目中只要在文档上一小结与下一小结之间有空行就可以得到很好的效果；第二个是文档要有一定的主题，不然关键词和停用词无法配置。</p><p><strong>参考</strong></p><ul><li><a href="https://poi.apache.org/" target="_blank" rel="noopener">Apache POI</a></li><li><a href="https://github.com/opensagres/xdocreport" target="_blank" rel="noopener">XDocReport</a></li><li><a href="https://itextpdf.com/" target="_blank" rel="noopener">iText</a></li><li><a href="https://www.docx4java.org/trac/docx4j" target="_blank" rel="noopener">docx4j</a></li><li><a href="https://github.com/yeokm1/docs-to-pdf-converter" target="_blank" rel="noopener">docs-to-pdf-converter</a></li><li><a href="https://help.libreoffice.org/Common/Starting_the_Software_With_Parameters/zh-CN" target="_blank" rel="noopener">Libreoffice Command Line Tool</a></li><li><a href="https://blog.csdn.net/qwert678000/article/details/72770109" target="_blank" rel="noopener">java word转pdf的几种方法</a></li><li><a href="https://stackoverflow.com/questions/29087077/is-it-possible-to-convert-html-into-xhtml-with-jsoup-1-8-1" target="_blank" rel="noopener">Is it possible to convert HTML into XHTML with Jsoup 1.8.1?</a></li><li><a href="https://my.oschina.net/u/2428684/blog/842930" target="_blank" rel="noopener">Java：POI方式实现Word转html/htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Word转HTML/PDF </tag>
            
            <tag> POI </tag>
            
            <tag> iText </tag>
            
            <tag> docx4j </tag>
            
            <tag> xdocreport </tag>
            
            <tag> Libreoffice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冬恋武功山</title>
      <link href="/2017/12/17/%E5%86%AC%E6%81%8B%E6%AD%A6%E5%8A%9F%E5%B1%B1/"/>
      <url>/2017/12/17/%E5%86%AC%E6%81%8B%E6%AD%A6%E5%8A%9F%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2017-12-17/DSC0040.jpg" alt></p><p>去年的这个时候，我把原本计划在元旦的徒步计划提前了一个星期，独立一人前往了武功山。上山的入口处，遇见了清风大哥、Jesse、娟娟、露露一行四人，在山水驿站老板娘的帮助下，我有幸成为他们队伍中的一员，开始了这一段愉快的徒步旅程。</p><a id="more"></a><p>中间的过程不再详述，愉悦、兴奋之后，留下更多的是美好的回忆。回来后中毒太深，一直还想再去一次，然而各种事情耽误，久久不能如愿，眼看17年即将逝去， 而朋友圈关于武功山的大片不断，遂翻出老照片、剪辑了一小段视频，以表怀恋和遗憾……</p><p><img src="/images/2017-12-17/DSC0543.jpg" alt></p><p><img src="/images/2017-12-17/DSC0547.jpg" alt></p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"/images/2017-12-17/wugongshan.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 徒步 </tag>
            
            <tag> 武功山 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型与相关异常</title>
      <link href="/2017/12/12/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8/"/>
      <url>/2017/12/12/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2017-12-12/desktop_1.jpg" alt></p><p>Java虚拟机在执行Java程序时会把其所管理的内存分为不同的区域，这些区域有些是所有线程之间共享的，有些是线程私有的；有些有些随着JVM的启动而创建，有些则与线程有着相同的生命周期，依赖线程的启动和销毁。</p><a id="more"></a><p><strong>程序计数器(Program Counter Register)：</strong>用来标记当前线程正在执行什么指令，接下来该执行哪一条指令，是一块较小的内存空间。在Java中，程序通过字节码解释器解释执行，程序计数器中存储当前正在执行的字节码的地址，程序执行过程中，字节码解释器通过改变程序计数器的值来获取下一条需要执行的字节码指令，分支、循环、跳转、异常、线程恢复等基本功能都需要依赖程序计数器来完成，类似于处理器中的 <a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noopener">程序计数器</a>。JVM通过将Java线程映射为本地操作系统线程来支持多个线程同时运行，对于单核心处理器来讲，多线程的执行是通过时间片的轮转来实现，即任意时刻，只有一个线程在执行，所以当一个线程获得时间片再次执行时，必须知道该线程上次执行到什么位置，故而每个线程都有一个独立的程序计数器。此外，针对于不同的方法，该区域存储的的值会有区别：如果当前线程执行的是一个Native方法，程序计数器值为undefined；如果当前线程执行的是Java方法，程序计数器记录了当前正在执行的字节码指令的地址。程序计数器是一个足够大的空间，可以容纳一个returnAddress，或者是针对于特定平台的本地指针。该内存区域是唯一一个在Java虚拟机规范中没有规定任何内存异常的区域。</p><p><strong>Java虚拟机栈(Java Virtual Machine Stacks)：</strong>每一个线程都有一个Java虚拟机栈，在线程创建的同时被创建，在线程销毁的时候被销毁。Java虚拟机栈跟传统编程语言（例如C）的栈类似，它存储着局部变量、部分结果，并在方法调用和返回的过程中发挥着作用。其描述的是Java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，方法从开始执行到完成的过程，对应着栈帧在虚拟机栈中的入栈和出栈过程。由于除了栈帧的入栈和出栈之外，Java虚拟机栈不会被直接操作，因此可能会在堆上被分配：</p><blockquote><p>Because the Java Virtual Machine stack is never manipulated directly except to push and pop frames, frames may be heap allocated. ——<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.2" target="_blank" rel="noopener">2.5.2 Java Virtual Machine Stacks</a></p><p>Frames are allocated from the Java Virtual Machine stack (§2.5.2) of the thread creating the frame.<br>  …<br>Note that a frame created by a thread is local to that thread and cannot be referenced by any other thread. ——<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.6" target="_blank" rel="noopener">2.6 Frames</a></p><footer><strong>Oracle</strong><cite><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">The Java® Virtual Machine Specification (Java SE 8 Edition)</a></cite></footer></blockquote><p>乍一看这个地方是相互矛盾的，从后面可知，Java虚拟机栈是线程私有，而堆内存是共享的，这不是相互矛盾么？其实并不然，Java虚拟机堆栈只是一个抽象概念，它可以在任何地方被分配，也可以不存在，得看具体的JVM是如何实现，HotSpot JVM直接将本地线程栈作为Java虚拟机栈，还有一些JVM将Java虚拟机栈分配在堆上，这样做的好处就是不必为Java虚拟机栈单独实现内存管理（<a href="https://stackoverflow.com/questions/26741925/is-frame-in-jvm-heap-allocated-or-stack-allocated" target="_blank" rel="noopener">Is frame in JVM heap allocated or stack allocated?</a>）。Java虚拟机栈是逻辑上连续的空间，但是对应的物理内存空间可以是不连续的。此外，JVM规范允许不同虚拟机实现时有所不同，其大小既可以是固定的，也可以动态扩展。部分虚拟机实现提供了参数允许程序员对其进行控制，包括指定初始化大小、最小值、最大值等。</p><p>局部变量表存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用和returnAddress类型（指向一条字节码指令的地址）。除64位长度的long和double类型的数据会占用两个局部变量空间外，其余的数据类型均只占用一个空间。在编译期间，局部变量表所需的空间即完成分配，当一个方法进入时，这个方法栈帧中需要分配的局部变量空间大小是确定的，并且在该方法运行期间不会改变。</p><p>JVM规范中对这个区域规定了两种异常：如果一个线程请求的栈深度大于虚拟机所允许的深度，虚拟机会抛出 <code>StackOverflowError</code> 异常；如果虚拟机栈可以被动态扩展并且扩展时没有申请到足够的内存空间，则会抛出 <code>OutOfMemoryError</code> 异常。</p><p><strong>本地方法栈(Native Method Stacks)：</strong>本地方法栈类似于Java虚拟机栈，主要区别在于Java虚拟机栈为Java方法服务，而本地方法栈则为Native方法服务。其大小可以固定，也可以动态扩展，所抛出的异常及原因与Java虚拟机栈一样。</p><p><strong>堆(Heap)：</strong>Java堆是所有线程共享的一块内存，也是JVM所管理内存中最大的一块，在JVM启动时创建，主要用来存储对象实例和数组。我们平时所讨论的垃圾收集器就是针对这块区域，其大小可以是固定的，也可以是动态扩展的，不同JVM实现可能会有区别，不过现在大部分JVM都将其实现为可动态扩展的。Java堆是一块逻辑上连续的内存空间，但对应的物理内存空间可以是不连续的。JVM规范中对这个区域规定了唯一的异常：如果通过垃圾回收机制和动态分配机制后还不没有足够的内存完成堆内存分配，则会抛出 <code>OutOfMemoryError</code> 异常。</p><p><strong>方法区(Method Area)：</strong>方法区也是所有线程共享的内存区域，它类似于常规语言的编译后代码存储区域或类似于操作系统进程中的“文本”区段。 它存储每个类的结构（类信息），如运行时常量池、静态变量，以及方法和构造函数的代码，包括用于类和实例初始化和接口初始化的特殊方法。该区域在JVM启动时被创建，在JVM规范中被描述为堆的一个逻辑部分，但是现实时可以选择不对其实现垃圾回收，并且对其位置以及如何管理编译后的代码不做限制。方法区的大小可以是固定的，也可以是动态扩展的。当其无法满足内存分配需求时，抛出 <code>OutOfMemoryError</code> 异常。</p><p><strong>运行时常量池(Run-TIme Constant Pool)：</strong>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期间生成的各种字面量和符号应用，这部分内容将在类加载后进入方法区的运行时常量池中存放。一个类或接口的运行时常量池将在这个类或者接口创建时被JVM构造。JVM规范对运行时常量池的实现没有做细节上的要求，由于其是方法区的一部分，抛出的异常自然和方法区抛出的异常一样，均只有 <code>OutOfMemoryError</code> 异常。</p><p><strong>直接内存(Direct Memory)：</strong>直接内存是Java代码可以直接操作的物理内存，并不是Java虚拟机运行时数据区的一部分，它不受垃圾收集器的管理。我们知道，在Java程序实际运行时，数据会在堆内存和本地之间复制，那么从这个方面来讲，使用直接内存会不会有较高的效率呢？其实并不然，Java程序在操作内存时是通过存储在堆中的指向直接内存的引用来操作直接内存，由于直接内存在创建和销毁时存在较大的开销，所以其只适合很大的数据对象以及在内存中存活较长的对象，所以并不一定比使用堆内存快。另外，既然直接内存的销毁不受垃圾收集器的管理，那么这块内存在使用完后该怎么释放呢？实际上，这块内存的释放跟存储在堆中的引用有关，当堆中的引用所占堆内存被垃圾收集器回收后，对应的直接内存便会被标记为可回收，由操作系统进行回收<a href="http://fibrevillage.com/sysadmin/325-understanding-java-heap-memory-and-java-direct-memory" target="_blank" rel="noopener">Understanding Java heap memory and Java direct memory</a>、<a href="https://stackoverflow.com/questions/22332990/java-heap-vs-direct-memory-access" target="_blank" rel="noopener">Java - Heap vs Direct memory access</a> 。</p><img src="/images/2017-12-12/runtime_data_area.svg" title="JVM运行时数据区"><p><strong>参考</strong></p><ul><li>《深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》</li><li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">The Java® Virtual Machine Specification (Java SE 8 Edition)</a></li><li><a href="https://stackoverflow.com/questions/26741925/is-frame-in-jvm-heap-allocated-or-stack-allocated" target="_blank" rel="noopener">Is frame in JVM heap allocated or stack allocated?</a></li><li><a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noopener">程序计数器-百科</a></li><li><a href="http://fibrevillage.com/sysadmin/325-understanding-java-heap-memory-and-java-direct-memory" target="_blank" rel="noopener">Understanding Java heap memory and Java direct memory</a></li><li><a href="https://stackoverflow.com/questions/22332990/java-heap-vs-direct-memory-access" target="_blank" rel="noopener">Java - Heap vs Direct memory access</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 内存模型 </tag>
            
            <tag> 方法区 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 程序计数器 </tag>
            
            <tag> 虚拟机栈 </tag>
            
            <tag> 本地方法栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Spring切面和自定义注解减少重复代码</title>
      <link href="/2017/08/02/%E5%88%A9%E7%94%A8Spring%E5%88%87%E9%9D%A2%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%87%8F%E5%B0%91%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81/"/>
      <url>/2017/08/02/%E5%88%A9%E7%94%A8Spring%E5%88%87%E9%9D%A2%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%87%8F%E5%B0%91%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>使用框架开发的好处之一就是可以减少很多重复代码，就比如 spring-data-jpa 使得我们可以将精力都放在数据的操作逻辑上，而不必要关注数据的打开与关闭、数据库连接的获取与释放……然而，框架也不能面面俱到，开发的过程中不可避免的遇到框架不能解决的代码重复问题。下面就来看看我最近在重构一个项目后端代码时所遇到的代码重复问题。</p><a id="more"></a><p>在老项目的后端代码中，很多方法长的都差不多，存在大量的重复代码，但又无法单独提取作为公共的工具方法，类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">handle</span><span class="params">(RequestParam param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"request param: &#123;&#125;"</span>, param);</span><br><span class="line"></span><br><span class="line">        Stopwatch started = Stopwatch.createStarted();</span><br><span class="line"></span><br><span class="line">        Result result = 执行相应的操作逻辑;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result) &#123;</span><br><span class="line">            logger.info(<span class="string">"handle result: &#123;&#125;"</span>, result);</span><br><span class="line">            Monitor.recordOne(<span class="string">"HANDLER_RESULT"</span>, started.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"handler error. query model: &#123;&#125;"</span>, queryModel, e);</span><br><span class="line">        Monitor.recordOne(<span class="string">"HANDLER_ERROR"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要包括记录请求参数、根据处理结果来记录处理结果和打监控和返回不同结果、在出现异常时打日志和监控并返回 null。其中，除了 <code>Result result = 执行相应的操作逻辑;</code>，其余的代码都类似，如果整个项目中就这样一个方法，这样做是没有问题的，但如果一个项目中有很多这样的方法，那么看起来就会非常的不爽，所以必须改掉啊！是不是可以采用 Spring 的切面来处理方法的参数日志和监控，采用统一异常处理的方式来处理方法中产生的异常？这种方式确实可以实现，但是并不灵活，比如说如果在发生异常后我想用一个指定的参数去调用一个方法去执行额外的逻辑，那么这种方式就力不能及了，所以需要一种更加灵活的方式来实现，于是利用 <strong>Spring 切面 + 自定义注解</strong> 的方式就产生了。</p><p>自定义注解，我们可以获取自己想要的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MonitorLog &#123;</span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span></span>;                           <span class="comment">// 监控key</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">paraLog</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;         <span class="comment">// 是否将入参录入日志</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">resultLog</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;       <span class="comment">// 是否将结果录入日志</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exceptionLog</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;    <span class="comment">// 是否将异常录入日志</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">returnNull</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;     <span class="comment">// 是否返回 null</span></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">callback</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;           <span class="comment">// 发生异常函数时的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] callbackArgsIndexs() <span class="keyword">default</span> <span class="number">0</span>;   <span class="comment">// 回调函数参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再结合 Spring 的切面，来实现相应的处理逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MonitorProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.huberylee.service..*.*(..)) &amp;&amp; @annotation(com.huberylee.annotation.MonitorLog)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspect</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"aspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MonitorLog monitorLog = getMonitorLog(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (monitorLog == <span class="keyword">null</span>) &#123;       <span class="comment">// 如果没有MonitorLog注解，则直接执行原方法</span></span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (monitorLog.paraLog()) &#123;     <span class="comment">// 是否打印参数</span></span><br><span class="line">            paraLog(joinPoint);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行自定义处理逻辑，包括记录结果、打日志、监控、异常处理等</span></span><br><span class="line">        <span class="keyword">return</span> process(joinPoint, monitorLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么经过这样处理后的代码就简洁了很多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MonitorLog</span>(key = <span class="string">"HANDLER"</span>, returnNull = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">handle</span><span class="params">(RequestParam param)</span> </span>&#123;</span><br><span class="line">    Result result = 执行相应的操作逻辑;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 切面 </tag>
            
            <tag> 自定义注解 </tag>
            
            <tag> 模板代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器之LinkedHashMap实现原理</title>
      <link href="/2017/05/31/Java%E5%AE%B9%E5%99%A8%E4%B9%8BLinkedHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2017/05/31/Java%E5%AE%B9%E5%99%A8%E4%B9%8BLinkedHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="/2017/03/12/Java%E5%AE%B9%E5%99%A8%E4%B9%8BHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/">Java容器之HashMap实现原理</a> 一文中，我们一起学习了 HashMap 的实现原理，在此基础上，我们来了解一下 Java 8 中 LinkedHashMap 的实现原理。从 LinkedHashMap 的定义我们可以知道 LinkedHashMap 是基于 HashMap 做了一些扩展，而实际情况也确实是这样的。LinkedHashMap 相对于 HashMap 来讲最大的区别在于它维持了一个 <strong>双向队列</strong> ，用来保存元素的先后顺序关系，默认是按照元素插入的顺序来保存，当然，你也可以在初始化时指定双向队列中按照访问顺序来保存元素。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Hash table and linked list implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface,</span></span><br><span class="line"><span class="comment"> * with predictable iteration order.  This implementation differs from</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;HashMap&lt;/tt&gt; in that it maintains a doubly-linked list running through</span></span><br><span class="line"><span class="comment"> * all of its entries.  This linked list defines the iteration ordering,</span></span><br><span class="line"><span class="comment"> * which is normally the order in which keys were inserted into the map</span></span><br><span class="line"><span class="comment"> * (&lt;i&gt;insertion-order&lt;/i&gt;).  Note that insertion order is not affected</span></span><br><span class="line"><span class="comment"> * if a key is &lt;i&gt;re-inserted&lt;/i&gt; into the map.  (A key &lt;tt&gt;k&lt;/tt&gt; is</span></span><br><span class="line"><span class="comment"> * reinserted into a map &lt;tt&gt;m&lt;/tt&gt; if &lt;tt&gt;m.put(k, v)&lt;/tt&gt; is invoked when</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;m.containsKey(k)&lt;/tt&gt; would return &lt;tt&gt;true&lt;/tt&gt; immediately prior to</span></span><br><span class="line"><span class="comment"> * the invocation.)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然用到了双向队列，那么相对于 HashMap，LinkedHashMap 的基本数据结构也必然会发生一些改变，主要体现在每一个数据节点增加了一个指向前一个节点的指针和一个指向后一个节点的指针；在成员变量中增加了一个队列头指针和一个队列尾指针，并且用一个成员变量来标识双向队列中的元素按照何种顺序存储：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashMap.Node subclass for normal LinkedHashMap entries.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The head (eldest) of the doubly linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The tail (youngest) of the doubly linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure><p>再来看看构造方法，LinkedHashMap 完全复用 HashMap 的构造方法，只是在初始化时添加了对双向队列元素排列顺序的标识，默认是按照添加顺序生成队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity);</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">float</span> loadFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然 LinkedHashMap 添加了一个双向队列来保存元素的顺序关系，那么在添加、删除、访问（当 accessOrder 值为 true 时）元素的时候，必然会进行一些额外的操作，以保证双向队列中元素顺序的正确性。在 HashMap 源码中，你会发现有这样几个函数，被调用了但函数内却没有任何操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>而在 LinkedHashMap 中有了具体的实现，来保证 LinkedHashMap 中的元素在被添加、删除或者访问后，双向队列中元素的顺序依然正确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">    p.before = p.after = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">        head = a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b.after = a;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">        tail = b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a.before = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正因为如此，所以相比于 HashMap，LinkedHashMap 在元素的添加、删除、访问时的效率会略低一些。另外，LinkedHashMap 中，迭代器是直接访问双向链表，因而双向链表中元素的排列顺序即为迭代器中元素的访问顺序，数组的初始大小和负载因子并不会影响元素的访问效率。下面来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 2017/5/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, Integer&gt; books = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        books.put(<span class="string">"语文"</span>, <span class="number">100</span>);</span><br><span class="line">        books.put(<span class="string">"数学"</span>, <span class="number">101</span>);</span><br><span class="line">        books.put(<span class="string">"外语"</span>, <span class="number">102</span>);</span><br><span class="line">        books.put(<span class="string">"物理"</span>, <span class="number">103</span>);</span><br><span class="line">        books.put(<span class="string">"化学"</span>, <span class="number">104</span>);</span><br><span class="line">        books.put(<span class="string">"生物"</span>, <span class="number">105</span>);</span><br><span class="line">        books.put(<span class="string">"地理"</span>, <span class="number">106</span>);</span><br><span class="line">        books.put(<span class="string">"算法"</span>, <span class="number">107</span>);</span><br><span class="line">        books.put(<span class="string">"测试"</span>, <span class="number">108</span>);</span><br><span class="line">        books.put(<span class="string">"开发"</span>, <span class="number">109</span>);</span><br><span class="line"></span><br><span class="line">        books.put(<span class="string">"数学"</span>, <span class="number">115</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry : books.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"："</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note default">            <p>输出结果为:<br>语文：100<br>数学：115<br>外语：102<br>物理：103<br>化学：104<br>生物：105<br>地理：106<br>算法：107<br>测试：108<br>开发：109</p>          </div><p>可以看到，输出元素的顺序与加入的顺序 <strong>一致</strong>，哈希表中有2个元素发生哈希冲突，它们以链表的形式存储：</p><p><img src="/images/2017-05-31/example.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkedHashMap </tag>
            
            <tag> HashMap </tag>
            
            <tag> 双向队列 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 红黑树 </tag>
            
            <tag> 负载因子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器之HashMap实现原理</title>
      <link href="/2017/03/12/Java%E5%AE%B9%E5%99%A8%E4%B9%8BHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2017/03/12/Java%E5%AE%B9%E5%99%A8%E4%B9%8BHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在理解 HashMap、ConcurrentHashMap 等实现原理之前，我们首先必须了解 <a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8" target="_blank" rel="noopener">哈希表</a> 的相关知识。简单来讲，哈希表就是利用某种映射关系 $key \to h(key)$，将关键字 $key$ 映射到内存单元中的某个地址 $h(key)$，并在该地址中存储对应数据的这样一个过程，其中决定映射关系的函数 $h(x)$ 被称为<strong>哈希函数</strong>。在理想情况下，每一个 $key$ 对应一个独立的内存地址 $h(key)$，各个 $h(key)$ 之间互不冲突，如果不考虑空间资源的利用率，我们可以在很大的内存空间内只存极少的数据，那么这种情况是可能的。</p><a id="more"></a><p>但是在实际情况中，我们希望在有限的连续空间内存储尽可能多的数据，这就不得不去找一个近乎完美的哈希函数，将数据尽可能均匀的散列到有限的内存空间，这个过程中不可避免的将不同的 $key$ 值映射到相同的内存地址（<strong>哈希冲突</strong>），此时，我们需要将发生冲突的 $key$ 根据某种新的规则 $f(x)$ 重新映射到不同的内存空间 $f(key)$，这种解决冲突时所使用的映射规则称为<strong>哈希冲突函数</strong>。重映射后的内存地址有可能还是冲突的，那么我们就需要使用另外一种映射规则 $f_i(x)$ 重新映射，这个过程将一直持续下去，直到不存在哈希冲突为止，所以，解决哈希冲突的函数可能不止一个，而是一组。显然，内存空间的利用率越高，哈希冲突发生的可能性就越大，而过多的重映射会导致插入和查找的效率低下，那么我们就需要兼顾内存空间的利用率和哈希冲突的发生。这里，我们使用<strong>负载因子 $\alpha$</strong>（load factor，哈希表中存储元素的个数 $n$ 与哈希表长度 $m$ 的比值，即 $\alpha=n/m$）来表示内存空间额利用率，通常使 $\alpha$ 控制在 $0.6\sim0.9$范围内。可以发现，哈希冲突与哈希函数、哈希冲突函数、负载因子均有关系。下面我们来看看如何设计哈希函数以及在发生哈希冲突后如何解决。</p><h2 id="哈希函数构造方法"><a href="#哈希函数构造方法" class="headerlink" title="哈希函数构造方法"></a>哈希函数构造方法</h2><p>哈希函数的目的在于使 $n$ 个数据元素尽可能均匀的映射到 $m$ 个内存单元中，使得哈希冲突发生的概率尽可能小，进而提高插入和查找的时间效率。下面一起来学习一下常见的整数类型关键字的哈希函数设计方法。</p><ul><li><strong>除留余数法</strong>：除留余数法是使用数据元素关键字 $key$ 除以哈希表长度 $m$ 所得的余数作为哈希地址的方法：</li></ul><p>$$<br>h(key) = key \bmod m<br>$$</p><p>这种方法的关键在于选好哈希表的长度，使得每一个关键字 $key$ 通过该函数映射到 $m$ 个内存单元的任意地址上的概率相等，从而尽可能的减少哈希冲突的发生。一般情况下，除留余数法的哈希表长度 $m$ 取素数时的效果最好，有前面提到的 $0.6 \leq n \leq 0.9$ 可知，$m$ 取 $1.1n \sim 1.7n$ 之间的一个素数。</p><ul><li><strong>直接定址法</strong>：直接定制法采用元素关键字 $key$ 直接加上一个指定常量 $A$ 的所得结果作为哈希地址：</li></ul><p>$$<br>h(key) = key\ + \ A<br>$$</p><p>这种方法不可能发生哈希冲突（元素关键唯一），但是如果 $key$ 值分布不均，或者间隔很大，可能会造成内存空间的极大浪费。</p><ul><li><strong>分析法</strong>：分析法没有固定的哈希函数，它是通过分析给定数据关键字之间存在的某种关系（比如说某些数据序列出现的比较均匀）来确定哈希函数，这种方法只适合于所有关键字值已知的情况下。</li></ul><h2 id="哈希冲突解决办法"><a href="#哈希冲突解决办法" class="headerlink" title="哈希冲突解决办法"></a>哈希冲突解决办法</h2><ul><li><strong>线性探查法</strong>：线性探查法是从发生冲突的地址 $d_i$ 开始，依次探查 $d_i$ 的下一个地址是否可用，直到找到一个可用地址为止：</li></ul><p>$$<br>\begin{cases}<br>d_0 &amp;= h(key) \\<br>d_{i+1} &amp;= (d_i + 1) \bmod m, &emsp;&emsp; 1 \leq i \leq m-1<br>\end{cases}<br>$$</p><p>$m-1$ 为哈希表最后一个位置，下一个该查找的为止为首地址 $0$。线性探查法容易产生堆积问题，即一个产生冲突的元素通过线性探查找的新位置本来所对应的元素也会产生冲突，从而导致该过程持续累计发生。</p><ul><li><strong>平方探查法</strong>：平方探查法跟线性探查法类似，只不过每次增加的不是 1 ，而是 $2^i$：</li></ul><p>$$<br>\begin{cases}<br>d_0 &amp;= h(key) \\<br>d_{i+1} &amp;= (d_i + 2^i) \bmod m, &emsp;&emsp; 1 \leq i \leq m-1<br>\end{cases}<br>$$</p><p>即：如果 $d_{i+1}$ 在地址映射时发生冲突，那么会依次探查 $(d_i + 2^0) \bmod m$、$(d_i + 2^1) \bmod m$、$(d_i + 2^2) \bmod m$、 ……，直到找到一个可用的内存空间为止。</p><ul><li><strong>伪随机数法</strong>：伪随机数法是在发生哈希冲突后采用发生冲突的地址 $d_i$ 加一个随机数 $R$ 的方法得到一个新的内存地址：</li></ul><p>$$<br>\begin{cases}<br>d_0 &amp;= h(key) \\<br>d_{i+1} &amp;= (d_i + R) \bmod m, &emsp;&emsp; 1 \leq i \leq m-1<br>\end{cases}<br>$$</p><p>随机数的产生有很多方式，这个可以根据需求自己来定。</p><div class="note info">            <p><em>Tips</em>：可以发现，无论是<strong>线性探查法</strong>、<strong>平方探查法</strong>还是<strong>伪随机数法</strong>，均是采用在发生冲突的地址 $d_i$ 的基础上加一个数字来得到一个新的内存地址，它们之间根据所增加的数字是线性递增、平方数递增还是随机递增得以区分，冲突后的地址可以根据哈希冲突函数直接计算得到。在根据 $key$ 进行数据查找时，首先利用哈希函数 $h(x)$ 去对应地址查找，若对应地址内所存数据与目标值不匹配，则利用哈希冲突函数去新的内存地址查找，直到查找过程结束。</p>          </div><ul><li><strong>链表法</strong>：与上述三种解决哈希冲突的方法不同，链表法采用链表存储发生冲突的元素数据，根据是否为发生冲突的元素建立统一的链表还是每一个冲突地址建立一条链表分为两种形式。</li></ul><p>假设给定数据 $\left\{31, 19, 11, 23, 45, 32, 8, 67, 78, 73\right\}$，采用 $h(key) = key \bmod m$ 作为哈希函数，哈希表长度为 11，则链表法的两种不同方式分别为：</p><p><img src="/images/2017-03-12/hash_link.png" alt></p><p>了解了哈希表的基本知识后，现在我们来看看 Java 中 HashMap 的实现原理。</p><h2 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h2><p>Java 中 HashMap 采用链表法中的第一种方式处理哈希冲突，不过在具体的实现上有所不同，下面我们将通过阅读 JDK 源码的方式来一步步了解 HashMap 的具体实现。我们首先来看一看 JDK1.8 源码中对 HashMap 的描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* Hash table based implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface.  This</span><br><span class="line">* implementation provides all of the optional map operations, and permits</span><br><span class="line">* &lt;tt&gt;null&lt;/tt&gt; values and the &lt;tt&gt;null&lt;/tt&gt; key.  (The &lt;tt&gt;HashMap&lt;/tt&gt;</span><br><span class="line">* class is roughly equivalent to &lt;tt&gt;Hashtable&lt;/tt&gt;, except that it is</span><br><span class="line">* unsynchronized and permits nulls.)  This class makes no guarantees as to</span><br><span class="line">* the order of the map; in particular, it does not guarantee that the order</span><br><span class="line">* will remain constant over time.</span><br></pre></td></tr></table></figure><p>意思大概是说 <tt>HashMap</tt> 是基于哈希表的 <tt>Map</tt> 接口实现，它提供所有的 <tt>Map</tt> 可选操作， 并且允许多个 <tt>null</tt> 值和一个 <tt>null</tt> 键。<tt>HashMap</tt> 和 <tt>HashTable</tt> 大致相同，除了它是非同步的和它允许 <tt>null</tt> 值和 <tt>null</tt> 键外。这个类对元素的插入顺序没有保证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* &lt;p&gt;An instance of &lt;tt&gt;HashMap&lt;/tt&gt; has two parameters that affect its</span><br><span class="line">* performance: &lt;i&gt;initial capacity&lt;/i&gt; and &lt;i&gt;load factor&lt;/i&gt;.  The</span><br><span class="line">* &lt;i&gt;capacity&lt;/i&gt; is the number of buckets in the hash table, and the initial</span><br><span class="line">* capacity is simply the capacity at the time the hash table is created.  The</span><br><span class="line">* &lt;i&gt;load factor&lt;/i&gt; is a measure of how full the hash table is allowed to</span><br><span class="line">* get before its capacity is automatically increased.  When the number of</span><br><span class="line">* entries in the hash table exceeds the product of the load factor and the</span><br><span class="line">* current capacity, the hash table is &lt;i&gt;rehashed&lt;/i&gt; (that is, internal data</span><br><span class="line">* structures are rebuilt) so that the hash table has approximately twice the</span><br><span class="line">* number of buckets.</span><br><span class="line">*</span><br><span class="line">* &lt;p&gt;As a general rule, the default load factor (.75) offers a good</span><br><span class="line">* tradeoff between time and space costs.  Higher values decrease the</span><br><span class="line">* space overhead but increase the lookup cost (reflected in most of</span><br><span class="line">* the operations of the &lt;tt&gt;HashMap&lt;/tt&gt; class, including</span><br><span class="line">* &lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;).  The expected number of entries in</span><br><span class="line">* the map and its load factor should be taken into account when</span><br><span class="line">* setting its initial capacity, so as to minimize the number of</span><br><span class="line">* rehash operations.  If the initial capacity is greater than the</span><br><span class="line">* maximum number of entries divided by the load factor, no rehash</span><br><span class="line">* operations will ever occur.</span><br></pre></td></tr></table></figure><p>一个 <tt>HashMap</tt> 实例有两个影响它性能的参数：<i>initial capacity</i> 和 <i>load factor</i>，其中 <i>initial capacity</i> 代表的是哈希表中桶的数量，也就是我们所说的数组的大小，它决定着哈希表创建时数组的初始长度；<i>load factor</i> 则表示哈希表可以装多满，也就是我们所说的负载因子（$\alpha=n/m$），当实际负载量达到负载因子时，哈希表会自动增长为原来的两倍。通常，负载因子取 0.75 时可以在时间和空间开销间达到一个很好的平衡，更高的值虽然减小了空间的开销，却增加了查找的时间，影响 <tt>HashMap</tt> 的大部分操作，包括 <tt>get</tt> 和 <tt>put</tt> 操作。</p><p>下面是一张 <tt>HashMap</tt> 类图表，主要包括 <tt>HashMap</tt> 的内部类及相关属性，可以看到 <tt>HashMap</tt> 的属性主要包括 <tt>Node</tt> 类型的数组 <i>table</i>、负载因子 <i>load factor</i>、临界值 <i>threshold</i>等。</p><p><img src="/images/2017-03-12/diagram.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p><tt>HashMap</tt> 继承 <tt>AbstractMap</tt> 类并实现了 <tt>Map</tt>、 <tt>Cloneable</tt>、 <tt>Serializable</tt> 接口，下面是类中定义的一些常量，具体含义请看代码中注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认 table 数组长度为 16，必须是 2 的 n 次方，初始化时可以指定 table 数组长度，</span></span><br><span class="line"><span class="comment"> * 若指定的数组长度不为 2 的 n 次方，将会自动转化为大于指定长度的最小的一个 2 的 n </span></span><br><span class="line"><span class="comment"> * 次方值作为初始数组长度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组最大的长度为 2 的 30 次方，超过这个长度后数组将不再扩容（每次扩容后数组大小</span></span><br><span class="line"><span class="comment"> * 均为扩容前数组大小的 2 倍，已存在元素进行重散列）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认负载因子为 0.75</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列转化为红黑树的长度临界值，当队列长度大于等于 8 时将被转化为红黑树。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树转化为队列的节点个数临界值，当红黑树中节点个数小于等于 6 时红黑树将被转化为队列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将队列转化为红黑树除了满足队列长度大于等于 8 这个条件外，还得满足 table 数组的大小</span></span><br><span class="line"><span class="comment"> * 至少为 64，否则即使队列长度超过了 8，也只会进行数组的扩容，而不会将数组转化为红黑</span></span><br><span class="line"><span class="comment"> * 树，具体的操作请参阅 putVal(int hash, K key, V value, boolean onlyIfAbsent,</span></span><br><span class="line"><span class="comment"> * boolean evict) 方法调用 treeifyBin(Node&lt;K,V&gt;[] tab, int hash) 方法这一过程。</span></span><br><span class="line"><span class="comment"> * 这个值至少为 4 * TREEIFY_THRESHOLD，以避免扩容与树化之间的冲突。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>了解了这些定义的常量及其作用之后，我们大概就知道了 <tt>HashMap</tt> 的设计理念及各种操作中应该注意的事项，下面我们来看看具体的各种实现。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>JDK1.8 中 <tt>HashMap</tt> 类提供了这4种构造方法，默认 <i>table</i> 数组大小为 16、负载因子为 0.75，但是构造函数中并没有直接初始化 <i>table</i>。在 <tt>HashMap</tt> 中，<i>table</i> 数组的初始化采用延迟加载的方式，只有在第一次使用 <tt>put</tt> 方法时才会调用 <tt>resize</tt> 方法进行初始化，详情请参阅后文对 <tt>put</tt>、<tt>resize</tt> 方法的实现分析。这里我们来看一下如果初始化时指定数组大小时的具体操作。<tt>HashMap</tt> 中，<tt>public HashMap(int initialCapacity, float loadFactor)</tt>和<tt>public HashMap(int initialCapacity)</tt> 这两个构造函数可以指定初始化时 <i>table</i> 数组大小，其中<tt>public HashMap(int initialCapacity)</tt> 构造函数最终还是通过使用默认负载因子来调用 <tt>public HashMap(int initialCapacity, float loadFactor)</tt> 构造函数，数组最终的大小也是通过 <tt>static final int tableSizeFor(int cap)</tt> 方法确定，我们可以看到，初始化时指定的数组大小若是 2 的 n 次方，则实际数组大小就为指定的数组大小，否则实际数组的大小将为大于指定数组大小的一个最小的 2 的 n 次方值，例如指定数组大小为 10， 则通过位运算后得出的数组实际大小为 16，这与我们前面介绍 <tt>HashMap</tt> 类常量时的分析一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 通过使用默认负载因子来调用 public HashMap(int initialCapacity, float loadFactor) </span></span><br><span class="line"><span class="comment"> * 构造函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash-函数"><a href="#hash-函数" class="headerlink" title="hash()函数"></a>hash()函数</h3><p>HashMap 中哈希函数是通过 key 键值类型自带的哈希函数得到哈希值 h，然后将 h 与 h 的高16位异或得到 hash 值。确定元素在 table 中的 index 时，根据 (table.length - 1) &amp; hash 得到，由于 table 的长度为 2 的 n 次方，所以减一后类似掩码（00001000 - 1 = 00000111）。其实，利用 key 键值类型自带的哈希函数得到的 hash 值也可以直接用，为什么还要进行接下来的操作呢？原因是带符号的int表值范围从-2147483648到2147483648，前后加起来大概40亿的映射空间，在这个空间内，得到的 hash 值是可以很好地均匀分布的，但是，我们用的 HashMap 远小于这个大小，默认的只有 16，所以会根据 HashMap 中的数组长度进行取模操作，这里的取模操作就是 hash &amp; (table.length - 1)，但是，这样一来，相当于就只有后几位参与运算，发生冲突的可能性比较高，所以这里加入了高16位参与计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize-方法"><a href="#resize-方法" class="headerlink" title="resize()方法"></a>resize()方法</h3><p>resize() 方法用来初始化 table，或者是将原 table 的容量扩为 2 倍，并对已有的元素进行扩容后的重散列操作。若超过最大容量，则保持不变。由于 HashMap 在初始化时 table 的大小为 2 的 n 次方，扩容时直接扩为原来的 2 倍，所以重散列后原有元素要么在原位置，要么在原位置加 2 的 n 次方的新位置。当处理同一个桶中的元素时，resize 方法中采用两个链表分别保存这两种情况的元素，在原位置的采用 low 链表，原位置 + 2 的 n 次的采用 high 链表。具体的操作实现请看代码注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果原 table 不为空</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果超过允许的数组最大长度（2 的 30 次方），则不再扩容，直接返回原数组</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则，如果扩容为原来的 2 倍后没有超过允许的最大长度 且 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果原 table 为空， 但 threshold 设有值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 如果原 table 为空，threshold 为0，则根据默认初始化能力和负载因子为新的 HashMap 设置初始化能力和阈值</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 如果原 table 不为空，则需要对原有的数据进行重散列</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 如果 table[j] 中有元素，则需进行下一步操作</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 释放该节点</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 同一个位置未发生散列冲突，即 next 为空，则直接重散列该元素到新的 HashMap 中</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 该桶中是一颗红黑树，则通过红黑树的 split 方法处理</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">// 链表的情况下直接遍历链表依次处理每一个节点</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 由于 HashMap 在初始化时 table 的大小为 2 的 n 次方，</span></span><br><span class="line">                    <span class="comment">// 扩容时直接扩为原来的 2 倍，所以重散列后原有元素要么在原位置，</span></span><br><span class="line">                    <span class="comment">// 要么在原位置 + 2 的 n 次方的位置，</span></span><br><span class="line">                    <span class="comment">// 这里采用采用两个链表分别保存这两种情况的元素，</span></span><br><span class="line">                    <span class="comment">// 在原位置的采用 low 链表，原位置 + 2 的 n 次的采用 high 链表 </span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// low 链表仍在原位置</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// high 链表在原位置 + 2 的 n 次的位置</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h3><p>put() 方法将给定的 key→valuekey→value 映射关系存入 HashMap 中，如果该 key 在 HashMap 中已存在，则替换其对应的 value 值，并返回替换前的 value 值；否则，存入映射关系后返回 null。注意，由于 HashMap 中允许存在 null 值，所以返回 null 值并不能说明该 key 值原来不在 HashMap 中，可能是存在 key→nullkey→null 映射关系。</p><p>新数据的存入，实际上是通过 putVal() 函数完成的。在 putVal() 函数中，首先会判断 HashMap 的状态，是否为 null 或者是大小为0。如果是，则说明是第一次向 HashMap 中存入数据，需要通过 resize() 方法初始化 HashMap，这也是 HashMap 延迟初始化的体现。接下来，根据 key 值计算 hash 值，如果 hash 值对应的位置没有存入元素，则直接存入新的数据；否则，分为两种情况：1、key 已存在。这个时候会根据 onlyIfAbsent 参数决定是否要替换其对应的 value 值；2、发生 hash 冲突。在这种情况下，如果该 hash 地址后的元素以红黑树的方式存储，则直接调用 putTreeVal() 方法加入新的节点元素；如果是以链表的方式存储，则直接将新的元素加入链表末尾并根据元素的个数决定是否要将量表转化为红黑树。所有的操作结束后，根据 HashMap 元素个数判断是否需要 resize 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// HashMap 延迟初始化体现</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 未发生 hash 冲突，直接存入新的元素</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// key 已经存在，先保存节点引用，后面根据 onlyIfAbsent 决定是否要替换其对应的 value 值</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 以红黑树形式存储，直接调用红黑树对应的加入新节点的方法添加新的元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 以链表的形式存储，直接在链表末尾加入新的元素并根据链表长度判断是否需要将链表转化为红黑树</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 链表是否需要转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key 值已存在时，根据 onlyIfAbsent 参数判断是否需要替换其对应的 value 值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 根据 size 判断是否需要 resize 操作</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><p>get(Object key) 方法返回该 key 所关联的 value 值，如果 HashMap 中不存在该 key→valuekey→value 的映射关系，则返回 null。值得注意的是，由于 Java 中 HashMap 可以存放 null 值，所以返回 null 值时并不能说明 HashMap 中一定不存在 key→valuekey→value 的映射关系，有可能是该 key 对应的值就是 null。</p><p>在查找 key 对应的值时，与前面介绍的解决哈希冲突的方式相对应。首先判断 hash 地址对应的元素是否为要查找的元素，满足条件则直接返回（未发生 hash 冲突）；否则，在对应的链表/红黑树中查找对应元素（前面有讲过，当链表的长度超过8且数组长度超过64时，链表会被转化为红黑树）。这两种数据结构的查找方法相信大家都很熟悉，不再赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> (key==null ? k==null :</span></span><br><span class="line"><span class="comment"> * key.equals(k))&#125;, then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise</span></span><br><span class="line"><span class="comment"> * it returns &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A return value of &#123;<span class="doctag">@code</span> null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> * indicate that the map contains no mapping for the key; it's also</span></span><br><span class="line"><span class="comment"> * possible that the map explicitly maps the key to &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> #containsKey containsKey&#125; operation may be used to</span></span><br><span class="line"><span class="comment"> * distinguish these two cases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.get and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查直接 hash 得到的节点，该节点一定是数组中对应的某一元素</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果发生冲突的节点以红黑树的方式存放，则获取对应的树的节点</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 否则，直接遍历链表即可</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 Java 中 HashMap 的实现原理及基本操作的实现分析，了解哈希表的基本知识后，结合 Java 中 HashMap 的实现原理，再去看起源码，很简单。下面给一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 2017/4/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, Integer&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        linkedHashMap.put(<span class="string">"语文"</span>, <span class="number">100</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"数学"</span>, <span class="number">101</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"外语"</span>, <span class="number">102</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"物理"</span>, <span class="number">103</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"化学"</span>, <span class="number">104</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"生物"</span>, <span class="number">105</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"地理"</span>, <span class="number">106</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"算法"</span>, <span class="number">107</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"测试"</span>, <span class="number">108</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">"开发"</span>, <span class="number">109</span>);</span><br><span class="line"></span><br><span class="line">        linkedHashMap.put(<span class="string">"数学"</span>, <span class="number">115</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entry : linkedHashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"："</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note default">            <p>输出结果为:<br>语文：100<br>数学：115<br>外语：102<br>物理：103<br>化学：104<br>生物：105<br>地理：106<br>算法：107<br>测试：108<br>开发：109</p>          </div><p>可以看到，输出元素的顺序与加入的顺序不一致并且有2个元素发生哈希冲突，它们以链表的形式存储：</p><p><img src="/images/2017-03-12/example.png" alt></p><p>总结：</p><ul><li>Java 中 HashMap 采用 数组 + 链表 + 红黑树 构造；</li><li>Java 中 HashMap 数组默认大小为 16，负载因子为 0.75，新建 HashMap 时并不是直接初始化数组，而是在第一次添加数组的时候进行数组的初始化工作，即采用延迟初始化的策略；</li><li>数组长度必须是 2 的 n 次方，初始化时可以指定 table 数组长度，若指定的数组长度不为 2 的 n 次方，将会自动转化为大于指定长度的最小的一个 2 的 n 次方值作为初始数组长度；</li><li>Java 中每一次对数组扩容时都会将其扩为原来的两倍，由于 table 本来的长度就是 2 的 n 次方，所以扩容后，已有的元素重 hash 后要么在原来的位置，要么在原位置偏移 2 的 n 次方；</li><li>当链表长度大于等于8并且数组长度大于等于64时，链表将会被转化为红黑树；当红黑树中节点个数小于6时将会被转化为链表。</li></ul><p>参考：</p><p><a href="http://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">Java HashMap工作原理及实现</a><br><a href="http://blog.jrwang.me/2016/java-collections-hashmap/" target="_blank" rel="noopener">Java 容器源码分析之 HashMap</a><br><a href="http://www.jianshu.com/p/249809a33ef6" target="_blank" rel="noopener">HashMap工作原理深入探讨</a><br><a href="https://www.zhihu.com/question/20733617" target="_blank" rel="noopener">JDK 源码中 HashMap 的 hash 方法原理是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 红黑树 </tag>
            
            <tag> 负载因子 </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中String对象创建过程探究</title>
      <link href="/2017/02/13/Java%E4%B8%ADString%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E6%8E%A2%E7%A9%B6/"/>
      <url>/2017/02/13/Java%E4%B8%ADString%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>为了更好的理解 String 对象的创建过程，我们先来了解一下 Constant Pool 常量池的概念。在编译好的 Java class 文件中，有一个区域被称为 Constant Pool，它是一个由数组组成的表，类型为 cp_info constant_pool[]，用来存储程序中使用的各种常量，包括 Class、String、Integer 等各种基本的 Java 数据类型，其中， cp_info 的通用结构如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u1 info[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tag 是一个数字，用来标记存储的常量类型（类似于8表示 String 类型， 5表示 Long 类型），info[] 会根据 tag 值的不同而发生变化。在 Constant Pool 中用来存放 String 常量的区域被称为 String Pool，对于值相同的 String 常量，在 Constant Pool 中只会创建一个。程序执行时，Constant Pool 会存储在 Method Area 中，而不是堆中。另外，对于内容为空的字符串常量，也会创建一个长度为0、内容为空的字符串存储在 Constant Pool 中，并且 Constant Pool 可以在程序运行期间被动态扩展。</p><p>在了解 Constant Pool 基本情况后，接下来我们再来看看 String。在 Java 中，String 使用 private final char value[] 来实现字符串的存储，这也就是为什么我们说 String 对象在创建后其内容就不可再更改的原因！Java 中，String 对象的创建方式有很多种：</p><figure class="highlight java"><figcaption><span>示例1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="string">"a"</span>;</span><br><span class="line">String strB = <span class="keyword">new</span> String();</span><br><span class="line">String strC = <span class="keyword">new</span> String(<span class="string">"c"</span>);</span><br><span class="line">String strD = strA + strC; </span><br></pre></td></tr></table></figure><p>不同的创建方式会有不同的创建过程：当执行 String strA = “a” 时，JVM 首先会到 String Pool 中查找是否存在字符串对象 “a”，如果存在，则将该对象引用返回给 strA；如果不存在，JVM 会在 String Pool 中创建该字符串对象，并将其引用返回给 strA。值得注意的是，对于使用 “” 创建的字符串对象，其在编译期间就已经被创建并存储在 Constant Pool 中的 String Pool 中，通过下面这个例子，我们可以验证这一过程：</p><figure class="highlight java"><figcaption><span>示例2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="string">"a"</span>;</span><br><span class="line">String strB = <span class="string">"a"</span>;</span><br><span class="line">System.out.println(strA == strB);   <span class="comment">// output: true</span></span><br></pre></td></tr></table></figure><p>而对于 String strC = new String(“c”)，在执行时，JVM 首先会查看 String Pool 中是否存在字符串对象 “c”，若不存在，则在 String Pool 中创建字符串对象 “c”，然后执行 String(“c”) 构造函数在堆（heap）中创建一个字符串对象，并将堆（heap）中该对象引用返回给 strC；若存在，则直接使用 String Pool 中的字符串对象 “c”，然后调用 String(c””) 构造函数在堆（heap）中创建一个字符串对象，并将堆（heap）中该对象引用返回给 strC，所以，无论 String Pool 中是否存在 “c” 字符串对象， new String(“c”) 都会在堆（heap）中创建一个新的字符串对象，并且，如果 String Pool 中不存在字符串对象 “c” 时，使用 new String(“c”) 创建一个 String 对象时会创建两个字符串对象，一个在 String Pool 中（编译期），一个在堆中（运行期）:</p><figure class="highlight java"><figcaption><span>示例3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">String strB = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(strA == strB);       <span class="comment">// output: false</span></span><br><span class="line">System.out.println(strA.equals(strB));  <span class="comment">// output: true</span></span><br></pre></td></tr></table></figure><p><strong> 注意：对于 String 来讲，== 判断两个变量是否指向同一内存地址；equals() 判断两个对象是否“一样”（所有成员的值相同）。</strong></p><figure class="highlight java"><figcaption><span>示例4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="string">"a"</span> + <span class="string">"b"</span>;</span><br><span class="line">String strB = <span class="string">"ab"</span>;</span><br><span class="line">System.out.println(strA == strB);   <span class="comment">// output: true</span></span><br></pre></td></tr></table></figure><p>对于 示例4 的结果我们根据对 示例2 的分析可知， strA 在编译期就被优化为 ab，对此，我们可以假设 <strong><em> 对于使用 + 号链接的字符串常量，JVM在编译期间就将其优化为连接后的字符串常量 </em></strong>，下面我们来验证一下这个假设：</p><figure class="highlight java"><figcaption><span>示例5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="string">"a"</span> + <span class="string">"b"</span> + <span class="string">"c"</span>;</span><br><span class="line">String strB = <span class="string">"ab"</span> + <span class="string">"c"</span>;</span><br><span class="line">String strC = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(strA == strB);   <span class="comment">// output: true</span></span><br><span class="line">System.out.println(strA == strC);   <span class="comment">// output: true</span></span><br><span class="line">System.out.println(strB == strC);   <span class="comment">// output: true</span></span><br></pre></td></tr></table></figure><p>可见，<strong> 对于使用 + 号链接的字符串常量，JVM 在编译期间就将其优化为连接后的字符串常量，存储在 String Pool 中。 </strong> 那么，对于使用 + 号连接的字符串常量和变量是否有相同的处理方式呢？</p><figure class="highlight java"><figcaption><span>示例6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">"a"</span>;</span><br><span class="line">        String strB = <span class="string">"b"</span>;</span><br><span class="line">        String strC = <span class="string">"a"</span> + <span class="string">"b"</span>;</span><br><span class="line">        String strD = <span class="string">"a"</span> + strB;</span><br><span class="line">        String strE = strA + strB;</span><br><span class="line"></span><br><span class="line">        System.out.println(strC == strD);         <span class="comment">// output: false</span></span><br><span class="line">        System.out.println(strC.equals(strD));    <span class="comment">// output: true</span></span><br><span class="line">        System.out.println(strC == strE);         <span class="comment">// output: false</span></span><br><span class="line">        System.out.println(strC.equals(strE));    <span class="comment">// output: true</span></span><br><span class="line">        System.out.println(strD == strE);         <span class="comment">// output: false</span></span><br><span class="line">        System.out.println(strD.equals(strE));    <span class="comment">// output: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，只要 + 号一边存在变量，编译期间就不会被优化，而变量的值只能在运行时才被确定，通过查看反编译后的字节码更可以确信这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: ldc           #2                  // String a</span><br><span class="line">       <span class="number">2</span>: astore_1</span><br><span class="line">       3: ldc           #3                  // String b</span><br><span class="line">       <span class="number">5</span>: astore_2</span><br><span class="line">       6: ldc           #4                  // String ab</span><br><span class="line">       <span class="number">8</span>: astore_3</span><br><span class="line">       9: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">      <span class="number">12</span>: dup</span><br><span class="line">      13: invokespecial #6                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">      16: ldc           #2                  // String a</span><br><span class="line">      18: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      <span class="number">21</span>: aload_2</span><br><span class="line">      22: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      25: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">28</span>: astore        <span class="number">4</span></span><br><span class="line">      30: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">      <span class="number">33</span>: dup</span><br><span class="line">      34: invokespecial #6                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">      <span class="number">37</span>: aload_1</span><br><span class="line">      38: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      <span class="number">41</span>: aload_2</span><br><span class="line">      42: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      45: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">48</span>: astore        <span class="number">5</span></span><br><span class="line">      50: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">53</span>: aload_3</span><br><span class="line">      <span class="number">54</span>: aload         <span class="number">4</span></span><br><span class="line">      <span class="number">56</span>: if_acmpne     <span class="number">63</span></span><br><span class="line">      <span class="number">59</span>: iconst_1</span><br><span class="line">      <span class="number">60</span>: goto          <span class="number">64</span></span><br><span class="line">      <span class="number">63</span>: iconst_0</span><br><span class="line">      64: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      67: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">70</span>: aload_3</span><br><span class="line">      <span class="number">71</span>: aload         <span class="number">4</span></span><br><span class="line">      73: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">      76: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      79: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">82</span>: aload_3</span><br><span class="line">      <span class="number">83</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">85</span>: if_acmpne     <span class="number">92</span></span><br><span class="line">      <span class="number">88</span>: iconst_1</span><br><span class="line">      <span class="number">89</span>: goto          <span class="number">93</span></span><br><span class="line">      <span class="number">92</span>: iconst_0</span><br><span class="line">      93: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      96: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">99</span>: aload_3</span><br><span class="line">     <span class="number">100</span>: aload         <span class="number">5</span></span><br><span class="line">     102: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">     105: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">     108: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">111</span>: aload         <span class="number">4</span></span><br><span class="line">     <span class="number">113</span>: aload         <span class="number">5</span></span><br><span class="line">     <span class="number">115</span>: if_acmpne     <span class="number">122</span></span><br><span class="line">     <span class="number">118</span>: iconst_1</span><br><span class="line">     <span class="number">119</span>: goto          <span class="number">123</span></span><br><span class="line">     <span class="number">122</span>: iconst_0</span><br><span class="line">     123: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">     126: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">129</span>: aload         <span class="number">4</span></span><br><span class="line">     <span class="number">131</span>: aload         <span class="number">5</span></span><br><span class="line">     133: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">     136: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">     <span class="number">139</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>示例7</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">"a"</span>;</span><br><span class="line">        <span class="keyword">final</span> String strB = <span class="string">"b"</span>;</span><br><span class="line">        String strC = <span class="string">"a"</span> + <span class="string">"b"</span>;</span><br><span class="line">        String strD = <span class="string">"a"</span> + strB;</span><br><span class="line">        String strE = strA + strB;</span><br><span class="line"></span><br><span class="line">        System.out.println(strC == strD);         <span class="comment">// output: true</span></span><br><span class="line">        System.out.println(strC.equals(strD));    <span class="comment">// output: true</span></span><br><span class="line">        System.out.println(strC == strE);         <span class="comment">// output: false</span></span><br><span class="line">        System.out.println(strC.equals(strE));    <span class="comment">// output: true</span></span><br><span class="line">        System.out.println(strD == strE);         <span class="comment">// output: false</span></span><br><span class="line">        System.out.println(strD.equals(strE));    <span class="comment">// output: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例7 相比于 示例6，唯一的不同在于 strB 前添加了 final 关键字，被 final 关键字修饰的变量在编译期间会被当做一个常量处理，JVM 会对 final 修饰的变量、方法等在编译期间做一些内联处理，以提高性能。查看反编译后的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: ldc           #2                  // String a</span><br><span class="line">       <span class="number">2</span>: astore_1</span><br><span class="line">       3: ldc           #3                  // String ab</span><br><span class="line">       <span class="number">5</span>: astore_3</span><br><span class="line">       6: ldc           #3                  // String ab</span><br><span class="line">       <span class="number">8</span>: astore        <span class="number">4</span></span><br><span class="line">      10: new           #4                  // class java/lang/StringBuilder</span><br><span class="line">      <span class="number">13</span>: dup</span><br><span class="line">      14: invokespecial #5                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">      <span class="number">17</span>: aload_1</span><br><span class="line">      18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      21: ldc           #7                  // String b</span><br><span class="line">      23: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      26: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      <span class="number">29</span>: astore        <span class="number">5</span></span><br><span class="line">      31: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">34</span>: aload_3</span><br><span class="line">      <span class="number">35</span>: aload         <span class="number">4</span></span><br><span class="line">      <span class="number">37</span>: if_acmpne     <span class="number">44</span></span><br><span class="line">      <span class="number">40</span>: iconst_1</span><br><span class="line">      <span class="number">41</span>: goto          <span class="number">45</span></span><br><span class="line">      <span class="number">44</span>: iconst_0</span><br><span class="line">      45: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      48: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">51</span>: aload_3</span><br><span class="line">      <span class="number">52</span>: aload         <span class="number">4</span></span><br><span class="line">      54: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">      57: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      60: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">63</span>: aload_3</span><br><span class="line">      <span class="number">64</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">66</span>: if_acmpne     <span class="number">73</span></span><br><span class="line">      <span class="number">69</span>: iconst_1</span><br><span class="line">      <span class="number">70</span>: goto          <span class="number">74</span></span><br><span class="line">      <span class="number">73</span>: iconst_0</span><br><span class="line">      74: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      77: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">80</span>: aload_3</span><br><span class="line">      <span class="number">81</span>: aload         <span class="number">5</span></span><br><span class="line">      83: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">      86: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      89: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">92</span>: aload         <span class="number">4</span></span><br><span class="line">      <span class="number">94</span>: aload         <span class="number">5</span></span><br><span class="line">      <span class="number">96</span>: if_acmpne     <span class="number">103</span></span><br><span class="line">      <span class="number">99</span>: iconst_1</span><br><span class="line">     <span class="number">100</span>: goto          <span class="number">104</span></span><br><span class="line">     <span class="number">103</span>: iconst_0</span><br><span class="line">     104: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">     107: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">110</span>: aload         <span class="number">4</span></span><br><span class="line">     <span class="number">112</span>: aload         <span class="number">5</span></span><br><span class="line">     114: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">     117: invokevirtual #10                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">     <span class="number">120</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比源代码第9行和反编译后的字节码第0-8行和第31-45行，我们会发现在编译期间， strD 就被优化为字符串常量 ab 存储在 String Pool 中，并且可以很明显的看到，对于字符串常量与变量的 + 操作是通过 StringBuilder.append() 方法完成的。</p><p>接下来我们来看看 intern() 方法，JDK8 文档中的描述如下：</p><blockquote><p><strong>public String intern()</strong><br>Returns a canonical representation for the string object.<br>A pool of strings, initially empty, is maintained privately by the class String.</p><p>When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.</p><p>It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.</p><p>All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.</p><p><strong>Returns:</strong><br>a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.</p></blockquote><p>简单来说，对一个 String 对象调用 intern() 方法时，JVM 首先会检查 String Pool 中是否存在与该对象值相等的对象（采用 equals() 方法），如果存在，则返回 String Pool 中该对象的引用；如果不存在，则先在 String Pool 中创建一个相同值的 String 对象，然后返回其引用。下面我们来看一个例子：</p><figure class="highlight java"><figcaption><span>示例8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="string">"a"</span>;</span><br><span class="line">        String strB = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(strA == strB);   <span class="comment">// output: false</span></span><br><span class="line"></span><br><span class="line">        strB = strB.intern();</span><br><span class="line">        System.out.println(strA == strB);   <span class="comment">// output: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，”” 创建的字符串和 new String() 构造函数创建的字符串对象虽然值一样，但并不是同一个对象，通过对 new String() 构造函数创建的字符串调用 intern() 方法后，两个对象都指向 String Pool 中的 a 字符串对象。</p><p>下面来看一下美团点评技术团队 <a href="http://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="noopener">深入解析String#intern</a> 一文中的两个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String strA = <span class="keyword">new</span> String(<span class="string">"a"</span>) + <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">        strA.intern();</span><br><span class="line">        String strB = <span class="string">"aa"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(strA == strB);   <span class="comment">// output: true</span></span><br><span class="line"></span><br><span class="line">        String strC = <span class="keyword">new</span> String(<span class="string">"b"</span>) + <span class="keyword">new</span> String(<span class="string">"b"</span>);</span><br><span class="line">        String strD = <span class="string">"bb"</span>;</span><br><span class="line">        strC.intern();</span><br><span class="line"></span><br><span class="line">        System.out.println(strC == strD);   <span class="comment">// output: false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能乍一看，你会觉得，怎么用上面的理论解释不清呢，其实并不是，intern() 的运行机制没有变，只是在这里我们并没有将 intern() 函数的返回值赋给原对象，为弄清楚具体过程，你得了解 JVM 关于 Constant Pool 的存放位置，这里不再赘述，请移步 <a href="http://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="noopener">深入解析String#intern</a> “二，jdk6 和 jdk7 下 intern 的区别” 这部分查看详情。</p><p><strong> 参考： </strong></p><ul><li><a href="http://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="noopener">深入解析String#intern</a></li><li><a href="http://supportopensource.iteye.com/blog/770020" target="_blank" rel="noopener">创建String对象过程的内存分配小结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
            <tag> intern </tag>
            
            <tag> 常量池 </tag>
            
            <tag> Constant Pool </tag>
            
            <tag> String Pool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中间缓存变量机制</title>
      <link href="/2017/02/07/Java%E4%B8%AD%E9%97%B4%E7%BC%93%E5%AD%98%E5%8F%98%E9%87%8F%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/02/07/Java%E4%B8%AD%E9%97%B4%E7%BC%93%E5%AD%98%E5%8F%98%E9%87%8F%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>在讨论这个话题之前，我们先来看一小段程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, sumA, sumB;</span><br><span class="line"> </span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        sumA = (i++) + (i++);</span><br><span class="line">        System.out.println(<span class="string">"sumA = "</span> + sumA);</span><br><span class="line"> </span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        sumB = (++i) + (++i);</span><br><span class="line">        System.out.println(<span class="string">"sumB = "</span> + sumB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>程序的运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sumA = <span class="number">1</span></span><br><span class="line">sumB = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>可能大家在看完这段程序后并没有太大感触，接下来我们看看相同的 C 程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, sumA, sumB;</span><br><span class="line"> </span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    sumA = (i++) + (i++);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sumA = %d\n"</span>, sumA);</span><br><span class="line"> </span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    sumB = (++i) + (++i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sumB = %d\n"</span>, sumB);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sumA = <span class="number">0</span></span><br><span class="line">sumB = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>为什么会有这样的结果呢？这就不得不提起 <strong><em> Java中间缓存变量机制 </em></strong>，由于该机制的存在，<code>sumA = (i++) + (i++)</code> 实际上等效于以下过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">temp1 = i</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">temp2 = i</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">sumA = temp1 + temp2</span><br></pre></td></tr></table></figure><p>同理，<code>sumB = (++i) + (++i)</code> 等效过程为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span></span><br><span class="line">temp1 = i</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">temp2 = i</span><br><span class="line"></span><br><span class="line">sumB = temp1 + temp2</span><br></pre></td></tr></table></figure><p><strong><em> 在 java 中，执行自增／自减操作时，会为每一个操作分配一个临时变量，用来存储中间结果。 </em></strong> 如果是前缀操作，则先对变量本身执行自增／自减操作，后赋值给临时变量；如果是后缀操作，则先赋值给临时变量，后对变量本身执行自增／自减操作。运算最终使用的是分配的临时变量，而不是变量本身！而在 C 语言中，每一个变量在程序运行的任意时刻，都只有一个值，运算使用的是变量本身，不存在用于自增／自减操作的临时变量。值得注意的是，在不同 gcc 版本下，该过程的实现方式也不相同，从而导致上述 c 程序在 <code>macOS Sierra 10.12.3</code> 和 <code>Ubuntu 16.04</code> 中运行的结果为 <code>sumA = 1   sumB = 3</code>，而在 <code>Windows 10</code> 中运行的结果为 <code>sumA = 0  sumB = 4</code>，关于这一点可参见 <a href="http://www.cnblogs.com/dejavu/archive/2012/07/30/2614434.html" target="_blank" rel="noopener">&lt;C/C++&gt; 关于自增运算符的一段纠结</a> 和 《王道程序员求职宝典》65页。</p><p>接下来，我们来看看《Java程序员面试宝典》（第4版）中的一道经典面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            j = j++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: 0</span></span><br></pre></td></tr></table></figure><p>迭代过程中的 <code>j = j ++</code> 实际上等效于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp = j</span><br><span class="line">j = j + <span class="number">1</span></span><br><span class="line">j = temp</span><br></pre></td></tr></table></figure><p>现在应该很容易理解为什么结果为 0 了吧，不过在平时写代码的过程中，还是不要在同一个表达式中使用多个自增自减操作为好！</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间缓存变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Builder模式代替多构造器参数</title>
      <link href="/2016/11/16/%E4%BD%BF%E7%94%A8Builder%E6%A8%A1%E5%BC%8F%E4%BB%A3%E6%9B%BF%E5%A4%9A%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%82%E6%95%B0/"/>
      <url>/2016/11/16/%E4%BD%BF%E7%94%A8Builder%E6%A8%A1%E5%BC%8F%E4%BB%A3%E6%9B%BF%E5%A4%9A%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在开发的过程中，有时候我们需要使用带多个参数的构造器，在一些复杂的情况下，构造器的参数可能一部分是必须的，而另外一部分是可选的，为了满足这样的需求，我们需要对构造器进行重载，于是就有：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;    <span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;            <span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;    <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> String sex;         <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> String email;       <span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">int</span> age, String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">int</span> age, String nickname, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">int</span> age, String nickname, String sex, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"HuiLi"</span>, <span class="number">24</span>, <span class="string">"HuberyLee"</span>, <span class="string">"男"</span>, <span class="string">"huberylee@126.com"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果可选参数进一步增多，那么我们就必须不停的对构造函数进行重载，当数量达到一定程度后，我们发现在实例化对象时不仅需要选择正确的构造函数，还得记住参数列表中每一个位置对应的是何种参数，如果参数列表存在同种类型的参数，则很有可能在传递错误参数时也能正常运行，只是产生预料之外的结果，在这种情况下，我们很难找出错误在何处。那么有没有一种方法可以解决此类问题呢？在这里，我们不得不提起 <code>Builder模式</code>，在 <code>Builder模式</code> 中，我们并不直接生成想要的对象，而是在实例化时利用必要的参数得到一个 <code>Builder</code> 对象，然后在 <code>Builder</code> 对象上调用类似于 <code>setter</code> 的方法，来设置相关的可选参数，最后通过无参的 <code>build</code> 方法生成我们想要的对象实例，具体的实现请看如下示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;    <span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;            <span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;    <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> String sex;         <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> String email;       <span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String username;    <span class="comment">// required</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;            <span class="comment">// required</span></span><br><span class="line">        <span class="keyword">private</span> String nickname;    <span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">private</span> String sex;         <span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">private</span> String email;       <span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">nickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">email</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.email = email;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserFactory <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UserFactory(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserFactory</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        username = builder.username;</span><br><span class="line">        age = builder.age;</span><br><span class="line">        nickname = builder.nickname;</span><br><span class="line">        sex = builder.sex;</span><br><span class="line">        email = builder.email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserFactory&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserFactory user = <span class="keyword">new</span> UserFactory.Builder(<span class="string">"HuiLi"</span>, <span class="number">24</span>).nickname(<span class="string">"HuberyLee"</span>).sex(<span class="string">"男"</span>).build();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样，我们就可以在实例化对象时有选择的设置可选参数，不必在意可选参数的设定顺序，也不用牢记各种重载的构造函数。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Builder模式 </tag>
            
            <tag> 多构造器参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类初始化顺序</title>
      <link href="/2016/11/15/Java%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
      <url>/2016/11/15/Java%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>对于拥有静态变量、静态代码块、变量、代码块、构造函数的Java类，初始化顺序为（静态变量、静态代码块）-&gt;（变量、代码块）-&gt; 构造函数。</p><a id="more"></a><figure class="highlight java"><figcaption><span>示例一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVariable = sPrint(<span class="string">"静态变量"</span>);</span><br><span class="line">    <span class="keyword">private</span> String variable = print(<span class="string">"普通变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitialOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sPrint</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InitialOrder initialOrder = <span class="keyword">new</span> InitialOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">静态变量</span><br><span class="line">静态代码块</span><br><span class="line">普通变量</span><br><span class="line">普通代码块</span><br><span class="line">构造函数</span><br></pre></td></tr></table></figure></p><p>如果说构造函数中有其他需执行的代码：</p><figure class="highlight java"><figcaption><span>示例二：与示例一相比，main函数中增加其他执行代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVariable = sPrint(<span class="string">"静态变量"</span>);</span><br><span class="line">    <span class="keyword">private</span> String variable = print(<span class="string">"普通变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitialOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sPrint</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建实例之前"</span>);</span><br><span class="line">        InitialOrder initialOrder = <span class="keyword">new</span> InitialOrder();</span><br><span class="line">        System.out.println(<span class="string">"创建实例之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">静态变量</span><br><span class="line">静态代码块</span><br><span class="line">创建实例之前</span><br><span class="line">普通变量</span><br><span class="line">普通代码块</span><br><span class="line">构造函数</span><br><span class="line">创建实例之后</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><figcaption><span>示例三：与示例二相比，调整静态变量、静态代码块、变量、代码块间相对位置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVariable = sPrint(<span class="string">"静态变量"</span>);</span><br><span class="line">    <span class="keyword">private</span> String variable = print(<span class="string">"普通变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitialOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sPrint</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建实例之前"</span>);</span><br><span class="line">        InitialOrder initialOrder = <span class="keyword">new</span> InitialOrder();</span><br><span class="line">        System.out.println(<span class="string">"创建实例之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">静态变量</span><br><span class="line">创建实例之前</span><br><span class="line">普通代码块</span><br><span class="line">普通变量</span><br><span class="line">构造函数</span><br><span class="line">创建实例之后</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><figcaption><span>示例四：与示例三相比，去掉了main函数中实例化对象</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVariable = sPrint(<span class="string">"静态变量"</span>);</span><br><span class="line">    <span class="keyword">private</span> String variable = print(<span class="string">"普通变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitialOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sPrint</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建实例之前"</span>);</span><br><span class="line">        System.out.println(<span class="string">"创建实例之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">静态变量</span><br><span class="line">创建实例之前</span><br><span class="line">创建实例之后</span><br></pre></td></tr></table></figure></p><p>对比示例一、示例二、示例三、示例四我们发现，运行 <code>InitialOrder</code> 时，系统会尝试运行 <code>InitialOrder.main()</code> 方法，于是加载器开始启动并找出 <code>InitialOrder</code> 类的编译代码，类加载完成后，类中的 <code>static</code> 域初始化（包括静态变量和静态代码块），静态域中各部分执行的先后顺序与代码先后顺序有关（对比示例二、示例三）。然后 <code>main()</code> 函数中各部分被执行，如果 <code>main()</code> 函数中存在对象实例化（示例三）、则对象实例化过程中先实例化成员变量和代码块（各部分执行先后顺序与代码位置有关，对比示例二、示例三），然后才执行构造函数。</p><p><strong> 继承类初始化顺序 </strong></p><figure class="highlight java"><figcaption><span>示例五</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVariable = sPrint(<span class="string">"基类静态变量"</span>);</span><br><span class="line">    <span class="keyword">private</span> String variable = print(<span class="string">"基类普通变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"基类构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sPrint</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrder</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类-静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类-普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVariable = sPrint(<span class="string">"子类-静态变量"</span>);</span><br><span class="line">    <span class="keyword">private</span> String variable = print(<span class="string">"子类-普通变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitialOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类-构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sPrint</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建实例之前"</span>);</span><br><span class="line">        InitialOrder initialOrder = <span class="keyword">new</span> InitialOrder();</span><br><span class="line">        System.out.println(<span class="string">"创建实例之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">基类静态代码块</span><br><span class="line">基类静态变量</span><br><span class="line">子类-静态代码块</span><br><span class="line">子类-静态变量</span><br><span class="line">创建实例之前</span><br><span class="line">基类普通代码块</span><br><span class="line">基类普通变量</span><br><span class="line">基类构造函数</span><br><span class="line">子类-普通代码块</span><br><span class="line">子类-普通变量</span><br><span class="line">子类-构造函数</span><br><span class="line">创建实例之后</span><br></pre></td></tr></table></figure></p><p>通过示例五可以发现，在继承的情况下，类的初始化顺序大体不变，在静态域初始化时，先完成父类静态域初始化过程，再完成子类静态域初始化过程，接着是父类和子类按先后顺序分别执行成员变量和代码块初始化，最后执行构造函数。</p><p>理解完了Java类初始化的顺序之后，我们来看看阿里2014年的一道校招笔试题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alibaba</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Alibaba t1 = <span class="keyword">new</span> Alibaba(<span class="string">"t1"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Alibaba t2 = <span class="keyword">new</span> Alibaba(<span class="string">"t2"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = print(<span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> j = print(<span class="string">"j"</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"构造块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        print(<span class="string">"静态块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Alibaba</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println((++k) + <span class="string">":"</span> + str + <span class="string">"    i="</span> + i + <span class="string">"    n="</span> + n);</span><br><span class="line">        ++i;</span><br><span class="line">        ++n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println((++k) + <span class="string">":"</span> + str + <span class="string">"    i="</span> + i + <span class="string">"    n="</span> + n);</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Alibaba t = <span class="keyword">new</span> Alibaba(<span class="string">"init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>答案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:j    i=<span class="number">0</span>    n=<span class="number">0</span></span><br><span class="line"><span class="number">2</span>:构造块    i=<span class="number">1</span>    n=<span class="number">1</span></span><br><span class="line"><span class="number">3</span>:t1    i=<span class="number">2</span>    n=<span class="number">2</span></span><br><span class="line"><span class="number">4</span>:j    i=<span class="number">3</span>    n=<span class="number">3</span></span><br><span class="line"><span class="number">5</span>:构造块    i=<span class="number">4</span>    n=<span class="number">4</span></span><br><span class="line"><span class="number">6</span>:t2    i=<span class="number">5</span>    n=<span class="number">5</span></span><br><span class="line"><span class="number">7</span>:i    i=<span class="number">6</span>    n=<span class="number">6</span></span><br><span class="line"><span class="number">8</span>:静态块    i=<span class="number">7</span>    n=<span class="number">99</span></span><br><span class="line"><span class="number">9</span>:j    i=<span class="number">8</span>    n=<span class="number">100</span></span><br><span class="line"><span class="number">10</span>:构造块    i=<span class="number">9</span>    n=<span class="number">101</span></span><br><span class="line"><span class="number">11</span>:init    i=<span class="number">10</span>    n=<span class="number">102</span></span><br></pre></td></tr></table></figure></p><p>是不是有种白学了的感觉……客官不用急，先来看看两条规则：</p><div class="note danger">            <p><strong>规则1：在类第一次加载的时候，将会进行静态域的初始化：</strong><br>1.将所有的静态数据域初始化为默认值（0、false 和 null）；<br>2.按照在类中定义的顺序依次执行静态初始化语句和静态初始化块。</p><p><strong>规则2：调用构造器的具体处理步骤：</strong><br>1.将所有的数据域初始化为默认值（0、false 和 null）；<br>2.按照在类中定义的顺序依次执行初始化语句和初始化块；<br>3.如果构造器调用的其他的构造器，则转而执行另一构造器；<br>4.执行构造器主体。</p>          </div><p>现在再对照着结果看，应该就没有什么问题了。</p><p><strong>参考：</strong><br><a href="https://segmentfault.com/a/1190000004527951" target="_blank" rel="noopener">Java类初始化顺序</a><br><a href="http://liujiacai.net/blog/2014/07/12/order-of-initialization-in-java/" target="_blank" rel="noopener">Java类中的初始化顺序</a><br><a href="http://blog.csdn.net/geekdonie/article/details/12260599" target="_blank" rel="noopener">Java 类初始化顺序 – 结合阿里2014校招笔试 Java 附加题</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初始化顺序 </tag>
            
            <tag> 类继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中按字节截取含中文的字符串</title>
      <link href="/2016/11/15/Java%E4%B8%AD%E6%8C%89%E5%AD%97%E8%8A%82%E6%88%AA%E5%8F%96%E5%90%AB%E4%B8%AD%E6%96%87%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2016/11/15/Java%E4%B8%AD%E6%8C%89%E5%AD%97%E8%8A%82%E6%88%AA%E5%8F%96%E5%90%AB%E4%B8%AD%E6%96%87%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><strong><em>Java 采用了 Unicode 编码，所有字符（无论是中文还是英文），均采用两个字节表示。</em></strong>最近看到一个按字节截取含中文的字符串的问题：输入一个字符串和一个数字，输出按字节截取的字符串，要保证汉字不会被截成半个，如 <code>“我是ABC”，3</code>，结果应该是 <code>我</code>；输入 <code>“我是ABC”，5</code>，结果应该是 <code>我是A</code>。于是在 <code>Windows</code> 系统上写了一段小代码：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"我是ABC"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(subString(str, <span class="number">3</span>));</span><br><span class="line">            System.out.println(subString(str, <span class="number">5</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">subString</span><span class="params">(String str, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        StringBuffer subString = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] b = (str.charAt(i) + <span class="string">""</span>).getBytes();</span><br><span class="line"></span><br><span class="line">            count = count + b.length;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; length)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            subString.append(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> subString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果刚好满足要求：</p><p><img src="/images/2016-11-15/windows.png" alt></p><p>后来把代码拷到 Mac 上运行，结果却不一样了：</p><p><img src="/images/2016-11-15/mac.png" alt></p><p>这是什么原因呢？为了找到原因，我将 <code>for</code> 循环中 <code>b</code> 的长度给打印出来，发现在 <code>Windows</code> 环境下， <code>b</code> 的长度为 2， 在 <code>Linux</code> 环境下， <code>b</code> 的长度为 3，这才导致同一份代码，在两种环境下运行出来的结果却不一样。进一步分析，原来，中文版的 <code>Windows</code> 系统默认编码方式为 <code>GBK</code>，中文版的 <code>Mac</code> 系统默认编码方式为 <code>UTF-8</code>，<strong><em> 在 <code>GBK</code> 编码方式下，中文字符的长度为 2 个字节，而在 <code>UTF-8</code> 编码方式下，中文字符的长度为 3 个字节 </em></strong>。可能的原因找到了，接下来就是验证了，于是将代码修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"我是ABC"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(subString(str, <span class="number">3</span>));</span><br><span class="line">            System.out.println(subString(str, <span class="number">5</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">subString</span><span class="params">(String str, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        StringBuffer subString = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] b = (str.charAt(i) + <span class="string">""</span>).getBytes(<span class="string">"GBK"</span>);</span><br><span class="line">            <span class="comment">//byte[] b = (str.charAt(i) + "").getBytes("UTF-8");</span></span><br><span class="line"></span><br><span class="line">            System.out.println(str.charAt(i) + <span class="string">"\tlength: "</span> + b.length);</span><br><span class="line"></span><br><span class="line">            count = count + b.length;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; length)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            subString.append(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> subString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现原因就是因为各操作系统默认编码方式不同，通过在调用 <code>getBytes()</code> 方法时指定编码方式可以使代码在各环境中运行结果一致。</p><p><strong>备注：</strong> 如果在不同操作系统中均采用 <code>IntelliJ IDEA</code> 来编写并运行 <strong>未修改前</strong> 的代码，会发现不同环境下运行结果一样，我想这可能是因为在不同环境下，<code>IntelliJ IDEA</code> 都采用相同的编码方式保存和编译代码，并不受操作系统默认编码方式的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串截取 </tag>
            
            <tag> SubString </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC中整合Shiro所遇到的问题</title>
      <link href="/2016/10/29/SpringMVC%E4%B8%AD%E6%95%B4%E5%90%88Shiro%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2016/10/29/SpringMVC%E4%B8%AD%E6%95%B4%E5%90%88Shiro%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>关于在 Spring 框架中如何使用 Shiro ，Shiro <a href="http://shiro.apache.org/spring.html" target="_blank" rel="noopener">官网</a> 有较为详细的描述，这里不再赘述。下面描述一下我在通过 JavaConfig 方式向 SpringMVC 中整合 Shiro 时所遇到的一些问题及解决方法。</p><a id="more"></a><h3 id="如何使-Shiro-过滤所有请求"><a href="#如何使-Shiro-过滤所有请求" class="headerlink" title="如何使 Shiro 过滤所有请求"></a>如何使 Shiro 过滤所有请求</h3><p>如果使用 xml 文件配置的话，相信这是一个简单的问题，你只需要在 <code>web.xml</code> 文件中添加如下过滤器即可(直接摘自 Shiro 官网)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The filter-name matches name of a 'shiroFilter' bean inside applicationContext.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Make sure any request you want accessible to Shiro is filtered. /* catches all --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- requests.  Usually this filter mapping is defined first (before all others) to --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ensure that Shiro works in subsequent filters in the filter chain:             --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但使用 JavaConfig 方式，却需要这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.DelegatingFilterProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterRegistration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;RootConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 ShiroFilter，用来过滤所有URL请求，此处 addFilter 所指定的 Filter 的名字要与 ShiroConfig 中的 ShiroFilter 名字一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerShiroFilter</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        FilterRegistration.Dynamic filterRegistration = servletContext.addFilter(<span class="string">"shiroFilter"</span>, DelegatingFilterProxy.class);</span><br><span class="line">        filterRegistration.setInitParameter(<span class="string">"targetFilterLifecycle"</span>, <span class="string">"true"</span>);</span><br><span class="line">        filterRegistration.addMappingForUrlPatterns(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="string">"/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStartup(servletContext);</span><br><span class="line">        registerShiroFilter(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在应用程序启动时注册过滤器，这里添加的过滤器的名字必须与其他配置文件中申明的 <code>ShiroFilterFactoryBean</code> 名字一样。</p><h3 id="Shiro-注解未生效"><a href="#Shiro-注解未生效" class="headerlink" title="Shiro 注解未生效"></a>Shiro 注解未生效</h3><p>按照 Shiro 官网所说，要在 Spring 中使用注解，只需要在 <code>applicationContext.xml</code> 中申明如下两个 Bean 即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Enable Shiro Annotations for Spring-configured beans.  Only run after --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- the lifecycleBeanProcessor has run: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span> <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而在 SpringMVC 中这样配置并不生效，你必须将这两个 Bean 申明在 Spring MVC 的配置文件中，也就是 JavaConfig 方式中的 <code>WebConfig.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.huberylee.controller"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特别需要注意：</span></span><br><span class="line"><span class="comment">     * 接下来三个 Beans 用来启用 Shiro 注解，必须写在 Spring MVC 的配置文件中，写在其他配置文件中无效！！！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SecurityManager securityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使在访问未经授权的页面时跳到指定页面，你需要在 <code>WebConfig.java</code> 中申明如下 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置异常发生时呈现的页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleMappingExceptionResolver <span class="title">simpleMappingExceptionResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleMappingExceptionResolver simpleMappingExceptionResolver = <span class="keyword">new</span> SimpleMappingExceptionResolver();</span><br><span class="line"></span><br><span class="line">    Properties exceptionMappings = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">// 未认证异常</span></span><br><span class="line">    exceptionMappings.put(<span class="string">"org.apache.shiro.authz.UnauthenticatedException"</span>, <span class="string">"admin/login"</span>);</span><br><span class="line">    <span class="comment">// 未授权异常</span></span><br><span class="line">    exceptionMappings.put(<span class="string">"org.apache.shiro.authz.UnauthorizedException"</span>, <span class="string">"common/unauthorized"</span>);</span><br><span class="line"></span><br><span class="line">    simpleMappingExceptionResolver.setExceptionMappings(exceptionMappings);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simpleMappingExceptionResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录成功后跳转到登录前页面未能成功执行"><a href="#登录成功后跳转到登录前页面未能成功执行" class="headerlink" title="登录成功后跳转到登录前页面未能成功执行"></a>登录成功后跳转到登录前页面未能成功执行</h3><p>我们可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SavedRequest savedRequest = WebUtils.getSavedRequest(request);</span><br><span class="line">returnUrl = savedRequest.getRequestUrl();</span><br></pre></td></tr></table></figure><p>获取登录前页面，但在使用时会发现事实并非如此，会报 <code>NullPointerException</code> 错误，原因是在配置 <code>ShiroFilterFactoryBean</code> 时需要配置过滤链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilter = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">    shiroFilter.setSecurityManager(securityManager());</span><br><span class="line">    shiroFilter.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">    shiroFilter.setSuccessUrl(<span class="string">"/admin"</span>);</span><br><span class="line">    shiroFilter.setUnauthorizedUrl(<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未配置这部分会导致获取登录前地址报错</span></span><br><span class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">"/admin/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">    shiroFilter.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shiroFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用Spring Data JPA实现自动化查询</title>
      <link href="/2016/10/29/SpringMVC%E4%B8%AD%E4%BD%BF%E7%94%A8Spring-Data-JPA%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9F%A5%E8%AF%A2/"/>
      <url>/2016/10/29/SpringMVC%E4%B8%AD%E4%BD%BF%E7%94%A8Spring-Data-JPA%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>在刚刚接触 SpringMVC 时，采用 JdbcOperation 来实现数据库的增删改查，在这个过程中，每一个不同的数据库操作都要自己写 SQL 语句，重复着简单雷同的工作，而且代码看起来也不是那么简洁，那么有没有一种方式可以将对象的属性直接映射到数据库对应表的字段上，并且自动生成我们所需要的查询呢？在接触到 Spring Data JPA 后，发现这正是我想要的。</p><a id="more"></a><p>由于基于 JPA 的应用程序需要使用 EntityManagerFactory 的实现类来获取 EntityManager 实例，所以在 Spring 中国年使用 JPA 的第一步是要在 Spring 应用上下文中将实力管理器工厂（entity manager factory）按照 Bean 的形式来配置。在 JPA 中有两种类型的实体管理器：</p><ul><li>应用程序管理类型：适用于不运行在 JavaEE 容器中的独立应用程序；</li><li>容器管理类型：适用于运行在容器中应用程序。</li></ul><p>这两种类型的实体管理器实现了同一个 EntityManager 接口，他们之间的关键区别不在于 EntityManager 本身，而在于 EntityManager 的创建和管理方式。更多的关于这两种类型的实体管理器之间的差异请查阅相关资料。</p><p>首先在 pom 文件中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接下来配置实体管理器，由于我们是在 SpringMVC 中使用，故应采用容器类型的实体管理器，在配置实体管理器之前，我们需要先配置数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       BasicDataSource basicDataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">       basicDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">       basicDataSource.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/huberylee?serverTimezone=UTC&amp;&amp;characterEncoding=UTF-8"</span>);</span><br><span class="line">       basicDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">       basicDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">       basicDataSource.setInitialSize(<span class="number">5</span>);</span><br><span class="line">       basicDataSource.setMaxActive(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> basicDataSource;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由于各个厂商对 JPA 有不同的实现，所以接下来我们要为实体管理器指定 JPA 的实现，这里我们采用 Hibernate：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       HibernateJpaVendorAdapter hibernateJpaVendorAdapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">       hibernateJpaVendorAdapter.setShowSql(<span class="keyword">true</span>);</span><br><span class="line">       hibernateJpaVendorAdapter.setGenerateDdl(<span class="keyword">false</span>); <span class="comment">// 是否按照实体定义修改表结构</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> hibernateJpaVendorAdapter;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>配置完数据源和 JPA 实现方式后，我们就可以配置实体管理器了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> EntityManagerFactory <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       LocalContainerEntityManagerFactoryBean factory = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">       factory.setJpaVendorAdapter(jpaVendorAdapter());</span><br><span class="line">       factory.setPackagesToScan(<span class="string">"cn.huberylee.entity"</span>);</span><br><span class="line">       factory.setDataSource(dataSource());</span><br><span class="line">       factory.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> factory.getObject();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>不要忘了，我们需要在 Config 类上加上 <code>@EnableJpaRepositories(basePackages = &quot;cn.huberylee.repository&quot;)</code> 注解，并指明要扫描的包的范围，这个配置大概是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"cn.huberylee.repository"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicDataSource basicDataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">        basicDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        basicDataSource.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/huberylee?serverTimezone=UTC&amp;&amp;characterEncoding=UTF-8"</span>);</span><br><span class="line">        basicDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        basicDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        basicDataSource.setInitialSize(<span class="number">5</span>);</span><br><span class="line">        basicDataSource.setMaxActive(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> basicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">        hibernateJpaVendorAdapter.setShowSql(<span class="keyword">true</span>);</span><br><span class="line">        hibernateJpaVendorAdapter.setGenerateDdl(<span class="keyword">false</span>); <span class="comment">// 是否按照实体定义修改表结构</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hibernateJpaVendorAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManagerFactory <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean factory = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">        factory.setJpaVendorAdapter(jpaVendorAdapter());</span><br><span class="line">        factory.setPackagesToScan(<span class="string">"cn.huberylee.entity"</span>);</span><br><span class="line">        factory.setDataSource(dataSource());</span><br><span class="line">        factory.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在配置完成后，我们就可以使用 Spring Data JPA 来进行数据库的相关操作了。</p><p>假设你数据库中现在有这样两张表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户组名称'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'发布时间'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户组状态 0：启用 1：禁用'</span></span><br><span class="line">)<span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户组信息'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">    <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'性别：0 男  1 女'</span>,</span><br><span class="line">    <span class="string">`age`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">UNIQUE</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">    <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">    <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COMMENT</span> <span class="string">'电话'</span>,</span><br><span class="line">    <span class="string">`role_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户组ID'</span>,</span><br><span class="line">    <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态 0：启用 1：禁用'</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`role`</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户信息'</span>;</span><br></pre></td></tr></table></figure></p><p>那么我们便可以用两个实体分别关联这两张表：</p><p>User 实体：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>, referencedColumnName = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> String createTime =  <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String nickname, String password, Integer sex, Integer age, String email, String address, String phone, Role role, String createTime, Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Integer sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(String createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex="</span> + sex +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", role="</span> + role +</span><br><span class="line">                <span class="string">", createTime='"</span> + createTime + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", status="</span> + status +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Role 实体：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(fetch = FetchType.EAGER, cascade = CascadeType.MERGE)</span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"role_permission"</span>,</span><br><span class="line">    joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>, referencedColumnName = <span class="string">"id"</span>),</span><br><span class="line">    inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"permission_id"</span>, referencedColumnName = <span class="string">"id"</span>))</span><br><span class="line">    <span class="keyword">private</span> List&lt;Permission&gt; permissionList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_time"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String createTime =  <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> java.util.Date());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(String name, List&lt;Permission&gt; permissionList, String createTime, Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.permissionList = permissionList;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Permission&gt; <span class="title">getPermissionList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> permissionList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPermissionList</span><span class="params">(List&lt;Permission&gt; permissionList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.permissionList = permissionList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(String createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", permissionList="</span> + permissionList +</span><br><span class="line">                <span class="string">", createTime='"</span> + createTime + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", status="</span> + status +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于实体中的关联模型和级联查询，这里不展开讲解。</p><p>下一步，我们要做的就是以接口定义的方式创建 Repository：</p><p>UserRepository<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.huberylee.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByRole_Id</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">findByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RoleRepository<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.huberylee.entity.Role;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Role</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findByPermissionList_IdIn</span><span class="params">(Long[] id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们继承的是 <code>CrudRepository</code>，还有其他 <code>Repository</code> 接口可以选择。继承自框架提供的一个 <code>Repository</code> 接口后，我们就会获得其提供的执行的持久化操作的通用方法，如查找、添加、更新、删除等，下一步你可能会想该如何实现这个接口，然而并不是这样，我们并不需要自己实现接口中的方法，系统会自动实现，这也是 Spring Data JPA 的高级之处:</p><p><img src="/images/2016-10-30/repository.png" alt></p><p>如果框架的提供的方法并不能满足我们的需要，那该怎么办？不用急，我们只需要在接口中按规则定义相关的方法，框架就会帮我们自动实现，例如我需要查指定角色的所有用户，只需要在 <code>UserRepository.java</code> 接口中定义 <code>List&lt;User&gt; findByRole_Id(Long id);</code> 方法即可，更多关于自定义查询方法的内容，请参阅 <a href="http://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/" target="_blank" rel="noopener">Spring Data JPA - Reference Documentation</a>。</p><p>此外，我们还可以通过 <code>@Query</code> 注解来定义所需要的查询，例如，我们需要获取所有使用网易 126 邮箱注册的用户：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select * from user where email like '%126.com'"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByEmailFilter</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>如果以上方式均不能满足查询要求，我们可以使用更底层的 EntityManager 来定义相关的查询操作，这部分暂未涉及，待续。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Data JPA </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中通过DBCP数据库连接池操作数据库</title>
      <link href="/2016/08/20/Spring%E4%B8%AD%E9%85%8D%E7%BD%AEDBCP%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2016/08/20/Spring%E4%B8%AD%E9%85%8D%E7%BD%AEDBCP%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>Spring 中使用数据库主要包括配置数据源、配置数据库访问模版（通过数据库访问模版，我们可以不必关心与具体操作无关的内容，如：打开/关闭数据库、异常处理等）、定义数据访问对象（利用其执行具体的数据库操作）三个步骤。其中，数据源配置方式和数据库访问模版在 Spring 中都有多种可选方案，接下来我们来看一看在 Spring 中通过 DBCP 数据库连接池使用 MySQL 数据库的具体配置过程。</p><a id="more"></a><h3 id="配置-DBCP-数据源"><a href="#配置-DBCP-数据源" class="headerlink" title="配置 DBCP 数据源"></a>配置 DBCP 数据源</h3><p>在配置 DBCP 数据源之前，我们需要先在 <code>pom.xml</code> 引入相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--Apache Commonc DBCP 数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MySQL Driver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接下来，利用 Spring 显示配置数据源，这里我们采用 JavaConfig 方式配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BasicDataSource basicDataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">    basicDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    basicDataSource.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/dbname"</span>);</span><br><span class="line">    basicDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    basicDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    basicDataSource.setInitialSize(<span class="number">5</span>);</span><br><span class="line">    basicDataSource.setMaxActive(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> basicDataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>com.mysql.jdbc.Driver</code> 是由依赖中的 <code>MySQL Driver</code> 所提供，如有需要，可以采取其他替代。到此，数据源就配置完成。</p><h3 id="配置-JDBC-模版"><a href="#配置-JDBC-模版" class="headerlink" title="配置 JDBC 模版"></a>配置 JDBC 模版</h3><p>为了让 <code>JdbcTemplate</code> 正常工作，只需要为其设置 <code>DataSource</code> 就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，<code>DataSource</code> 是通过构造器参数注入进来的，这里所引用的 dataSource bean 可以是 <code>javax.sql.DataSource</code> 的任意实现。</p><h3 id="注入数据访问对象"><a href="#注入数据访问对象" class="headerlink" title="注入数据访问对象"></a>注入数据访问对象</h3><p>我们可以将 <code>JdbcTemplate</code> 装配到 Repository 中并使用它来访问数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcOperations jdbcOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRepositoryImpl</span><span class="params">(JdbcOperations jdbcOperations)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcOperations = jdbcOperations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里， <code>UserRepositoryImpl</code> 类上使用 <code>@Repository</code> 注解，表明这个类在组件扫描时会自动创建，并通过构造器注入一个 <code>JdbcOperations</code> 对象。 <code>JdbcOperations</code> 是一个接口，定义了 <code>JdbcTemplate</code> 所实现的操作。通过注入 <code>JdbcOperations</code>，而不是具体的 <code>JdbcTemplate</code>，能够保证 <code>UserRepositoryImpl</code> 通过 <code>JdbcOperations</code> 接口达到与 <code>JdbcTemplate</code> 保持松耦合。</p><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>下面，我们可以通过 <code>jdbcOperations</code> 对象操作数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SELECT_USER_BY_ID = <span class="string">"select * from user where id = ?"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INSERT_USER = <span class="string">"insert into user (nickname, username, age) values(?, ?, ?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserByID</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jdbcOperations.queryForObject(SELECT_USER_BY_ID, <span class="keyword">new</span> UserRowMaper(), userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRowMaper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> row)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(rs.getString(<span class="string">"nickname"</span>),</span><br><span class="line">                rs.getString(<span class="string">"username"</span>),</span><br><span class="line">                rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    jdbcOperations.update(INSERT_USER, user.getNickname(),user.getUsername(), user.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DBCP </tag>
            
            <tag> 数据库连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC中前台模板不显示模型数据问题</title>
      <link href="/2016/08/20/SpringMVC%E4%B8%AD%E5%89%8D%E5%8F%B0%E6%A8%A1%E6%9D%BF%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
      <url>/2016/08/20/SpringMVC%E4%B8%AD%E5%89%8D%E5%8F%B0%E6%A8%A1%E6%9D%BF%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在学习 SpringMVC 的过程中，模型中设置的数据在 JSP 页面中通过 EL 表达式始终无法显示，只会原封不动的显示 EL 表达式 <code>${msg}</code>：</p><p><img src="/images/2016-08-20/error.png" alt></p><a id="more"></a><p>JSP页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">session</span>=<span class="string">"false"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">Nickname: <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.nickname&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Name: <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.name&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Sex: <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.sex&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Age: <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.age&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;message&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>控制器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.huberylee.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User(<span class="string">"HuberyLee"</span>, <span class="string">"Hui Li"</span>, <span class="string">"man"</span>, <span class="number">24</span>));</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"Hello world!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个问题是由于的 JSP 版本所导致。</p><h3 id="JSP-1-2"><a href="#JSP-1-2" class="headerlink" title="JSP 1.2"></a>JSP 1.2</h3><p>如果你使用较老的 JSP 1.2 部署描述符，通过 DTD 定义，例如 web.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EL 表达式默认被禁用或者忽略，你必须通过在页面中添加 <code>&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code> 手动启用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>单独添加 <code>&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code> 或者在现有 <code>&lt;%@ page %&gt;</code> 标签中添加属性 <code>isELIgnored=&quot;false&quot;</code> 都是可行的。</p><h3 id="JSP-2-0"><a href="#JSP-2-0" class="headerlink" title="JSP 2.0"></a>JSP 2.0</h3><p>如果你使用标准的 JSP 2.0 部署描述符，通过 w3c schema 定义，例如 web.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"huberylee"</span> <span class="attr">version</span>=<span class="string">"2.4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EL 表达式默认被启用，JSP 页面中的 EL 表达式会被解析并显示。</p><p><img src="/images/2016-08-20/correct.png" alt></p><p>参考：<br><a href="https://www.mkyong.com/spring-mvc/modelandviews-model-value-is-not-displayed-in-jsp-via-el/" target="_blank" rel="noopener">ModelAndView’s model value is not displayed in JSP via EL</a><br><a href="http://gimgen1026.iteye.com/blog/155354" target="_blank" rel="noopener">JSP页面EL表达式无效的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 模版 </tag>
            
            <tag> 模型数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring面向切面编程</title>
      <link href="/2016/08/07/Spring%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
      <url>/2016/08/07/Spring%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>在软件开发过程中，被多处应用的同种功能被称为横切点（cross-cutting concern），如下图所示。通常来讲，这些横切关注点应该与业务逻辑相分离，但实际开发过程中往往会直接嵌入到业务逻辑当中，如何把这些横切关注点与业务逻辑分离开来便是面向切面编程所要解决的问题。一般来讲，如果要重用通用功能，最常见的方式就是使用继承（inheritance）和委托（delegation）。但是，但是如果在应用中大规模使用相同的基类，会产生一些列问题，而使用委托则会不可避免要对委托对象进行复杂的调度。面对这样的困境，切面提供了替代继承和委托的另一种可选方案。在使用面向切面编程时，我们仍需要在一个地方定义通用功能，但是可以通过声明的方式定义该功能要以何种方式在何处运行，无需在使用该功能的类中进行相关修改。横切点可以模块化为相关的特殊类，这些被称为切面（aspect）的类不仅与业务逻辑隔离开来，还可以集中于同一个地方，不再分散到各处代码中。</p><a id="more"></a><p><img src="/images/2016-08-07/AOP.png" alt></p><p>在学习 Spring 面向切面编程之前我们先来看看 AOP 的几个基本概念：</p><ul><li>通知（Advice）：切面的工作，定义了切面是什么以及何时使用。Spring 切面有 5 中类型的通知：<ol><li>前置通知（Before）：在目标方法被调用之前调用通知功能；</li><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；</li><li>返回通知（After-returning）：在目标方法成功执行之后调用通知；</li><li>异常通知（After-throwing）：在目标方法抛出异常后调用通知；</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li></ol></li><li>连接点（Join point）：应用执行过程中能够应用通知的所有的点；</li><li>切点（Pointcut）：定义了通知被应用的具体位置（在哪些连接点，可能包含一个或者多个）；</li><li>切面（Aspect）：通知＋切点，定义了功能是什么，以及在何时何处完成。</li></ul><p>需要注意的是 Spring AOP 是基于动态代理的基础之上，所以 Spring 对 AOP 的支持仅限于方法之上。Spring 所创建的通知都使用标准的 Java 类来编写，定义通知所应用的切点通常会使用注解或者在 Spring 配置文件中采用 XML 编写。如下图所示，通过在代理类中包裹切面，Spring 在运行期把切面织入到 Spring 管理的 bean 中。代理类中封装了目标类，并拦截被通知方法的调用，再把调用转发给真正的目标 bean。在这个过程中，当代理类拦截到方法调用时，在调用目标 bean 方法之前，会执行切面逻辑。</p><p><img src="/images/2016-08-07/daili.png" alt></p><h3 id="编写切点"><a href="#编写切点" class="headerlink" title="编写切点"></a>编写切点</h3><p>在 Spring AOP 中，要使用 AspectJ 的切点表达式语言来定义切点。在编写切点之前，我们需要一个场景来应用即将编写的切面，在这里我们采用《Spring 实战》（第4版）中的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Performance 可以代表任何类型的表演，如音乐会、舞台剧等，假如我们想编写 Performance 中 <code>perform()</code> 方法出发的通知，那么切点表达式为：</p><p><img src="/images/2016-08-07/pointcut.png" alt></p><p>如果我们需要配置的切点仅匹配 <code>cn.huberylee</code> 包，则可以使用 <code>within()</code> 指示器来限制匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* cn.huberylee.Performance.perform(..)) &amp;&amp; within(cn.huberylee.*)</span><br></pre></td></tr></table></figure><p>在这里，我们使用了 <code>&amp;&amp;</code> 操作符将 <code>execution()</code> 和 <code>within()</code> 指示器连接在一起形成与（and）关系，类似的，我们可以使用 <code>||</code> 操作符来标识或（or）关系，使用 <code>!</code> 操作符来标识非（not）关系。</p><p>无论是什么公开演出，几乎都有这样几个事项：观众入座、表演开始前提醒观众手机关机或者是调至静音状态、表演结束后给予掌声、若表演取消希望退票等，由于这些操作针对每一种表演都是一样的，那么我们便可以把它定义为切面，在学习如何通过不同的方式定义切面之前，我们先来定义一个音乐会类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concert</span> <span class="keyword">implements</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singing ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用注解创建切面"><a href="#使用注解创建切面" class="headerlink" title="使用注解创建切面"></a>使用注解创建切面</h3><p>在使用注解创建切面时，我们使用 <code>@Aspect</code> 注解表明这是一个切面类，类中以通知类型（前置通知、后置通知、返回通知、异常通知、环绕通知）注解的方法定义该通知的具体内容：</p><p>Audience.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System .out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，在上面的切面定义中，我们使用了三个类型的通知：前置通知（@Before）、返回通知（@AfterReturning）、异常通知（@AfterThrowing）、环绕通知（@Around），每一种类型的通知都使用 <strong><em>相同</em></strong> 的切点表达式。其中环绕通知实际上是将其余四种类型的通知组装在一起，将被通知的目标放置在通知的逻辑之中。在这个例子中，切点表达式的定义不算太长，还可以接受，如果遇到非常复杂的切点表达式，会不会很繁琐？那么有没有一种方式可以简化这种操作呢？答案是肯定的：<code>@Pointcut</code> 注解可以用来定义可重用的切点，我们完全可以用下面这种方式进行替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System .out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Audience 中，<code>perform()</code> 方法使用了 <code>@Pointcut</code> 注解，它的方法体为空，仅仅用来依附 <code>@Pointcut</code> 注解，实现一个可重用的切点，类中要使用该切点的通知只需调用该方法即可。</p><p>到目前，我们只是定义了切面，不过在 Spring 看来，这只是一个简单的 bean ，并不会将它视为切面，也不会创建将其转化为切面的代理，我们必须启用自动代理功能才行。如果使用 JavaConfig，在配置类的类级别上通过使用 <code>@EnableAspectJAutoProxy</code> 注解便可达到此目的：</p><p>AppConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Concert <span class="title">concert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Concert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Audience <span class="title">audience</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Audience();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果使用 XML 配置，则需使用 Spring aop 命名空间中的 <code>&lt;aop:aspectj-autoproxy&gt;</code> 元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"concert"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.Concert"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"audience"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.Audience"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无论使用哪种方式，Spring 自动代理都会为使用 <code>@Aspect</code> 注解的 bean 创建一个代理，该代理会围绕着所有该切面的切点所匹配的 bean。</p><h3 id="在-XML-中声明切面"><a href="#在-XML-中声明切面" class="headerlink" title="在 XML 中声明切面"></a>在 XML 中声明切面</h3><p>我们将 Audience 类中的注解全部拿掉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System .out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 XML 中声明切面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span> <span class="attr">method</span>=<span class="string">"takeSeats"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span> <span class="attr">method</span>=<span class="string">"silenceCellPhones"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span> <span class="attr">method</span>=<span class="string">"applause"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span> <span class="attr">method</span>=<span class="string">"demandRefund"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span> <span class="attr">method</span>=<span class="string">"watchPerformance"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 XML 中我们可以使用 <code>&lt;aop:pointcut&gt;</code> 元素定义可重用的切点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"perform"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span> <span class="attr">method</span>=<span class="string">"takeSeats"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span> <span class="attr">method</span>=<span class="string">"silenceCellPhones"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span> <span class="attr">method</span>=<span class="string">"applause"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span> <span class="attr">method</span>=<span class="string">"demandRefund"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span> <span class="attr">method</span>=<span class="string">"watchPerformance"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h3><p>例子采用 JavaConfig 形式，共包含五个文件，分别为：<code>Performance.java</code>、<code>Concert.java</code>、<code>Audience.java</code>、<code>AppConfig.java</code>、<code>App.config</code>。</p><p>Performance.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Concert.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concert</span> <span class="keyword">implements</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singing ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Audience.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.huberylee.Performance.perform(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System .out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"perform()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Demanding a refund"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Around("perform()")</span></span><br><span class="line"><span class="comment">    public void watchPerformance(ProceedingJoinPoint joinPoint) &#123;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("Taking seats");</span></span><br><span class="line"><span class="comment">            System.out.println("Silencing cell phones");</span></span><br><span class="line"><span class="comment">            joinPoint.proceed();</span></span><br><span class="line"><span class="comment">            System.out.println("CLAP CLAP CLAP");</span></span><br><span class="line"><span class="comment">        &#125; catch (Throwable e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("Demanding a refund");</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AppConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Concert <span class="title">concert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Concert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Audience <span class="title">audience</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Audience();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        Performance concert = context.getBean(Performance.class);</span><br><span class="line">        concert.perform();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p><img src="/images/2016-08-07/result.png" alt></p><p>代码： <a href="/code/spring-aop.zip">spring-aop</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> 面向切面编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring条件化bean</title>
      <link href="/2016/08/06/Spring%E6%9D%A1%E4%BB%B6%E5%8C%96bean/"/>
      <url>/2016/08/06/Spring%E6%9D%A1%E4%BB%B6%E5%8C%96bean/</url>
      
        <content type="html"><![CDATA[<p>在项目开发过程中，有时候我们希望一个或者多个 bean 只有在类路径下包含某种特定的库时才创建；或者是一种 bean 只有在另外一种或多种 bean 被创建后才创建；亦或者是只有当某个或多个环境变量设置之后才创建某种 bean。在 Spring 4 之前，我们很难实现这种配置，不过在 Spring 4 及以后，我们可以使用 <code>@Conditional</code> 注解实现这种需求。<code>@Conditional</code> 注解可以用到带有 <code>@Bean</code> 注解的方法之上，如果 <code>@Conditional</code> 注解中给定的条件计算结果为真，就会创建这个 bean，反之，则不会。例如，假设有一个名为 <code>Magic</code> 的类，我们希望只有设置了 <code>magic</code> 环境属性的时候， Spring 才会实例化这个类。如果环境中没有这个属性，那么 <code>Magic</code> 将会被忽略。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Magic <span class="title">magic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Magic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到， <code>@Conditional</code> 中给定了一个 class，这个 class 便是该实例中需要计算的条件。设置给 <code>@Conditional</code> 的类可以是任意实现了 <code>Condition</code> 接口的类。这个接口实现起来比较简单，只需提供 <code>matches()</code> 方法的实现即可。如果 <code>matches()</code> 方法返回的结果为 <code>true</code>，那么带有 <code>@Conditional</code> 注解的 bean 就会被创建；如果 <code>matches()</code> 方法返回的结果为 <code>false</code>，那么这些 bean 就会被忽略。在这个例子中，我们需要检测环境属性中是否存在 <code>magic</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment en = conditionContext.getEnvironment();</span><br><span class="line">        <span class="keyword">return</span> en.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConditionContext 接口和 AnnotatedTypeMetadata 接口还有其它方法可以调用，具体请查看 Spring API。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> 条件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring环境与profile</title>
      <link href="/2016/08/06/Spring%E7%8E%AF%E5%A2%83%E4%B8%8Eprofile/"/>
      <url>/2016/08/06/Spring%E7%8E%AF%E5%A2%83%E4%B8%8Eprofile/</url>
      
        <content type="html"><![CDATA[<p>在软件开发的过程中，往往会遇到开发环境与生成环境不一致的情况，导致一些与环境相关的部分无法正常工作或者与预期结果存在差异，最常见的就是数据库配置、加密算法等，好在 Spring 为我们提供了因环境不同而导致问题的解决方案： profile。利用 profile，我们可以指定某个 bean 属于哪一个 profile，并且只有当规定的 profile 被激活时，属于该 profile 的 bean 才会被创建，属于其他 profile 的 bean 不会被创建。没有指定 profile 的 bean 始终会被创建，与激活哪个 profile 没有关系。</p><a id="more"></a><h3 id="在-JavaConfig-中使用-profile"><a href="#在-JavaConfig-中使用-profile" class="headerlink" title="在 JavaConfig 中使用 profile"></a>在 JavaConfig 中使用 profile</h3><p>在 Java 配置中，我们可以使用 <code>@Profile</code> 注解指定某一个 bean 属于哪一个 profile：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">localDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> DataSource();</span><br><span class="line">        dataSource.setAddress(<span class="string">"http://localhost"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>@Profile</code> 注解应用到类级别上，它告诉 Spring 这个配置类中的 bean 只有在 dev profile 被激活时才会被创建。如果 dev profile 没有被激活，那么带有 <code>@Bean</code> 注解的方法都会被忽略掉。从 Spring 3.2 开始， <code>@Profile</code> 注解可以应用到方法级别上，与 <code>@Bean</code> 一同使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">localDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> DataSource();</span><br><span class="line">        dataSource.setAddress(<span class="string">"http://localhost"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">serverDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> DataSource();</span><br><span class="line">        dataSource.setAddress(<span class="string">"http://www.huberylee.cn"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-XML-中使用-profile"><a href="#在-XML-中使用-profile" class="headerlink" title="在 XML 中使用 profile"></a>在 XML 中使用 profile</h3><p>在 XML 中，我们可以使用 <code>&lt;beans&gt;</code> 元素配置 profile 属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localDataSource"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.LocalDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按照上面的方式，我们可以为每一种 profile 单独创建一个 XML 文件。另外一种方式就是在 <code>&lt;beans&gt;</code> 元素中嵌套 <code>&lt;beans&gt;</code> 元素，而不是为每一个环境都创建一个 profile 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localDataSource"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.LocalDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serverDataSource"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.ServerDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="激活-profile"><a href="#激活-profile" class="headerlink" title="激活 profile"></a>激活 profile</h3><p>在 Spring 中判断哪个 profile 处于激活状态时需要依赖两个独立的属性： <code>spring.profiles.active</code> 和 <code>spring.profiles.default</code>。如果设置了 <code>spring.profiles.active</code> 属性的话，那么就会根据它的值确定激活的 profile；若没有，则会根据 <code>spring.profiles.default</code> 的值确定激活的 profile。如果两者均没有设置，则表明没有激活的 profile，只会创建没有定义在 profile 中的 bean。设置这两个属性的方式有很多种：</p><ul><li>作为 DispatcherServlet 的初始化参数；</li><li>作为 Web 应用的上下文参数；</li><li>作为 JNDI 条目；</li><li>作为环境变量；</li><li>作为 JVM 的系统属性；</li><li>在集成测试类上使用 <code>@ActiveProfiles</code> 注解设置。</li></ul><p>可以同时激活多个 profile，每个 profile 之间用逗号隔开。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 环境 </tag>
            
            <tag> profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中自动装配歧义性的处理</title>
      <link href="/2016/08/05/Spring%E4%B8%AD%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%AD%A7%E4%B9%89%E6%80%A7%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2016/08/05/Spring%E4%B8%AD%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%AD%A7%E4%B9%89%E6%80%A7%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在自动化装配中，Spring 完全负责将 bean 引用注入到依赖的构造参数和属性中，减少了很多装配应用程序组建时所需要的显式配置。在前面的学习过程中，我们所接触到的都是只有一个 bean 匹配所需要的结果，如果有多个 bean 匹配，自动装配还能正常工作么？显然是不可以的，有多个 bean 匹配时，Spring 并不知道选取哪一个 bean 来装配（产生歧义），这时就需要我们来进行一些标记（或处理），让 Spring 能够获取唯一满足条件的 bean 来进行装配。</p><a id="more"></a><p>假设现在有一个宠物房间，为了标记这个宠物房间里住的是哪种宠物，我们需要一个 <code>animal</code> 属性，这个属性采用 Setter 方法进行自动装配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 Animal 是一个接口，这个接口有多个实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>由于这两种实现都使用了 <code>@Component</code> 注解，在组件扫描时能够发现它们并为其创建 Spring 应用上下文中的 bean。当 Spring 试图自动装配 <code>setAnimal()</code> 中的参数时，会发现满足条件的 bean 并不是唯一的，这时便会产生歧义，Spring 不知道到底该装配哪一个，导致装配失败，发生异常。</p><p>针对这种情况， Spring 提供了多种解决方案：你可以将满足条件中的某一个 bean 标记为首选（primary），或者使用限定符（qualifier）将满足条件的 bean 的范围缩小至一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>如果多个满足条件的 bean 同时被标记为首选（primary），同样也会产生歧义。Spring 中 <code>@Qualifier</code> 注解是使用限定符的主要方式，它可以与 <code>@Autowired</code> 和 <code>@Inject</code> 协同使用，指定要注入的是哪一个 bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"dog"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animal = animal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Qualifier</code> 注解所设置的参数是想要注入的 bean 的 ID，<code>@Component</code> 注解声明的类所创建的 bean 的 ID 默认为为首字母小写的类名。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 歧义 </tag>
            
            <tag> 自动装配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入(DI)——导入和混合配置</title>
      <link href="/2016/08/03/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI-%E2%80%94%E2%80%94%E5%AF%BC%E5%85%A5%E5%92%8C%E6%B7%B7%E5%90%88%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/08/03/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI-%E2%80%94%E2%80%94%E5%AF%BC%E5%85%A5%E5%92%8C%E6%B7%B7%E5%90%88%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Spring 中装配 bean 的方式主要中有三种：自动化装配、基于 Java 的显式配置、基于 XML 的显式配置，这些配置方案并不互斥，你可以将 JavaConfig 的组件扫描和自动装配和/或 XML 配置 混合在一起。在混合装配中，Spring 在自动装配时，它并不在意要装配的 bean 来自哪里，自动装配时会考虑 Spring 容器中所有的 bean，不论是在 JavaConfig 或 XML 中声明还是通过组建扫描获取到的。</p><a id="more"></a><h3 id="在-JavaConfig-中引用-JavaConfig-配置"><a href="#在-JavaConfig-中引用-JavaConfig-配置" class="headerlink" title="在 JavaConfig 中引用 JavaConfig 配置"></a>在 JavaConfig 中引用 JavaConfig 配置</h3><p>在 JavaConfig 中引用 JavaConfig 配置是通过 <code>@Import</code> 注解实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(MessageServiceConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果同时引用多个 JavaConfig 配置，可以通过数组实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;MessageServiceConfig.class, MessageprinterConfig.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面通过例子来看看具体的实现（共包含五个文件：<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>MessageServiceConfig.java</code>、<code>MessageConfig.java</code>、<code>App.java</code>）：</p><p>MessageService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessagePrinter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(messageService.getMessage(), user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessageServiceConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageService <span class="title">messageService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessageConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(MessageServiceConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessagePrinter <span class="title">messagePrinter</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        MessagePrinter messagePrinter = <span class="keyword">new</span> MessagePrinter();</span><br><span class="line">        messagePrinter.setMessageService(messageService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messagePrinter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MessageConfig.class);</span><br><span class="line">        MessagePrinter messagePrinter = context.getBean(MessagePrinter.class);</span><br><span class="line">        messagePrinter.printMessage(<span class="string">"HuberyLee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="在-JavaConfig-中引用-XML-配置"><a href="#在-JavaConfig-中引用-XML-配置" class="headerlink" title="在 JavaConfig 中引用 XML 配置"></a>在 JavaConfig 中引用 XML 配置</h3><p>在 JavaConfig 中引用 XML 配置是通过 <code>@ImportResource</code> 注解实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果同时引用多个 XML 配置，可以通过数组实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(&#123;<span class="string">"beans.xml"</span>, <span class="string">"beans_m.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面通过例子来看看具体的实现（共包含五个文件：<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>MessageConfig.java</code>、<code>App.java</code>、<code>beans.xml</code>，其中，<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>App.java</code>三个文件与上一个例子(<strong><em>JavaConfig 中引用 JavaConfig 配置</em></strong>)中完全相同，唯一不同的是，上一个例子中 <code>MessageServiceConfig.java</code> 中所声明的 bean 现在采用 XML 方式声明）：</p><p>MessageService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessagePrinter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(messageService.getMessage(), user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessageConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessagePrinter <span class="title">messagePrinter</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        MessagePrinter messagePrinter = <span class="keyword">new</span> MessagePrinter();</span><br><span class="line">        messagePrinter.setMessageService(messageService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messagePrinter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MessageConfig.class);</span><br><span class="line">        MessagePrinter messagePrinter = context.getBean(MessagePrinter.class);</span><br><span class="line">        messagePrinter.printMessage(<span class="string">"HuberyLee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>beans.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageService"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="在-XML-中引用-XML-配置"><a href="#在-XML-中引用-XML-配置" class="headerlink" title="在 XML 中引用 XML 配置"></a>在 XML 中引用 XML 配置</h3><p>在 XML 中引用 XML 配置是通过 <code>&lt;import&gt;</code> 元素实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"messageService-config.xml"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用多个 XML 配置可以通过多个 <code>&lt;import&gt;</code> 元素实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"messageService-config.xml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"messagePrinter-config.xml"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面通过例子来看看具体的实现（共包含五个文件：<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>App.java</code>、<code>messageService-config.xml</code>、<code>beans.xml</code>）：</p><p>MessageService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessagePrinter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(messageService.getMessage(), user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        MessagePrinter messagePrinter = context.getBean(MessagePrinter.class);</span><br><span class="line">        messagePrinter.printMessage(<span class="string">"HuberyLee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>messageService-config.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageService"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>beans.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"messageService-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messagePrinter"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessagePrinter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageService"</span> <span class="attr">ref</span>=<span class="string">"messageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="在-XML-中引用-JavaConfig-配置"><a href="#在-XML-中引用-JavaConfig-配置" class="headerlink" title="在 XML 中引用 JavaConfig 配置"></a>在 XML 中引用 JavaConfig 配置</h3><p>在 XML 中引用 JavaConfig 配置是通过 <code>&lt;bean&gt;</code> 元素实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageServiceConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用多个 JavaConfig 配置可以通过多个 <code>&lt;bean&gt;</code> 元素实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageServiceConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessagePrinterConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和上述例子大同小异，这里就不再赘述示例代码了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 自动化装配bean </tag>
            
            <tag> JavaConfig </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入(DI)——通过XML装配bean</title>
      <link href="/2016/08/02/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87XML%E8%A3%85%E9%85%8Dbean/"/>
      <url>/2016/08/02/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87XML%E8%A3%85%E9%85%8Dbean/</url>
      
        <content type="html"><![CDATA[<p>在使用XML装配bean时需要在配置文件顶部声明多个XML模式（XSD）文件，这些文件定义了配置Spring的XML元素：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- configuration details --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;beans&gt;</code> 是Spring配置文件的根元素，配置文件中通过 <code>&lt;bean&gt;</code> 元素声明 bean，创建这个 bean 的类通过 class 属性来指定，并且要使用全限定的类名：</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageService"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在这个 <code>&lt;bean&gt;</code> 声明中， bean 的类型是以字符串的形式设置在 class 属性中，设置时即使给定的值即使不是真正的类型也不会报错！</p><p>如果没有明确的给定ID，这个 bean 将会根据全限定类名来进行命名，在这个例子中，如果没有给定 <code>id=&quot;messageService&quot;</code>，那么这个 bean 的名字将会是 <code>cn.huberylee.MessageService#0</code>，其中 <code>#0</code> 是一个计数的形式，用来区分相同类型的其他 bean。如果你声明了另外一个 <code>MessageService</code>，并且没有明确指定 ID，那么它自动得到的 ID 将会是 <code>cn.huberylee.MessageService#1</code>。尽管自动命名方式在命名 bean 时2非常方便，但是如果你稍后需要引用这个 bean 时会变得很不方便，所以，一般来讲，通过 ID 属性为每个 bean 取一个自己的名字是一种更好的方式。</p><p>在 Spring XML 配置中，只有一种声明 bean 的方式：使用 <code>&lt;bean&gt;</code> 元素并且指定 <code>class</code> 属性。但是，在 XML 中声明 DI 时会有多种可选的配置方案：</p><ul><li>通过构造器注入初始化 bean；</li><li>设置属性</li></ul><p>下面通过一个例子来看看具体实现（共包含四个文件：<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>App.java</code>、<code>beans.xml</code>）:</p><p>MessageService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessagePrinter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器注入是通过类的构造方法进行注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessagePrinter</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(messageService.getMessage(), user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        MessagePrinter messagePrinter = context.getBean(MessagePrinter.class);</span><br><span class="line">        messagePrinter.printMessage(<span class="string">"HuberyLee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>beans.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageService"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messagePrinter"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessagePrinter"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过构造器注入需要指明构造函数的参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"messageService"</span> <span class="attr">ref</span>=<span class="string">"messageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的例子采用的构造器方法实现 DI 功能，采用 Setter 方法实现 DI 功能时只需要作如下修改：</p><p>在 <code>MessagePrinter.java</code> 中添加 <code>setMessageService()</code> 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改 <code>beans.xml</code> 文件为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageService"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messagePrinter"</span> <span class="attr">class</span>=<span class="string">"cn.huberylee.MessagePrinter"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过设置属性注入需要配置 bean 的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageService"</span> <span class="attr">ref</span>=<span class="string">"messageService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到，通过构造器注入初始化 bean 和 设置属性这两种方式除了 <code>MessagePrinter.java</code> 和 <code>beans.xml</code> 有略微不同外，其他都一样。通过构造器注入初始化 bean 时需要在 <code>beans.xml</code> 文件中指明构造函数参数，对应的类的构造方法；设置属性则是在 <code>beans.xml</code> 中指明类的属性，通过属性的 <code>setter</code> 方法进行注入。</p><p>至于是该选择构造器注入还是属性注入，一个通用的规则就是：强依赖使用构造器注入，可选性依赖使用属性注入。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入(DI)——通过Java代码装配bean</title>
      <link href="/2016/08/02/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87Java%E4%BB%A3%E7%A0%81%E8%A3%85%E9%85%8Dbean/"/>
      <url>/2016/08/02/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87Java%E4%BB%A3%E7%A0%81%E8%A3%85%E9%85%8Dbean/</url>
      
        <content type="html"><![CDATA[<p>尽管在很多时候通过组件扫描和自动装配实现 Spring 的自动化配置是更为推荐的方式，但有时候自动化配置的方案行不通，比如在项目代码中采用第三方组件，你无法在代码中添加 <code>@Component</code> 和 <code>@Autowired</code> 注解，这时候必须采用显式配置方式。在使用显式配置时，有两种可选方案：Java 和 XML，其中 JavaConfig 是更为推荐的方式，因为它更为强大、类型安全并且对重构友好。JavaConfig 本质上就是 Java 代码，与项目中其他的 Java 代码一样，但又要从概念上加以区分：JavaConfig 属于配置代码，不应掺杂项目的业务逻辑，并且应与项目中的逻辑代码分开。</p><a id="more"></a><p>创建 JavaConfig 类的关键在于为其添加 <code>@Configuration</code> 注解，<code>@Configuration</code> 注解表明这是一个配置类，里面包含了 Spring 应用上下文中如何创建 bean 的细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaConfig 中通过一个带有 <code>@Bean</code> 注解的方法来声明一个 bean，这个方法会创建所需类型的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageService <span class="title">messageService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageService();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>@Bean</code> 注解告诉 Spring 这个方法会返回一个对象，这个对象要注册为 Spring 应用上下文中的 bean，方法中包含了最终产生 bean 实例的逻辑。默认情况下，bean 的 ID 与带有 <code>@Bean</code> 注解的方法名是一样的，但也可以重命名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"myMessageService"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageService <span class="title">messageService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageService();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在 JavaConfig 中装配 bean 最简单的方式就是引用创建 bean 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageService <span class="title">messageService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageService();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessagePrinter <span class="title">messagePrinter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessagePrinter(messageService());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下面我们通过一个例子来看看具体实现（共包含四个文件：<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>MessageConfig.java</code>、<code>App.java</code>）：</p><p>MessageService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessagePrinter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessagePrinter</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(messageService.getMessage(), user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessageConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageService <span class="title">messageService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessagePrinter <span class="title">messagePrinter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessagePrinter(messageService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MessageConfig.class);</span><br><span class="line">        MessagePrinter messagePrinter = context.getBean(MessagePrinter.class);</span><br><span class="line">        messagePrinter.printMessage(<span class="string">"HuberyLee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JavaConfig 中实现 DI 功能有多种方式，上面采用的是构造器注入方式，我们也可以采用 setter 方式注入，只需要在 <code>MessagePrinter.java</code>  中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>MessageConfig.java</code> 中的 <code>messagePrinter()</code> 方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessagePrinter <span class="title">messagePrinter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MessagePrinter messagePrinter = <span class="keyword">new</span> MessagePrinter();</span><br><span class="line">    messagePrinter.setMessageService(messageService());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> messagePrinter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余的代码不变。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> JavaConfig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入(DI)——自动化装配bean</title>
      <link href="/2016/08/01/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI-%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A3%85%E9%85%8Dbean/"/>
      <url>/2016/08/01/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI-%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A3%85%E9%85%8Dbean/</url>
      
        <content type="html"><![CDATA[<p>Spring 通过应用上下文（Application Context）装载 bean 的定义并把它们组装起来。Spring 应用上下文全权负责对象的创建和组装，Spring 自带了多种应用上下文的实现，它们之间主要的区别仅仅在于如何加载配置：</p><table><thead><tr><th>Implements</th><th>Notes</th></tr></thead><tbody><tr><td>AnnotationConfigApplicationContext</td><td>从一个或多个基于 Java 的配置类中加载 Spring 应用上下文；</td></tr><tr><td>AnnotationConfigWebApplicationContext</td><td>从一个或多个基于 Java 的配置文件中加载 Spring Web 应用上下文；</td></tr><tr><td>ClassPathXmlApplicationContext</td><td>从类路径下的一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义文件作为类资源；</td></tr><tr><td>FileSysytemXmlAplicationContext</td><td>从文件系统路径下的一个或多个 XML 配置文件中加载上下文定义；</td></tr><tr><td>XmlWebApplicationContext</td><td>从 Web 应用下的一个或多个 XML 配置文件中加载上下文定义。</td></tr></tbody></table><a id="more"></a><p>Spring 按照如下几个方面实现自动化装配：</p><ol><li>创建组件（create component）：Spring 根据注解自动创建对应的 bean；</li><li>组建扫描（component scanning）： Spring 会自动发现应用上下文中所创建的 bean；</li><li>自动装配（autowiring）：Spring 自动满足 bean 之间的依赖。</li></ol><p>在 Spring 中可以通过为类添加 <code>@Component</code> 注解表明这个类为组建类，并告知 Spring 要为这个类创建 bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 应用上下文中所有的 bean 都会给定一个 ID，在上面的例子中生成的 bean 的 ID 为 <code>messageService</code>，也就是将类名的首字母变为小写，当然我们也可以手动给定 bean 的 ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myMessageService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring 中支持将 <code>@Named</code> 作为 <code>@Component</code> 注解的替代方案，两者之间又一些细微的差异，但是在大多数场景中，他们是可以相互替代的。</p><p>创建完组件后我们可以使用 <code>@ComponentScan</code> 注解在 Spring 中启用组件扫描，如果没有额外配置的话，<code>@ComponentScan</code> 默认会扫描与配置类相同的包，当然我们也可以通过 <code>@ComponentScan(&quot;cn.huberylee&quot;)</code> 设置组件扫描的基础包。</p><p>自动化装配中的自动装配就是让 Spring 自动满足 bean 依赖的一种方法，在满足依赖的过程中，会在 Spring 应用上下文中寻找匹配某个 bean 需求的其他 bean。为了声明要进行自动装配，我们可以借助 Spring 的 <code>@Autowired</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MessagePrinter</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Autowired</code> 几乎可以用于任何方法上，加入有且仅有一个 bean 匹配需求的话，这个 bean 将会被装配进来；如果没有匹配的 bean，那么在创建应用上下文时会抛出异常，为避免异常的出现，你可以将 <code>@Autowired</code> 的 <code>required</code> 属性设置为 <code>false</code>。</p><p>下面通过一个例子看看具体的实现（共包含三个文件：<code>MessageService.java</code>、<code>MessagePrinter.java</code>、<code>App.java</code>）：</p><p>MessageService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message = <span class="string">"Hello, %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessagePrinter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lihui on 16/8/1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageService</span><span class="params">(MessageService messageService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageService = messageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(messageService.getMessage(), user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.huberylee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(App.class);</span><br><span class="line">        MessagePrinter messagePrinter = context.getBean(MessagePrinter.class);</span><br><span class="line">        messagePrinter.printMessage(<span class="string">"HuberyLee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 自动化装配bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven学习笔记</title>
      <link href="/2016/07/24/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/07/24/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Apache Maven，是一个软件（特别是Java软件）项目管理及自动构建工具，由Apache软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>POM是Project Object Model的缩写，项目的属性、构建、依赖配置这些信息都被抽象到对象模型中，其主要由四个部分组成：<br><img src="/images/2016-07-24/POM.png" alt></p><a id="more"></a><p>在大型项目中，一般会有多个子项目，每个子项目都有自己的pom文件子项目继承自父项目，构建时只需要构建父项目即可，另外所有的pom都会继承一个supper pom，它定义了一些默认信息，比如项目的默认结构、默认加载的插件等，它遵循了管理优于配置的原则，所以尽管一个项目的pom可能会很简单，但实际运行中使用的pom（effective pom）会很复杂。</p><p>Maven本质上是一个插件的框架，它的核心其实不执行任何既定的任务，这些任务都交给插件去完成，可以通过两种方式调用插件的目标：</p><ol><li>将插件目标与生命周期绑定，执行生命周期</li><li>直接执行插件目标 <code>mvn pluginId:goalId</code></li></ol><h2 id="项目的生命周期"><a href="#项目的生命周期" class="headerlink" title="项目的生命周期"></a>项目的生命周期</h2><p>Maven中的项目生命周期是指项目的构建过程，它包含一些列有序的阶段，而一个阶段就是构建过程中的一个步骤。插件目标可以绑定到生命周期阶段上，一个生命周期阶段可以绑定多个插件目标。当 Maven 开始构建工程，会按照所定义的阶段序列的顺序执行每个阶段注册的目标。</p><p>Maven 有以下三个标准的生命周期：</p><ul><li>clean</li><li>default(or build)</li><li>site</li></ul><h3 id="clean生命周期"><a href="#clean生命周期" class="headerlink" title="clean生命周期"></a>clean生命周期</h3><p>clean生命周期一共包含了三个阶段：</p><ul><li>pre-clean  执行一些需要在clean之前完成的工作</li><li>clean  移除所有上一次构建生成的文件</li><li>post-clean  执行一些需要在clean之后立刻完成的工作</li></ul><p>mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。</p><h3 id="default生命周期"><a href="#default生命周期" class="headerlink" title="default生命周期"></a>default生命周期</h3><p>这是 Maven 的主要生命周期，被用于构建应用。包括下面的 23 个阶段。</p><table><thead><tr><th>生命周期阶段</th><th>描述</th></tr></thead><tbody><tr><td>validate</td><td>检查工程配置是否正确，完成构建过程的所有必要信息是否能够获取到。</td></tr><tr><td>initialize</td><td>初始化构建状态，例如设置属性。</td></tr><tr><td>generate-sources</td><td>生成编译阶段需要包含的任何源码文件。</td></tr><tr><td>process-sources</td><td>处理源代码，例如，过滤任何值（filter any value）。</td></tr><tr><td>generate-resources</td><td>生成工程包中需要包含的资源文件。</td></tr><tr><td>process-resources</td><td>拷贝和处理资源文件到目的目录中，为打包阶段做准备。</td></tr><tr><td>compile</td><td>编译工程源码。</td></tr><tr><td>process-classes</td><td>处理编译生成的文件，例如 Java Class 字节码的加强和优化。</td></tr><tr><td>generate-test-sources</td><td>生成编译阶段需要包含的任何测试源代码。</td></tr><tr><td>process-test-sources</td><td>处理测试源代码，例如，过滤任何值（filter any values)。</td></tr><tr><td>test-compile</td><td>编译测试源代码到测试目的目录。</td></tr><tr><td>process-test-classes</td><td>处理测试代码文件编译后生成的文件。</td></tr><tr><td>test</td><td>使用适当的单元测试框架（例如JUnit）运行测试。</td></tr><tr><td>prepare-package</td><td>在真正打包之前，为准备打包执行任何必要的操作。</td></tr><tr><td>package</td><td>获取编译后的代码，并按照可发布的格式进行打包，例如 JAR、WAR 或者 EAR 文件。</td></tr><tr><td>pre-integration-test</td><td>在集成测试执行之前，执行所需的操作。例如，设置所需的环境变量。</td></tr><tr><td>integration-test</td><td>处理和部署必须的工程包到集成测试能够运行的环境中。</td></tr><tr><td>post-integration-test</td><td>在集成测试被执行后执行必要的操作。例如，清理环境。</td></tr><tr><td>verify</td><td>运行检查操作来验证工程包是有效的，并满足质量要求。</td></tr><tr><td>install</td><td>安装工程包到本地仓库中，该仓库可以作为本地其他工程的依赖。</td></tr><tr><td>deploy</td><td>拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程。</td></tr></tbody></table><p>有一些与 Maven 生命周期相关的重要概念需要说明：当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。</p><h3 id="Site生命周期"><a href="#Site生命周期" class="headerlink" title="Site生命周期"></a>Site生命周期</h3><p>Site生命周期的各个阶段：</p><ul><li>pre-site     执行一些需要在生成站点文档之前完成的工作</li><li>site    生成项目的站点文档</li><li>post-site     执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy     将生成的站点文档部署到特定的服务器上</li></ul><p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点。</p><h2 id="Maven依赖管理"><a href="#Maven依赖管理" class="headerlink" title="Maven依赖管理"></a>Maven依赖管理</h2><h3 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h3><p>一个复杂的项目将会包含很多依赖，也可能包含依赖于其他构建的依赖，你 <strong><em>不必</em></strong> 找出所有这些依赖并把它包含于pom文件中，你只需要加上你直接依赖的那些库，Maven会隐式的把这些库间接依赖的库也加入到你的项目中。</p><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><table><thead><tr><th>范围</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>compile</td><td>编译范围</td><td>为默认范围，出于这个范围的依赖在所有的 classpath 中都是可用的，同时它们也会被打包</td></tr><tr><td>provided</td><td>已提供范围</td><td>只有当ADK或者一个容器提供依赖之后才会使用，比如说你开发一个 Web 应用，在编译classpath中你可能需要 Servlet API来编译一个 Servlet，但是你不需要在打包好的war文件中包含 Servlet API，因为这个Servlet API所在的jar文件已由你的应用服务器或者是Servlet容器提供，这个时候你就可以将你的依赖范围设置为provided，它只在编译的时候有效，而不会打包到 war文件中</td></tr><tr><td>runtime</td><td>运行时范围</td><td>在运行测试系统的时候需要，在编译时不需要</td></tr><tr><td>test</td><td>测试范围</td><td>在编译、运行时候不需要，只在测试时需要，比如JUnit</td></tr><tr><td>system</td><td>系统范围</td><td>和 provided类似，必须显式提供本地系统中jar文件路径，在实际开发中不常用</td></tr></tbody></table><h2 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h2><p>Maven仓库就是一个存放了所有依赖的仓库，这个仓库通过依赖的坐标进行管理。主要包含本地仓库和远程仓库，在运行Maven时，所有的依赖都是从本地仓库获取的，在本地仓库没有时它会尝试从远程仓库下载依赖到本地仓库，然后再使用本地仓库，如果本地仓库和远程仓库都没找到，则会报错。Maven本身自带了一个远程仓库，这个仓库是Maven的中央仓库，在 effictive pom 中可以查看，也可在pom中配置其他远程仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>oschina<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>oschina repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>本地依赖一般放置在 <code>.m2/repository</code> 文件夹中，可通过修改 <code>setting.xml</code> 更改其默认位置。</p><h2 id="项目站点报告"><a href="#项目站点报告" class="headerlink" title="项目站点报告"></a>项目站点报告</h2><p>利用 Maven中的插件我们可以生成项目站点报告，生成的项目站点报告位于 <code>target/site</code> 目录：<br><img src="/images/2016-07-24/site_1.png" alt></p><p>项目站点报告是对当前项目情况的一些介绍，主要包括：项目简介、项目依赖、项目使用的插件等，通过pom文件我们可以添加项目维护者列表、项目所使用的License等信息，并且可以配置项目站点报告的语言：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/images/2016-07-24/site_2.png" alt></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwjPo--bhovOAhWLtY8KHRT-AboQFggaMAA&amp;url=%68%74%74%70%73%3a%2f%2f%7a%68%2e%77%69%6b%69%70%65%64%69%61%2e%6f%72%67%2f%7a%68%2d%63%6e%2f%41%70%61%63%68%65%5f%4d%61%76%65%6e&amp;usg=AFQjCNG1SGNAE3R77D2fudoE8V8zi6KY7w&amp;cad=rjt" target="_blank" rel="noopener">维基百科</a><br><a href="http://www.jikexueyuan.com/course/maven/" target="_blank" rel="noopener">极客学院</a><br><a href="http://juvenshun.iteye.com/blog/213959" target="_blank" rel="noopener">MMaven生命周期详解</a><br><a href="http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html" target="_blank" rel="noopener">Apache Maven 入门篇(上)</a><br><a href="http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-2-405568-zhs.html" target="_blank" rel="noopener">Apache Maven 入门篇(下)</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 项目构建管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京之行</title>
      <link href="/2016/06/18/%E5%8C%97%E4%BA%AC%E4%B9%8B%E8%A1%8C/"/>
      <url>/2016/06/18/%E5%8C%97%E4%BA%AC%E4%B9%8B%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>跟上次 <a href="/2016/04/19/烟雨西湖/">杭州之行</a> 一样，这次去北京也是一时兴起，放着跟别人的端午之约不顾，一心奔向了帝都。与上次不同的是，这次要出去的想法酝酿的时间可能稍微长一些，早在放假(6月9号)的前四天(6月4号)就买好了票，在接下来的几天，每天都很拼的完成老师布置的任务，终于在周三出发的前半个小时搞定，走的时候还让同学帮忙照看正在同步的代码，也是醉了=_= 出发的过程也很是艰辛，晚上8:15的火车票，从实验室回宿舍时大概五点半左右，收拾完东西从宿舍出发时大概六点二十，本以为坐地铁会很快，结果在中南路换乘时硬是绕着排队的护栏转了足足二十分钟，中国人不是一般的多！到了火车站取票、检票，一路狂奔，前五分钟到达检票口，却被通知火车晚点半小时，心还想着赶不上火车就回去的……</p><a id="more"></a><p>这次北京之旅最大的痛处就在于去的时候买的硬座，虽是直达车(Z162 武昌-北京西)，路上仅停郑州和石家庄，但也有近十一个小时，很是痛苦，还好在车站用流量缓存了三部电影＋准备了移动电源，一夜勉强度过。周四早上七点二十左右到达北京西站，晚点约半个小时，果爷在这段时间帮我准备了公交卡，见面后在果爷的引导下找了个WC，洗把脸，直接奔向今天的日程——八达岭长城的出发点北京北站。到达北京杯北站时挺早，四处找了一周没找到吃的（都是十点才开始营业），遂一人两煎饼果子充饥，食间无意听闻今日票售罄，泪奔:-( 修改今日行程：清华、北大、圆明园、颐和园。</p><p>置身在北大、清华的校园中，并没有感受到太大的不同，可能作为一个游人、除了眼前的风景，并没有什么可以让你切身体会到百年名校的历史文化内涵，若不是见到标志性的景物——未名湖畔、清华园，兴许你根本不会意识到你在北大OR清华……</p><p>PS：不是本校学生进校门需要查身份证</p><img src="/images/2016-06-18/beida_1.jpg" title="北京大学 · 校门"><p>为了拍北大的校门，我们也是很拼——坐车坐过了几站后又走回来拍摄，咱不能让它成为遗憾啊！</p><img src="/images/2016-06-18/beida_2.jpg" title="北京大学 · 未名湖"><p>去未名湖拍摄时一定要选择好时间，上午都是逆光，拍不出想要的效果；一般下午和傍晚时光线较好，适合拍摄。我们去的时间不对，而且天气不太好，灰蒙蒙的，但果爷向我展示了他前一段时间陪他媳妇过来玩时拍摄的照片，真的很美！</p><img src="/images/2016-06-18/beida_3.jpg" title="北京大学 · 图书馆"><img src="/images/2016-06-18/beida_4.jpg" title="北京大学 · 果爷"><img src="/images/2016-06-18/beida_5.jpg" title="北京大学 · 情侣"><img src="/images/2016-06-18/qinghua_1.jpg" title="清华大学 · 清华园牌坊"><img src="/images/2016-06-18/qinghua_2.jpg" title="清华大学 · 幼童"><img src="/images/2016-06-18/qinghua_3.jpg" title="清华大学 · 果爷"><img src="/images/2016-06-18/qinghua_4.jpg" title="清华大学 · 美女"><p>中午我们是在清华里面的一家餐厅吃的饭，来北京烤鸭怎么能少呢！不过我想说，那家的烤鸭确实难吃，我都快吐了！这话并没有夸大其词。烤鸭刚送上桌来，看起来还不错，不过一会，我便闻到了一种怪味，那是鸭舍里面的那种味道，我确定，给我的第一感觉就是这鸭子洗干净没有=( 后来回武汉，同学说我们可能没有吃到正宗的北京烤鸭，他说那应该是一种外脆里嫩的感觉，期待下一次有机会再吃吧！</p><p>吃完午饭，稍作小息我们便前往圆明园和颐和园。圆明园和颐和园里面大部分跟现代的公园类似，不同的是，里面没有现代娱乐设施，大部分都是山水。未进圆明园之前，我天真的以为里面都是一些被损毁的文物古迹，进去后才发现，其实那时一片很小的区域，并且就是课本插图拍摄的那个地方。圆明园真的很大，我们并没有全部逛完，只去了一些值得去的地方，我记得的只有遗迹、展览馆、迷宫，但腿已废，讲真！</p><img src="/images/2016-06-18/yuanmingyuan_1.jpg" title="圆明园 · 黑天鹅"><img src="/images/2016-06-18/yuanmingyuan_2.jpg" title="圆明园 · 遗迹"><p>在走迷宫时，偶遇一只正在和同伴拍照的妹子，就站在我面前，遂偷拍了两张，其实也算不上偷拍，是明目张胆的拍^_^妹子表现的很自然，拍出来的效果也很好，可惜哥胆太小，没敢搭讪，是一种遗憾，如果有下一次的话……哈哈……</p><img src="/images/2016-06-18/yuanmingyuan_3.jpg" title="圆明园 · 美女"><p>不得不说，颐和园是这次北京之行最令我失望的地方，北京地区，各景点门票都比较便宜，颐和园是相对来讲比较贵的一个景点，30元，但对我来说并没有什么看头，买了一张票，爬了一座山到湖边，感觉没什么吸引力，就出去了。</p><img src="/images/2016-06-18/yiheyuan_1.jpg" title="颐和园一角"><p>临近六点，我们到达了奥林匹克公园，给我的感觉就是很大，建筑很有特色！可能是因为从事IT行业，我一下就看到了水立方后面IBM的大楼，很霸气！由于时间关系，我们只是沿着主干道走了来回，并没有绕行鸟巢和水立方，所以并没有发现电视中介绍这两个建筑时取景的地方。</p><img src="/images/2016-06-18/niaochao_1.jpg" title="奥林匹克公园 · 鸟巢"><img src="/images/2016-06-18/niaochao_2.jpg" title="奥林匹克公园 · 我"><img src="/images/2016-06-18/shuilifang_1.jpg" title="奥林匹克公园 · 水立方"><p>晚上，我们去吃了铜锅涮肉，要的很不错，清淡，但口感极佳！无意间，要的鲜榨啤酒变成鲜榨黑啤，一杯下肚，微醺。吃饱喝足，启程回住的地方，刚出门便下起雨来，还好是晚上，淋个雨回去洗澡睡觉，恰到好处！</p><p>借鉴前一天的经验，第二天（6月10号）一大早我们就奔向了北京北站，乘坐前往八达岭长城的火车，这种火车既可以买票（类似于纸质公交车票），也可以使用公交卡，每天准点发车，一天有好多趟，我们乘坐的大概是八点半左右的那班。一开始检票，排队的人群就开始涌动，一过闸机，真可谓是百米冲刺（无论买票还是刷卡，均没有指定座位），后来果爷跟我说，在他跑的过程中，不断超越别人，然后听见一女生对男友说“看看别人，跑的多快”，那男的回应“真跑不动了！”，果爷很得瑟“天天锻炼，今天终于派上用场了！”，哈哈！在车上坐下后听见一年轻小伙在那大声说“都是些什么人啊，都跟疯了一样的抢座，一点素质都没有！”后来，由于小伙跟他妈两人只抢到一个座位，他妈便坐到临近的一个同龄的老年妇女占的空位上，怎么说都不起来，我只想表示呵呵。对于这样的事情，我跟果爷的观点是一样的，这样的情况我会先去抢座，如果遇到确实需要让座的情况再让也不迟，毕竟在中国人多，出行资源有限的情况下，想要轻松的上车都是一件难事！尤其是节假日去热门景点！</p><p>八达岭长城分北线和南线，北线较长，开放了十二个烽火台，南线仅开放八个。北8楼是北线最高点，很多人爬到这就不在前行，另外北8楼以后非常陡，大概在北11楼附近有出口。来之前就打算两边全部爬完，结果稀里糊涂的先来了北线，爬完了12楼才知，若要爬南边的长城，必须原路返回，累奔！泪奔！</p><img src="/images/2016-06-18/changcheng_1.jpg" title="八达岭长城"><img src="/images/2016-06-18/changcheng_2.jpg" title="八达岭长城"><p>可以看到，尽管太阳很大，来爬长城的人还是很多。可能是因为“来了北京，不爬长城就等于白来！”，在北线，过了北8楼后，你会发现长城上面的游人骤减，路也变得陡峭起来。</p><img src="/images/2016-06-18/changcheng_3.jpg" title="八达岭长城"><img src="/images/2016-06-18/changcheng_4.jpg" title="八达岭长城"><p>可以看到，远处如织的游人与眼前零散的游人形成鲜明对比。</p><img src="/images/2016-06-18/changcheng_5.jpg" title="八达岭长城"><p>大概下午三点，我们结束了长城的爬行，一路走到火车站。刚到火车站没多会，火车就来了，排队检票的人很多，好不容易走到闸机口，停止进站！！！等待半小时，又来一列，刚上车，就开始下雨，一路站着回去。下了火车，发现外面下着好大的雨，那也不管，直奔南锣鼓巷。出了地铁站，晴空万里，后来听说，刚刚下了冰雹，而且很大！</p><p>南锣鼓巷类似于各个城市的特色小吃街，像武汉的户部巷、洛阳的丽景门等，可能由于刚下完雨，南锣鼓巷里面路面积水严重。</p><img src="/images/2016-06-18/nanluoguxiang_1.jpg" title="南锣鼓巷 · 咖啡馆"><img src="/images/2016-06-18/nanluoguxiang_2.jpg" title="南锣鼓巷 · 街景"><p>南锣鼓巷周边都是胡同，值得一去，没有必要跟着人流，胡同四通八达，想怎么转就怎么转，转累了，来一份北京地道的小吃（个人觉得，不知名胡同里的小吃可能比南锣鼓巷商业街的小吃更地道）。可惜技术有限，并没有拍到很好的照片，遗憾……</p><img src="/images/2016-06-18/nanluoguxiang_3.jpg" title="南锣鼓巷 · 胡同"><img src="/images/2016-06-18/nanluoguxiang_4.jpg" title="南锣鼓巷 · 胡同"><p>从一个胡同出来时，偶遇街边的艺人，吉他弹唱，很喜欢这种感觉，曾经也梦想过……哎</p><img src="/images/2016-06-18/nanluoguxiang_5.jpg" title="南锣鼓巷 · 街头艺人"><p>逛完南锣鼓巷，已接近傍晚，遂前往南锣鼓巷。不得不说，今天的天气真的很好，从上午艳阳高照，中途的大雨（冰雹），到下午的晴空万里，我这是在北京么？！</p><img src="/images/2016-06-18/houhai_1.jpg" title="后海 · 晴空"><p>夜幕降临，我们选了一家看起来还不错的酒吧，吃了点东西，一人来了一杯鲜啤，聆听着酒吧歌手带来的每一首歌，后来发现我们所选的酒吧，人气并不高，坐了近三个小时，仅有四群人光临。</p><img src="/images/2016-06-18/houhai_2.jpg" title="后海 · 歌手"><img src="/images/2016-06-18/houhai_3.jpg" title="后海 · 夜色"><p>回去的路上，发现一路的酒吧，人气都很高，除了我们去的那家=_= 其中有一家驻唱的女歌手，唱歌特别好听，路过时被深深吸引！</p><img src="/images/2016-06-18/houhai_4.jpg" title="后海 · 歌手"><p>从后海出来后，很想去看奥林匹克公园的夜景，拍拍鸟巢、水立方什么的，结果奥林匹克公园有时间限制，晚上九点后就不准进入了，所以只在远处拍到了指挥塔的五环-_-</p><img src="/images/2016-06-18/wuhuan_1.jpg" title="奥林匹克公园 · 指挥塔"><p>前两天玩的都比较累，于是最后一天准备轻松点度过。早上九点才起，收拾完后跑到一公里外的地方去吃庆丰包子（个人感觉没什么特别），然后准备乘坐果爷推荐一条公交线路（路过王府井和长安大街）去天安门，途中才发现来北京居然把爽哥给遗忘了，这怎么可以！遂约起，更改行程，直奔人民大学。人民大学不算大，在爽哥的带领下很快就逛完了，天气很好，校园也很美。</p><img src="/images/2016-06-18/minda_1.jpg" title="人民大学 · 喷泉"><img src="/images/2016-06-18/minda_2.jpg" title="人民大学 · 世纪馆"><p>每次跟爽哥打电话，她都在学习，后来发现原来是在图书馆睡觉，据说他们的图书馆很高大上，特别适合睡觉！爽哥就是这么过来的！中午在爽哥的盛情招待下，我们见识到了民大餐厅高大上的点餐系统，吃了爽哥百吃不厌的猪蹄，确实美味，感谢爽哥！</p><img src="/images/2016-06-18/minda_3.jpg" title="人民大学 · 图书馆"><img src="/images/2016-06-18/minda_4.jpg" title="人民大学 · 明德楼"><p>下午两点左右，我们离开民大，前往天安门。刚步入临近区域，你会发现不愧为国家权力中心，安保什么的非比寻常，给人一种油然而生的敬畏。故宫对于我并没有什么太大的吸引力，遂仅仅登上了天安门城楼。</p><img src="/images/2016-06-18/tiananmen_1.jpg" title="天安门 · 城楼"><img src="/images/2016-06-18/tiananmen_2.jpg" title="天安门 · 国旗"><img src="/images/2016-06-18/tiananmen_3.jpg" title="天安门 · 华表"><img src="/images/2016-06-18/tiananmen_4.jpg" title="故宫 · 午门"><img src="/images/2016-06-18/tiananmen_5.jpg" title="天安门 · 城楼"><p>为了拍故宫全景，我们也是很拼，一路从故宫正门狂奔到后面的景山公园，买完票后，又一路奔到山顶，也是醉了(☆_☆)</p><img src="/images/2016-06-18/jingshan_1.jpg" title="景山公园 · 故宫全景"><img src="/images/2016-06-18/jingshan_2.jpg" title="景山公园 · 奥林匹克公园"><p>故宫的另一面可以看到奥林匹克公园的指挥塔、IBM大楼。景山公园山顶有很多摄影爱好者在那拍摄，由于面积比较小，所以如果想拍到好照片，可能需要等一会。在景山公园山顶拍了几张照片，就直奔火车站了，刚到火车站，直接取票、检票、上车。</p><p>就这样，北京之行就结束了，感谢果爷的招待与陪伴^_^ 我的印象中，北京应该是一个成天雾霾、沙尘暴的地方，去了以后发现，北京的天气并没有想象中的那么糟，可能会比全国很多地方的天气还要好，至少比武汉的天气要好很多。在北京呆了三天，两天都是晴空万里，蓝天白云，而在武汉，印象中去年暑假见过一次这样的蓝天。可能你不会相信，虽是艳阳高照，但只要有树荫的地方，就会很凉爽；而在武汉，只要是夏天，无论在什么地方，吹在身上的风都是黏糊糊的，很不舒服。</p>]]></content>
      
      
      <categories>
          
          <category> 看世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京 </tag>
            
            <tag> 颐和园 </tag>
            
            <tag> 圆明园 </tag>
            
            <tag> 清华 </tag>
            
            <tag> 北大 </tag>
            
            <tag> 鸟巢 </tag>
            
            <tag> 水立方 </tag>
            
            <tag> 长城 </tag>
            
            <tag> 南锣鼓巷 </tag>
            
            <tag> 胡同 </tag>
            
            <tag> 后海 </tag>
            
            <tag> 故宫 </tag>
            
            <tag> 人民大学 </tag>
            
            <tag> 景山公园 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2G到C-RAN网络结构演进</title>
      <link href="/2016/06/02/2G%E5%88%B0C-RAN%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E6%BC%94%E8%BF%9B/"/>
      <url>/2016/06/02/2G%E5%88%B0C-RAN%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E6%BC%94%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p>最近在做 C-RAN 方面的研究，苦于没有相关方面的基础，前进路上步步艰难，于是搜集相关方面的资料，了解学习2G到4G网络结构的演进过程，整理形成本篇博文。本文内容循序渐进，第一部分GSM网络结构是后续部分的基础，其中详细介绍了各组成部分，后续各部分只介绍了相对于前一代网络中的改进，相同部分不再赘述，请读者根据需要自行决定阅读顺序。文中图片全部根据网络内容重新绘制，如需原图，请与 <a href="http://www.huberylee.cn/about/" target="_blank" rel="noopener">本人</a> 联系。</p><a id="more"></a><p>在阅读本文之前，先来了解两个概念：</p><p><strong> 无线接入网：</strong> Radio Access Network，简称RAN，是移动通信系统中的一部分，它存在于一个设备（例如，一个移动电话，一个计算机，或任何被远程控制的机器）与核心网（Core Network，简称：CN）之间，提供两者间的通信连接。<br><strong> 核心网：</strong> 主要是提供用户连接、对用户的管理以及对业务完成承载，作为承载网络提供到外部网络的接口。核心网从逻辑结构上可以划分为3个域：归属网络域、服务网络域和传送网络域。归属网络域是指客户开户的网络，是自己的开户地；正在为客户提供服务或者能够为客户提供服务的网源称为服务网络域；传送网络域是指一旦用户发生了漫游，比如到了非洲，可能会用到其它的运营商网络将数据包转发到归属网络，这些网络称为传送网络域。</p><h2 id="GSM网络结构（2G）"><a href="#GSM网络结构（2G）" class="headerlink" title="GSM网络结构（2G）"></a>GSM网络结构（2G）</h2><p>GSM标准定义的GSM网络由4部分组成：移动台（Mobile Station，MS）、基站系统（Base Station System，BSS）、网络交换系统（Network Switching System，NSS）和操作维护系统（Operations and Maintenance System，OMS）。</p><p>1．移动台（MS）</p><p>移动台（Mobile Station，MS）是用户端终止无线信道的设备，通过无线空中接口Um给用户提供接入网络业务的能力。移动台由两部分组成：移动设备（Mobile Equipment，ME）和用户识别模块（Subscriber Identity Module，SIM）。</p><p><img src="/images/2016-06-01/移动台（MS）.png" alt></p><p>2．基站系统（BSS）</p><p>基站系统（Base Station System，BSS）提供移动台与移动交换中心（MSC）之间的链路。BSS由3部分组成：基站控制器（Base Station Controller，BSC）、基站收发信台（Base Transceiver Station，BTS）和变码器（Transcoder，XCDR）。</p><p><img src="/images/2016-06-01/基站系统（BSS）.png" alt></p><p>3．网络交换系统（NSS）</p><p>网络交换系统（Network Switching System，NSS）具有GSM网络的主要交换功能，还具有用户数据和移动管理所需的数据库。网络交换系统由移动业务交换中心（MSC）、访问位置寄存器（VLR）、归属位置寄存器（HLR）、鉴权中心（AUC）、移动设备识别寄存器（EIR）、互通功能部件（IWF）和回声消除器（EC）等组成。</p><p><img src="/images/2016-06-01/网络交换系统（NSS）.png" alt></p><p>4．操作维护系统（OMS）</p><p>操作维护系统（Operations and Maintenance System，OMS）提供在远程管理和维护GSM网络的能力。OMS由网络管理中心（Network Management Center，NMC）和操作维护中心（Operations and Maintenance Center，OMC）两部分组成。</p><p><img src="/images/2016-06-01/操作维护系统（OMS）.png" alt></p><p>GSM网络结构图如下：</p><p><img src="/images/2016-06-01/GSM.png" alt></p><h2 id="GPRS叠加网络结构（2-5G）"><a href="#GPRS叠加网络结构（2-5G）" class="headerlink" title="GPRS叠加网络结构（2.5G）"></a>GPRS叠加网络结构（2.5G）</h2><p>从GSM网络（2G）演进到GPRS网络（2.5G），最主要的变化是引入了分组交换业务。原有的GSM网络是基于电路交换技术，不具备支持分组交换业务的功能。因此，为了支持分组业务，在原有GSM网络结构上增加了几个功能实体，相当与在原有网络基础上叠加了一小型网络，共同构成GPRS网络。</p><p>接入网方面，在BSC上增加了分组控制单元PCU（Packet Control Unit，PCU），用以提供分组交换通道，负责许多GPRS相关功能，比如接入控制、分组安排、分组组合及解组合；核心网方面，增加了服务型GPRS支持节点SGSN（Service GPRS Supported Node，SGSN）和网关型GPRS支持节点GGSN（Gateway GPRS Supported Node，GGSN）。其中，SGSN的功能类似于电路交换系统的MSC/VLR，它和MSC/VLR、短消息业务中心(SMSC)、HLR以及计费网关功能(Charging Gateway Function，CGF)相连；GGSN的功能方面与MSC和GMSC一致，处理的是分组业务，是和外部分组数据网络(比如因特网)的接口点；从GPRS叠加网络结构开始，引入了两个概念：一个是电路交换域，一个是分组交换域，也就是我们常说的Cs域与Ps域。</p><p>GPRS叠加网络结构图如下：</p><p><img src="/images/2016-06-01/GPRS.png" alt></p><h2 id="UMTS网络结构（3G）"><a href="#UMTS网络结构（3G）" class="headerlink" title="UMTS网络结构（3G）"></a>UMTS网络结构（3G）</h2><p>通信技术发展到3G，在速率发面有了质的提高，而网络结构上，同样发生巨大变化。首先，伴随技术的发展，空中接口也随之改变。之前网络结构中的Um空中接口换成了Uu接口，而接入网与核心网接口也换成了Iu口；然后，在接入网方面，不再包含BTS和BSC，取而代之的是基站NodeB与无线网络控制器（Radio Network Controller，RNC）。其中，NodeB的主要功能是基带处理和扩频，主要功能有：</p><ul><li>空中接口发送/接收</li><li>调制/解调</li><li>CDMA物理通道编码 </li><li>微分集</li><li>差错处理</li><li>闭环功率控制</li></ul><p>RNC主要负责无线资源的管理，一方面它通过Iu接口同电路域和分组域核心网相连；另一方面它负责管理和控制Node B，并负责空中接口与UE之间的L1以上的协议处理。在无线接入网络中，它处于承上启下的关键地位；在逻辑上，它和GSM中的BSC相对应。其主要担任CRNC、SRNC、DRNC三种角色，实现以下功能：</p><ul><li>主要支持对WCDMA Node B的控制和管理。</li><li>支持包括Iu承载、Iub承载、Iur承载、无线承载等在内的无线接入资源的管理和分配。</li><li>支持包括软切换、硬切换、与GSM/GPRS的系统间切换、小区更新、URA更新、寻呼等各种移动性管理工作，其中包括支持通过Iur接口的宏分集功能。</li><li>支持各种电路域和分组数据业务数据传输。</li><li>支持对控制信令的完整性检查以及对用户数据的加密和解密等安全性功能。</li><li>支持对UE的接入控制、负载过载的拥塞控制等系统接入功能。</li><li>支持广播域广播信息业务。</li></ul><p>在核心网方面基本与原有网络共用，无太大区别。</p><p>UMTS网络结构图如下：</p><p><img src="/images/2016-06-01/UMTS.png" alt></p><h2 id="LTE网络结构（4G）"><a href="#LTE网络结构（4G）" class="headerlink" title="LTE网络结构（4G）"></a>LTE网络结构（4G）</h2><h3 id="LTE网络结构"><a href="#LTE网络结构" class="headerlink" title="LTE网络结构"></a>LTE网络结构</h3><p>LTE（Long Term Evolution，长期演进)是由3GPP（The 3rd Generation Partnership Project，第三代合作伙伴计划）组织制定的UMTS（Universal Mobile Telecommunications System，通用移动通信系统）技术标准的长期演进，于2004年12月在3GPP多伦多会议上正式立项并启动。LTE系统引入了OFDM（Orthogonal Frequency Division Multiplexing，正交频分复用）和MIMO（Multi-Input &amp; Multi-Output，多输入多输出）等关键技术，显著增加了频谱效率和数据传输速率。</p><p>整个LTE网络从接入网和核心网方面分为E-UTRAN和EPC。接入网方面，它不再包含两种功能实体，整个网络只有一种基站eNodeB，它包含了整个NodeB和部分RNC的功能；其次，EPC（Evolved Packet Core）方面，它对之前的网络结构能够保持前向兼容，而自身结构方面，也不再有之前各种实体部分，取而代之的主要就换成了移动管理实体MME（Mobile Management Entity，MME）、服务网关（Signal Gateway，S-GW）和分组数据网关（Packet Data Network Gateway，PDN GW）。其中，MME负责移动性管理、信令处理等功能；S-GW是连接NO.7信令网与IP网的设备，主要完成传输层信令转换，负责媒体流处理及转发等功能；PDN GW是连接外部数据网的网关，只接入IP网UE（用户设备，如手机）可以通过连接到不同的PDN Gateway访问不同的外部数据网。</p><p>相对于3G网络，4G网络架构的变化主要表现在：</p><ol><li>实现了控制与承载的分离，MME负责移动性管理、信令处理等功能，S-GW负责媒体流处理及转发等功能；</li><li>核心网取消了CS（电路域），全IP的EPC（Evolved Packet Core，移动核心网演进）支持各类技术统一接入，实现固网和移动融合（FMC），灵活支持VoIP及基于IMS多媒体业务，实现了网络全IP化；</li><li>取消了RNC，原来RNC功能被分散到了eNodeB和网关（GW）中，eNodeB直接接入EPC，LTE网络结构更加扁平化，降低了用户可感知的时延，大幅提升用户的移动通信体验；</li><li>接口连接方面，引入S1-Flex和X2接口，移动承载需实现多点到多点的连接，X2是相邻eNB间的分布式接口，主要用于用户移动性管理；S1-Flex是从eNB到EPC的动态接口，主要用于提高网络冗余性以及实现负载均衡。</li></ol><p>LTE网络结构图如下：</p><p><img src="/images/2016-06-01/LTE.png" alt></p><h3 id="eNodeB（LTE基站）详解"><a href="#eNodeB（LTE基站）详解" class="headerlink" title="eNodeB（LTE基站）详解"></a>eNodeB（LTE基站）详解</h3><p>LTE基站设备（eNodeB）为分布式基站设备，它是由基带单元设备（BBU）、射频远端设备（RRU）构成，是一种可以灵活分布式安装的基站组合，见下图所示。其中RRU通过Ir接口与基带单元设备BBU相连，BBU通过S1接口和EPC连接。</p><p>TD-LTE基站设备（eNodeB）在网络的位置见下图所示:</p><p><img src="/images/2016-06-01/eNodeB_location.png" alt></p><p>分布式基站设备示意图：</p><p><img src="/images/2016-06-01/eNodeB.png" alt></p><p>Ir协议支持的基本网络结构如图2所示：一个BBU单元和一个RRU单元通过一对光纤连接。为了满足系统扩容和网络结构多样性的要求，Ir协议可以扩展以下连接方法：</p><p>1). 单点连接：1个BBU与1个RRU连接，如下图所示：</p><p><img src="/images/2016-06-01/BBU_RRU_1.png" alt></p><p>2). 星型连接：多个RRU服务于同一个BBU单元，如下图所示：</p><p><img src="/images/2016-06-01/BBU_RRU_2.png" alt></p><p>3). 链型连接支持多个RRU间的互连，如下图所示：</p><p><img src="/images/2016-06-01/BBU_RRU_3.png" alt><br><img src="/images/2016-06-01/BBU_RRU_4.png" alt></p><p>Ir接口协议定义了层一和层二协议来支持用户层的数据传输，BBU和RRU单元间同步等控制信息的发送和接收。用户层的消息是以IQ数据方式发送的，不同天线载波（Antenna &amp; Carrier）的IQ数据分时在光传输通道中。Ir支持Ethernet协议来传送C&amp;M信息，利用UDP协议获取IP，该IP地址由BBU自行分配。除此之外还需要传送厂商的特殊信息。</p><p>LTE IR接口协议的层一，层二遵从CPRI Specification V4.2协议，LTE IR接口协议对CPRI协议的部分内容加以约束，以保证符合LTE IR接口协议的BBU/RRU的互操作性。LTE IR接口协议的层3定义BBU与RRU间的交互流程，消息定义，通过层三流程BBU完成对RRU的配置与查询等操作。</p><p>对于eNB来说涉及到的一共有三个接口:  Uu口、s1接口、x2接口，下图为全网的接口图：</p><p><img src="/images/2016-06-01/infrastructure.png" alt></p><p>而涉及到切换的有X2切换和S1的切换。  两个基站之间的接口: X2，主要是通过指定邻区，接口就建立，只要在配置文件里配一个相邻基站的IP地址及配相邻小区的一些信息即可，并没有特别的物理连线。一般情况下如果两个基站之间有X2接口，那么切换就会走X2，但是当不存在X2接口或者X2接口出现了问题，切换就会在S1接口上发生。</p><h2 id="C-RAN网络结构"><a href="#C-RAN网络结构" class="headerlink" title="C-RAN网络结构"></a>C-RAN网络结构</h2><p>C-RAN（Cloud RAN）架构由3个部分组成：</p><ul><li>分布式无线网络：由远端无线射频单元（RRU）和天线组成；</li><li>远端无线射频单元：由高带宽低延迟的光传输网络连接；</li><li>集中式基带处理池：由高性能处理器和实时虚拟技术组成。</li></ul><p>在C-RAN 架构下，运营商可以迅速地部署或者升级网络。运营商只需要部署一些新的远端无线射频单元并连接到基带处理池，就可以轻易实现网络覆盖的扩展或网络容量的增加。如果网络负载增加，运营商只需要在基带池中增加新的通用处理器即可。</p><p>C-RAN网络结构图如下：</p><p><img src="/images/2016-06-01/C-RAN.png" alt></p><p>文中部分内容来源于网络，如侵犯作者版权，请及时与 <a href="http://www.huberylee.cn/about/" target="_blank" rel="noopener">本人</a> 联系删除相关内容。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://jpkc.nwpu.edu.cn/dzjc/xiandaitongxin/jc/text/9.4.htm" target="_blank" rel="noopener">GSM数字蜂窝移动通信系统</a><br><a href="http://book.51cto.com/art/201112/305904.htm" target="_blank" rel="noopener">GSM系统的网络结构</a><br><a href="http://blog.csdn.net/fzy0201/article/details/11910829" target="_blank" rel="noopener">2G到4G网络结构的演进过程（图）</a><br><a href="http://book.51cto.com/art/200808/85774.htm" target="_blank" rel="noopener">GPRS的网络结构</a><br><a href="http://www.cyberhome.cn/gprs/structure1.htm" target="_blank" rel="noopener">GPRS系统结构</a><br><a href="http://www.ptsn.net.cn/article_new/show_article.php?article_id=technic_7b5ce8d2-f078-9328-2c1e-449899c3bb3e" target="_blank" rel="noopener">WCDMA网络结构和功能分析</a><br><a href="http://blog.itpub.net/182444/viewspace-807706/" target="_blank" rel="noopener">第三代移动通信系统UMTS的网络结构</a><br><a href="http://blog.sina.com.cn/s/blog_4770ef020101phnz.html" target="_blank" rel="noopener">3G网络结构</a><br><a href="http://network.pconline.com.cn/319/3198793_all.html" target="_blank" rel="noopener">技术解读 3G和4G LTE网络架构之间的区别</a><br><a href="http://www.gtzh.com.cn/index.php/ydtxcp/48.html#004" target="_blank" rel="noopener">eNodeB（LTE基站）</a><br><a href="http://www.zte.com.cn/cndata/magazine/zte_technologies/2011/6_11/magazine/201106/t20110617_239453.html" target="_blank" rel="noopener">构建融合、高效、低成本网络——C-RAN解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> 移动通讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基站 </tag>
            
            <tag> 移动通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java连接MySQL数据库</title>
      <link href="/2016/05/30/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2016/05/30/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>Java连接MySQL数据库一般有以下几个步骤：</p><ul><li>添加数据库驱动包依赖；</li><li>使用 <code>Class.forName()</code> 方法加载驱动程序;</li><li>使用 <code>DriverManager.getConnection()</code> 获取数据库连接对象；</li><li>使用 <code>createStatement()</code> 创建数据库操作语句；</li><li>执行 <code>executeQuery()</code> 等方法，获取操作结果；</li></ul><a id="more"></a><p>驱动包下载。在MySQL官网 <a href="http://dev.mysql.com/downloads/" target="_blank" rel="noopener">Downloads</a> 页面中找到 <a href="http://dev.mysql.com/downloads/connector/" target="_blank" rel="noopener">MySQL Connectors</a> 一项，这里面包括了多种语言对应的MySQL驱动，其中 <a href="http://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">Connector/J</a> 为Java所对应的MySQL驱动，选择所需的版本下载后将其添加到项目依赖中。</p><p>数据表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cs_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`user_number`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学号或工号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户信息'</span>;</span><br></pre></td></tr></table></figure></p><p>完整代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from cs_user"</span>;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/school"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.print(<span class="string">"user_number:"</span> + rs.getString(<span class="string">"user_number"</span>) + <span class="string">"\t"</span>);</span><br><span class="line">                System.out.print(<span class="string">"user_name:"</span> + rs.getString(<span class="string">"name"</span>) + <span class="string">"\t"</span>);</span><br><span class="line">                System.out.print(<span class="string">"sex:"</span> + rs.getString(<span class="string">"sex"</span>) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乌镇</title>
      <link href="/2016/04/20/%E4%B9%8C%E9%95%87/"/>
      <url>/2016/04/20/%E4%B9%8C%E9%95%87/</url>
      
        <content type="html"><![CDATA[<p>同一次行程，为什么不将乌镇和杭州西湖写在一起呢？原因很简单，虽同为著名的风景区，但西湖和乌镇给我的感受却是天壤之别。西湖的游人很多，但却也游的自在，你可以找一处风景极好之地，坐下来，静静观看周边的美景以及形形色色的游人；你也可以乘一艘小船，荡漾在碧波之上……然而身处乌镇却由不得你，游人如织似乎也难以形容到访的人流之多，江南水乡在过于密集的游人中失去了原有的本色，不论何时何地，只要抬头，看到的都是人！</p><a id="more"></a><p><img src="/images/2016-04-20/1.jpg" alt></p><p>游玩期间，我再次感受到临考前的紧张，时不时的搜寻一下导游的小旗飘到了何处，离我有多远，这是一种怎样的感觉？<br><img src="/images/2016-04-20/2.jpg" alt><br>每当这面小旗消失在我眼前时，心跳立马加速，谢谢你，这面小旗，游玩乌镇的过程中，你成功的俘虏了我的心！</p><p>乍一看，人还挺少，风景还很不错^_^<br><img src="/images/2016-04-20/3.jpg" alt></p><p>其实是这样的<br><img src="/images/2016-04-20/4.jpg" alt></p><p>再近一点是这样的<br><img src="/images/2016-04-20/5.jpg" alt></p><p>你知道哥是怎么走路的么？不用腿，站在那就行了，感觉是像站在海水中，海水一浪一浪的推着你向前走。<br><img src="/images/2016-04-20/6.jpg" alt></p><p>染坊<br><img src="/images/2016-04-20/7.jpg" alt></p><p>这里的老房子大部分都住着人，虽然外观依旧和原来的一样，但实际上内部的装修已经很现代了，令我很吃惊的是，尽管外面很多游人，但房里的主人都很淡定的在看电视。<br><img src="/images/2016-04-20/8.jpg" alt></p><p>很想上去体验一把，但你知道排队上船的人有多少么！<br><img src="/images/2016-04-20/9.jpg" alt></p><p>桥上的风景<br><img src="/images/2016-04-20/10.jpg" alt></p><p>矛盾纪念馆<br><img src="/images/2016-04-20/11.jpg" alt></p><p>桐乡花鼓戏<br><img src="/images/2016-04-20/12.jpg" alt></p><p>桐乡馆<br><img src="/images/2016-04-20/13.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 看世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乌镇 </tag>
            
            <tag> 江南水乡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟雨西湖</title>
      <link href="/2016/04/19/%E7%83%9F%E9%9B%A8%E8%A5%BF%E6%B9%96/"/>
      <url>/2016/04/19/%E7%83%9F%E9%9B%A8%E8%A5%BF%E6%B9%96/</url>
      
        <content type="html"><![CDATA[<p>我：天伟，你这周忙不忙？我想去你那蹭饭……</p><p>天伟：周末嘛？周末可以。</p><p>就这样，杭州之旅就促成了。</p><a id="more"></a><p>以前并没有想过要去杭州，近几天由于状态不太好，想出去转转，于是便从北京、凤凰、杭州中选了一个。</p><p>在没去杭州之前，对杭州也仅仅局限于一个大城市的概念，除了西湖、灵隐寺等著名景点外，再无其他印象。到过杭州之后，才发现，杭州之所以名声在外，除了其风景名胜外，更多的是当地人的友善与热情。</p><p>独特的马路文化。虽然是经济高度发达的大都市，可杭州的路都很窄，并没有想象中的宽阔，堵车是常见的事情，然而，拥挤的道路并没有被急促的喇叭声所充斥，更多的是耐心地等待，没有脏言恶语，感受不到丝毫的急躁。在没有红绿灯的路口，各种车辆总是让等在路边准备过马路的行人先行，可能听起来并不是那么震撼有力，但当众多车辆为你暂停行驶，示意让你优先过马路时，心中便会有一种莫名的感动，这是多么和谐友善的一幅画面！</p><p><img src="/images/2016-04-19/1.jpg" alt></p><p>杭州的人很热情。无论是开出租车的司机，还是做生意的老板，亦或是街边的路人，都很热情。天伟说，杭州人与其他城市的人不一样，他们都把自己的工作当成是一种事业，很尽责也很有热情，在他们身上丝毫看不出任何对工作的不满或者懈怠。即使是一位环卫阿姨／大叔，只要你向他打听路线，她／他恨不得亲自把你领过去。在杭州的这几天，我有幸感受到杭州人的热情，无论是住宿地的阿姨，还是卖早点的大妈，亦或是给我们拍照的路人，都散发出这个城市的魅力，给人不一样的感受，究竟有多么不一般，只有你去了才知道！</p><p><img src="/images/2016-04-19/2.jpg" alt></p><p>游玩西湖时，天气很给力，泼了点阵雨，又撒了点阳光，很是惬意……</p><p>老人与湖（给我们拍照的路人就在其中）<br><img src="/images/2016-04-19/3.jpg" alt></p><p>回坞的游船<br><img src="/images/2016-04-19/4.jpg" alt></p><p>远处的雷峰塔<br><img src="/images/2016-04-19/5.jpg" alt></p><p>游人<br><img src="/images/2016-04-19/6.jpg" alt></p><p>断桥<br><img src="/images/2016-04-19/7.jpg" alt></p><p>南宋御街<br><img src="/images/2016-04-19/8.jpg" alt></p><p>强势秀恩爱<br><img src="/images/2016-04-19/9.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 看世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杭州 </tag>
            
            <tag> 西湖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS X EI Capitan上安装使用MathTex</title>
      <link href="/2016/02/29/OS-X-EI-Capitan%E4%B8%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8MathTex/"/>
      <url>/2016/02/29/OS-X-EI-Capitan%E4%B8%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8MathTex/</url>
      
        <content type="html"><![CDATA[<p>最近在帮同学改一个项目代码时需要在Web页面中显示数学公式，由于以前没有相关代码经验，便在网上找了找解决方法，于是发现了 <a href="http://www.forkosh.com/mathtex.html" target="_blank" rel="noopener">MathTex</a> 。 MathTex 是一个开源的 CGI 程序，可以根据请求的LaTex公式生成对应的公式图片（gif或者png），以供在网页中使用，抱着试一试的态度就在本机安装试用了一番。</p><a id="more"></a><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><p>MathTex 需要两个依赖库：latex和dvipng ，最新的 <a href="http://www.latex-project.org/ftp.html" target="_blank" rel="noopener">LaTex</a> 发行版中应该包含了dvipng，如果你不确定本机是否安装了这两个库，你可以分别使用<code>which latex</code> 和 <code>which dvipng</code> 查看，如果安装，会有类似于这样的输出信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:~ lihui$ <span class="built_in">which</span> latex</span><br><span class="line">/Library/TeX/texbin/latex</span><br><span class="line">lihuis-MacBook-Pro:~ lihui$ <span class="built_in">which</span> dvipng</span><br><span class="line">/Library/TeX/texbin/dvipng</span><br></pre></td></tr></table></figure><p>我安装的事 mini 版的 LaTex ，后来发现没有 dvipng，可使用如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tlmgr install dvipng</span><br></pre></td></tr></table></figure><h2 id="编译MathTex程序"><a href="#编译MathTex程序" class="headerlink" title="编译MathTex程序"></a>编译MathTex程序</h2><p><a href="http://www.forkosh.com/mathtex.html" target="_blank" rel="noopener">MathTex</a> 官网提供了下载链接，下载下来的是一个zip文件，解压后进入源码目录执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc mathtex.c –DLATEX=\<span class="string">"<span class="variable">$(which latex)</span>\" –DDVIPNG=\"<span class="variable">$(which dvipng)</span>\" –o mathtex.cgi</span></span><br></pre></td></tr></table></figure><p>成功执行后我们会得到一个 mathtex.cgi 可执行文件。</p><h2 id="配置Apache以使用CGI程序"><a href="#配置Apache以使用CGI程序" class="headerlink" title="配置Apache以使用CGI程序"></a>配置Apache以使用CGI程序</h2><p>编辑 httpd.conf 文件： <code>/etc/apache2/httpd.conf</code> ，取消注释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AddHandler cgi-script .cgi                       (1)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">AddType text/html .shtml                         (2)</span><br><span class="line">AddOutputFilter INCLUDES .shtml                  (3)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">LoadModule cgi_module libexec/apache2/mod_cgi.so (4)</span><br></pre></td></tr></table></figure><p>(1)是描述对什么样的文件视为cgi文件，用户可添加，比如添加 perl文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler cgi-script .cgi .pl</span><br></pre></td></tr></table></figure><p>(2)和(3)是表示允许服务端返回的文件内容格式、和包含的输出文件。</p><p>然后编辑 <code>/etc/apache2/users/username.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory <span class="string">"/Users/username/Sites/"</span>&gt;</span><br><span class="line">    Options Indexes FollowSymLinks MultiViews ExecCGI</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>ExecCGI开启cgi程序。</p><p>重启Apache即可。</p><h2 id="使用MathTex"><a href="#使用MathTex" class="headerlink" title="使用MathTex"></a>使用MathTex</h2><p>将先前编译好的 mathtex.cgi 放在网站目录下，然后赋予权限，即可使用。如果你放在 <code>/Users/username/Sites/</code> 目录下，你可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/~username/mathtex.cgi?x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;</span><br></pre></td></tr></table></figure><p>访问；如果你放在 <code>/Users/username/Sites/project</code> 目录下，你可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/~username/project/mathtex.cgi?x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;</span><br></pre></td></tr></table></figure><p>访问；当然你也可以放在 <code>/Library/WebServer/CGI-Executables</code> 目录下，然后通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/cgi-bin/mathtex.cgi?x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;</span><br></pre></td></tr></table></figure><p>访问。</p><p>不过后来发现使用 MathTex 在网页中显示公式的效果并不好，于是改用了 <a href="https://www.mathjax.org" target="_blank" rel="noopener">MathJax</a> ，直接渲染 LaTex 得到对应的公式（不是图片），效果很好：</p><p>$$ min \left\{ \sum_b^B {P_b sgn(\sum_f^F X_{bf})} + \sum_b^B \sum_f^F {X_{bf} P_f} \right\} $$</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> CGI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MathTex </tag>
            
            <tag> cgi-bin </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地大雪景</title>
      <link href="/2016/01/31/%E5%9C%B0%E5%A4%A7%E9%9B%AA%E6%99%AF/"/>
      <url>/2016/01/31/%E5%9C%B0%E5%A4%A7%E9%9B%AA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-31/1.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-31/2.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-31/3.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/2016-01-31/4.jpg" alt></div><div class="group-picture-column" style="width: 50%;"><img src="/images/2016-01-31/5.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-31/6.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-31/7.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-31/8.jpg" alt></div></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 随拍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随拍 </tag>
            
            <tag> 地大 </tag>
            
            <tag> 雪景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Gurobi所遇到的那些坑</title>
      <link href="/2016/01/30/%E5%88%9D%E8%AF%86Gurobi%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
      <url>/2016/01/30/%E5%88%9D%E8%AF%86Gurobi%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>Gurobi是目前比较流行且速度很快的求解线性规划、混合整数规划的软件，相关介绍可参阅 <a href="https://en.wikipedia.org/wiki/Gurobi" target="_blank" rel="noopener">Wiki</a>、<a href="http://baike.baidu.com/item/gurobi" target="_blank" rel="noopener">百度百科</a>。</p><p>最近在做基于能量最优化前提下的网络功能放置问题时用到了Gurobi进行解模，由于以前并没有使用过Gurobi，所以从安装到后面写代码解模的过程中遇到了不少坑，特此记录一下。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Gurobi提供了C、C++、Python、Java、.NET、R、Matlab等多种语言的编程接口，我选用的是Python接口，所以在安装Gurobi之前必须先安装Python，建议的安装顺序是依次为：Python、Gurobi、IDE，否则，可能会出现一些莫名其妙的问题。</p><p><strong><em>注意：选择的Python和Gurobi必须是相同位数的（同是32位或者同是64位）</em></strong></p><p>题外话：</p><ul><li>Gurobi免费提供给学术研究者使用，如何获取免费的License请参照 <a href="http://www.gurobi.com/academia/for-universities#" target="_blank" rel="noopener">官网步骤</a>；</li><li>推荐使用的IDE为PyCharm，PyCharm是 <a href="https://www.jetbrains.com/" target="_blank" rel="noopener">JetBrains</a> 打造的一系列开发神器中的一款，各种神器都有免费版和商业版，使用edu邮箱注册也可以免费使用商业版。如果环境配置正确，可以在PyCharm中直接运行Gurobi程序。</li></ul><h2 id="解模"><a href="#解模" class="headerlink" title="解模"></a>解模</h2><h3 id="if…else…问题"><a href="#if…else…问题" class="headerlink" title="if…else…问题"></a>if…else…问题</h3><p>在Gurobi中如果需要根据线性表达式的值是否超过设定的阈值作为条件进行判断时，需要进行转化！下面举例说明一下。</p><p>在某一场景下，我的求解目标是：</p><p>$$ min \left\{ \sum_b^B {P_b sgn(\sum_f^F X_{bf})} + \sum_b^B \sum_f^F {X_{bf} P_f} \right\} $$</p><p>其中，sgn(x) 为信号函数，当 x &gt; 0 时， sgn(x) = 1；否则， sgn(x) = 0，这里的 x = $ \sum_f^F X_{bf} $。在Gurobi中，这部分的代码大概会是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    sum_b = quicksum(X[b, f] <span class="keyword">for</span> b <span class="keyword">in</span> B)</span><br><span class="line">    <span class="keyword">if</span> sum_b &gt; <span class="number">0</span>:</span><br><span class="line">        S[b] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        S[b] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>结果在运行时你会发现，<code>sum_b</code> 是一个 <code>LinExpr</code> （线性表达式），无法使用常见的比较运算符，使用Gurobi提供的 <code>LinExpr.__eq()__</code>、<code>LinExpr.__le()__</code>、<code>LinExpr.__ge()__</code> 方法，也是不可行的，程序总会执行判断条件的第一种情况，这种情况该怎么办呢？一般采用转化的方法，这里的 $sgn(\sum_f^F X_{bf})$ 实际上是一个 0/1 变量，计为 $ S_b $ ，我们只需要为它添加一个限制条件，使它能取到 0/1 值即可，将上面的求解目标稍加改变并添加两个限制条件。</p><p>修改求解目标：</p><p>$$ min \left\{ \sum_b^B {P_b S_b} + \sum_b^B \sum_f^F {X_{bf} P_f} \right\} $$</p><p>添加限制条件：</p><p>$$ S_b \in \{0, 1\} &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; \forall b \in B $$</p><p>$$ \sum_f^F X_{bf} / A \leq S_b \leq \sum_f^F X_{bf} A  &emsp;&emsp; \forall b \in B $$<br>其中A为足够大的常数，这样问题即可解决。</p><h3 id="流平衡问题"><a href="#流平衡问题" class="headerlink" title="流平衡问题"></a>流平衡问题</h3><p>在添加流平衡限制条件时，应注意以下几个问题：</p><ol><li>流平衡针对的是中间节点，所以两端点要排除在外；</li><li>流平衡中如果存在节点内的流，则在图的边集合中应该加入两端都是同一节点的边，例如：<br><img src="/images/2016-01-30/flow_circle.png" alt><br>在边集合中增加：$ (b, b) \in E $ ；</li><li>无向图中每条边要交换端点各写一遍，即：$ (j, k) \in E &emsp;&emsp; (k, j) \in E $。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> Gurobi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gurobi </tag>
            
            <tag> 线性规划 </tag>
            
            <tag> 解模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地大隧道</title>
      <link href="/2016/01/22/%E5%9C%B0%E5%A4%A7%E9%9A%A7%E9%81%93/"/>
      <url>/2016/01/22/%E5%9C%B0%E5%A4%A7%E9%9A%A7%E9%81%93/</url>
      
        <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/images/2016-01-22/1.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-22/2.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-22/3.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-22/4.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-22/5.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-22/6.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2016-01-22/7.jpg" alt></div></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 随拍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随拍 </tag>
            
            <tag> 地大隧道 </tag>
            
            <tag> 涂鸦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi 2上安装OpenWrt系统</title>
      <link href="/2015/12/28/Raspberry-Pi-2%E4%B8%8A%E5%AE%89%E8%A3%85OpenWrt%E7%B3%BB%E7%BB%9F/"/>
      <url>/2015/12/28/Raspberry-Pi-2%E4%B8%8A%E5%AE%89%E8%A3%85OpenWrt%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>前一段时间根据导师的要求带着一波小学弟利用树莓派搭建Mesh Network，要求使用OpenWrt系统，商定好后方案后就放由学弟们自由发挥了，经过一段时间，迟迟没有进展，一直卡在刷系统的问题上，今天抽空看了一下，发现其实过程还是比较简单的，记录一下解决该问题的过程。</p><a id="more"></a><p>在先前的一段时间里，学弟们在解决这个问题时，无论在何种搜索引擎上搜索解决方案时，都会带上“树莓派/Raspberry Pi 安装OpenWrt[系统]”之类的，然而我今天并没有直接搜索该问题，而是搜索了关键词“OpenWrt”，很显然，排在第一位的一定是OpenWrt的官网，而这也正是我想要查看的，一款这么出名的路由器操作系统，官网应该有其详细的资料，抱着试一试的心态，果然在其官网的 <a href="http://wiki.openwrt.org/doc/start" target="_blank" rel="noopener">Document</a> 中找到了 <a href="http://wiki.openwrt.org/toh/start" target="_blank" rel="noopener">Table of Hardware</a> 这一项，搜索一下 “ras”，结果还真有对“Raspberry Pi”的硬件支持：</p><p><img src="/images/2015-12-28/raspberry_pi_support.jpg" alt></p><p>我使用的Raspberry Pi 2，查看了一下表中对应的 <a href="http://wiki.openwrt.org/toh/raspberry_pi_foundation/raspberry_pi" target="_blank" rel="noopener">详情页</a>，有很详细的介绍，包括对树莓派的介绍、支持的硬件版本、硬件详情、启动日志信息、安装和访问步骤等，根据官网的教程，记录一下刷OpenWrt系统的过程。</p><h2 id="下载对应版本的OpenWrt系统镜像"><a href="#下载对应版本的OpenWrt系统镜像" class="headerlink" title="下载对应版本的OpenWrt系统镜像"></a>下载对应版本的OpenWrt系统镜像</h2><p>在 <a href="http://wiki.openwrt.org/toh/raspberry_pi_foundation/raspberry_pi" target="_blank" rel="noopener">详情页</a> 的 <strong><em>Supported Versions</em></strong> 节中给出了对应版本的OpenWrt下载链接，点击进去查看，会发现有多个镜像文件可供下载:</p><p><img src="/images/2015-12-28/openwrt_for_download.jpg" alt></p><p>这个时候是不是不知道该下哪个？没关系，继续往下阅读，你会发现，上面会提示如果你不知道该下载哪个文件，你可以直接下载它建议的对应版本。</p><h2 id="将OpenWrt系统刷入SD卡"><a href="#将OpenWrt系统刷入SD卡" class="headerlink" title="将OpenWrt系统刷入SD卡"></a>将OpenWrt系统刷入SD卡</h2><p>下载完OpenWrt镜像后，接下来我们该做的就是如何把OpenWrt镜像写入SD卡，针对不同的操作系统有不同的方法。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>插入SD卡并且执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg</span><br></pre></td></tr></table></figure><p>查看最近的内核信息。、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lihui@Ubuntu-Dell:~$ dmesg</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpuset</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpu</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpuacct</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[24075.206342] scsi 7:0:0:0: Direct-Access     Generic- SD/MMC           1.00 PQ: 0 ANSI: 0 CCS</span><br><span class="line">[24075.206927] sd 7:0:0:0: Attached scsi generic sg2 <span class="built_in">type</span> 0</span><br><span class="line">[24075.750326] sd 7:0:0:0: [sdb] 30318592 512-byte logical blocks: (15.5 GB/14.4 GiB)</span><br><span class="line">[24075.751315] sd 7:0:0:0: [sdb] Write Protect is off</span><br><span class="line">[24075.751320] sd 7:0:0:0: [sdb] Mode Sense: 03 00 00 00</span><br><span class="line">[24075.752438] sd 7:0:0:0: [sdb] No Caching mode page found</span><br><span class="line">[24075.752444] sd 7:0:0:0: [sdb] Assuming drive cache: write through</span><br><span class="line">[24075.756944] sd 7:0:0:0: [sdb] No Caching mode page found</span><br><span class="line">[24075.756952] sd 7:0:0:0: [sdb] Assuming drive cache: write through</span><br><span class="line">[24075.757845]  sdb: sdb1 sdb2</span><br><span class="line">[24075.761330] sd 7:0:0:0: [sdb] No Caching mode page found</span><br><span class="line">[24075.761339] sd 7:0:0:0: [sdb] Assuming drive cache: write through</span><br><span class="line">[24075.761344] sd 7:0:0:0: [sdb] Attached SCSI removable disk</span><br></pre></td></tr></table></figure><p>在最近的内核信息中，应该有一些包含类似于 <code>sdb</code> 或者 <code>sdf</code> 的信息，接下来就是以root用户将镜像文件写入到SD卡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/home/username/Downloads/openwrt-brcm2708-bcm2709-sdcard-vfat-ext4.img of=/dev/sdX bs=2M conv=fsync</span><br></pre></td></tr></table></figure><p>成功写入后会有提示信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihui@Ubuntu-Dell:~/Workspace$ sudo dd <span class="keyword">if</span>=/home/lihui/Workspace/openwrt-15.05-brcm2708-bcm2709-sdcard-vfat-ext4.img of=/dev/sdb bs=2M conv=fsync</span><br><span class="line">38+0 records <span class="keyword">in</span></span><br><span class="line">38+0 records out</span><br><span class="line">79691776 bytes (80 MB) copied, 9.39644 s, 8.5 MB/s</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在Windows操作系统中，直接使用 <a href="http://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">Win32DiskImager</a> 软件将OpenWrt镜像文件写入SD卡中即可。</p><h2 id="通过以太网连接到树莓派"><a href="#通过以太网连接到树莓派" class="headerlink" title="通过以太网连接到树莓派"></a>通过以太网连接到树莓派</h2><p>OpenWrt自带DHCH Client，但默认情况下是禁用的，IP地址为静态IP（192.168.1.1），我们可以通过telnet或者是http访问，第一次访问时会提示你设置密码：</p><p><img src="/images/2015-12-28/openwrt_admin_index.jpg" alt></p><p>设置完密码后我们就可以进入OpenWrt Web管理界面，在这里，我们可以查看并设置OpenWrt的一些信息：</p><p><img src="/images/2015-12-28/openwrt_admin_status.jpg" alt><br><img src="/images/2015-12-28/openwrt_admin_realtime.jpg" alt></p><p>到此，Raspberry Pi上安装OpenWrt系统就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> OpenWrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Raspberry Pi </tag>
            
            <tag> OpenWrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS X EI Capitan上配置Apache＋MySQL＋PHP环境</title>
      <link href="/2015/12/20/OS-X-EI-Capitan%E4%B8%8A%E9%85%8D%E7%BD%AEApache%EF%BC%8BMySQL%EF%BC%8BPHP%E7%8E%AF%E5%A2%83/"/>
      <url>/2015/12/20/OS-X-EI-Capitan%E4%B8%8A%E9%85%8D%E7%BD%AEApache%EF%BC%8BMySQL%EF%BC%8BPHP%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>前几天手残，一冲动就把Mac系统重装了，近两天刚忙完手中的事情，又恰逢星期天，所以就决定重新配置一下Mac上的LAMP环境，没想到的是，已经在Mac上配置过几次的东西，这次居然还是折腾了我好长时间，索性借这个机会把配置中遇到的问题记录下来，供以后参阅。</p><a id="more"></a><p>我的Mac上装的是OS X EI Capitan，版本：10.11.2。在Capitan中，自带的Apache的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:Blog lihui$ <span class="built_in">cd</span> ~</span><br><span class="line">lihuis-MacBook-Pro:~ lihui$ httpd -v</span><br><span class="line">Server version: Apache/2.4.16 (Unix)</span><br><span class="line">Server built:   Jul 31 2015 15:53:26</span><br></pre></td></tr></table></figure><p>自带的PHP版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:~ lihui$ php -v</span><br><span class="line">PHP 5.5.30 (cli) (built: Oct 23 2015 17:21:45) </span><br><span class="line">Copyright (c) 1997-2015 The PHP Group</span><br><span class="line">Zend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies</span><br></pre></td></tr></table></figure><p>按道理说，既然自带了Apache，那么配置起Apache应该是比较容易的，在网上找了很多教程，看似也都很简单，没有什么特别需要注意的地方，然而，轮到自己配置时，却说什么也出不来 <code>It Works.</code> ，急死个人！</p><h2 id="Apache配置"><a href="#Apache配置" class="headerlink" title="Apache配置"></a>Apache配置</h2><p>启动或者关闭或者重启Apache：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start/stop/restart</span><br></pre></td></tr></table></figure><p>按道理说，成功启动Apache后，我们可以通过 <code>http://localhost</code> 来访问本地的Web Server，然而，在浏览器中输入地址后，会出现无法访问的情况：</p><p>Safari浏览器中：<br><img src="/images/2015-12-20/error-safari.jpg" alt></p><p>Chrome浏览器中：<br><img src="/images/2015-12-20/error-chrome.jpg" alt></p><p>猜想是不是配置文件出问题了，于是进行测试，会报出以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:apache2 lihui$ apachectl configtest</span><br><span class="line">AH00526: Syntax error on line 20 of /private/etc/apache2/extra/httpd-mpm.conf:</span><br><span class="line">Invalid <span class="built_in">command</span> <span class="string">'LockFile'</span>, perhaps misspelled or defined by a module not included <span class="keyword">in</span> the server configuration</span><br></pre></td></tr></table></figure><p>将此问题丢在Google中搜索，找到了两种 <a href="http://apple.stackexchange.com/questions/211015/el-capitan-apache-error-message-ah00526" target="_blank" rel="noopener">解决方案</a>：</p><ul><li><p>将 <code>httpd-mpm.conf</code> 文件中的以下部分注释掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule !mpm_winnt_module&gt;</span><br><span class="line">&lt;IfModule !mpm_netware_module&gt;</span><br><span class="line">LockFile <span class="string">"/private/var/log/apache2/accept.lock"</span></span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>用同级目录下的 <code>httpd-mpm.conf~orig</code> 替换 <code>httpd-mpm.conf</code></p></li></ul><p>以上两种方法亲测，均可。</p><p>解决了以上问题后，我们便可以对Apache进行一些常规配置 <code>/private/etc/apache2/httpd.conf</code>:</p><p>添加PHP支持：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php5_module libexec/apache2/libphp5.so</span><br></pre></td></tr></table></figure></p><p>允许URL重写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module libexec/apache2/mod_rewrite.so</span><br></pre></td></tr></table></figure></p><p>Mac中Apache默认的根目录是 <code>/Library/WebServer/Documents</code>，如果我们需要改为自定义目录，则需要进行如下设置：</p><p>首先修改 <code>/private/etc/apache2/httpd.conf</code>，包含用户目录配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LoadModule userdir_module libexec/apache2/mod_userdir.so</span><br><span class="line"> </span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">Include /private/etc/apache2/extra/httpd-userdir.conf</span><br></pre></td></tr></table></figure></p><p>然后修改 <code>/private/etc/apache2/extra/httpd-userdir.conf</code> ，解除 <code>Include /private/etc/apache2/users/*.conf</code> 的注释。</p><p>最后，在users文件夹中新建一个 <code>username.conf</code> ，包含以下内容即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory <span class="string">"/Users/lihui/Sites/"</span>&gt;</span><br><span class="line">    Options Indexes MultiViews</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p><p>其中 <code>/Users/lihui/Sites</code> 就是你自定义的目录，重启Apache，我们既可以通过 <code>http://localhost／~username</code> 的形式访问自定义根目录下的网站了。</p><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><p>首先去官网下载对应版本的MySQL安装文件，<strong><em>注意：如果是5.7以后的版本，在安装快结束时会生成一个临时密码，供第一次登录时使用</em></strong>。<br>安装完成后，我们在终端中使用 <code>mysql -uroot -p</code> 登陆，会提示无法识别 <code>mysql</code> 命令，这是因为我们没有给mysql添加环境变量，通过在 <code>/etc/bashrc</code> 文件的最后添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br></pre></td></tr></table></figure><p>可以解决此问题，然后我们就可以用安装过程中生成的临时密码登陆mysql了，可以使用以下方法修改 root 用户密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">UPDATE user SET authentication_string = PASSWORD(<span class="string">"root"</span>) <span class="built_in">where</span> user = <span class="string">"root"</span>;</span><br></pre></td></tr></table></figure><p>退出并重启MySQL后就可以使用新的密码登录MySQL了。</p><p>到此，Capitan中配置LAMP环境就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> LAMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Apache </tag>
            
            <tag> Capitan </tag>
            
            <tag> PHP </tag>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《城南旧事》</title>
      <link href="/2015/12/09/%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B/"/>
      <url>/2015/12/09/%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>前一个星期刚从“果爷”那拿了几本书，放到现在，一直还没来得及看。其中一本为《城南旧事》，之所以选择从这本书开始看是因为拿的那几本书中，貌似我只对这本书的作者——林海音有印象，哈哈……</p><p>我手中的这本《城南旧事》是一本林海音精选集，除了包含《城南旧事》，还包含《婚姻的故事》、《金鲤鱼的裥裙》、《烛》、《琼君》四篇小说和《窃读记》等13篇散文。昨晚在实验室看了一部分，觉得写的挺好，所以尽管今天是准备在图书馆复习全天数学的，还是把它带在了身边。白天看了一整天的数学，晚饭过后，捧起这本书兴致勃勃地看了起来，不得不说，林老师的这本书确实写得不错，无论是内容还是故事情节，都安排的恰到好处，尤其是整本书的叙述手法，给人一种身临其境的感觉。</p><a id="more"></a><p>《城南旧事》中，以“小英子”这一儿童的口吻，叙述了她所经历的一些充满童趣却能反映一些现实问题的事情，每读到一个故事情节，脑海中总能浮现书中所描述的场景，这或许就是本书这么吸引我的原因吧！阅读的过程中，处处都被“小英子”这位稚嫩儿童的善良与天真所打动，与幼稚相反的是，”小英子“身上散发的是一种触及心灵的正能量，“人之初，性本善”，无论是作者刻意为之，还是自然流露，我觉得都是难能可贵的！</p><p>随着英子的长大，她也面临着婚姻问题——那个时代的诟病，虽然相比他人而言，她的婚姻是相对幸运的，但英子对他人婚姻的不幸也都铭记在心，通过她的眼睛，我们看到了那个时代，不幸婚姻对女性的摧残和打击。很难想象和体会，那个时代处于不幸婚姻下的女性是如何隐忍于不幸婚姻之下，凄凉悲惨地度过余生。也许，只有处于那个时代，才会体会到那种痛楚，亦或许，我们只是以今天的观点来揣摩处于那个时代的她们的感受，而她们自己根本就没有这种感受呢！时代在变化，观念在更新，我只能说，处于那个时代下她们是不幸的，至于她们痛不痛苦，只有她们自己知道……</p>]]></content>
      
      
      <categories>
          
          <category> 课外阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 林海音 </tag>
            
            <tag> 英子 </tag>
            
            <tag> 《城南旧事》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook入门</title>
      <link href="/2015/12/07/GitBook%E5%85%A5%E9%97%A8/"/>
      <url>/2015/12/07/GitBook%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>在2014年的某一天，我无意间接触到GitBook，一下子就被这个神奇的工具吸引住了，于是便下载下来安装体验了一把，当时并没有写博客的习惯，以致后来冷落了她一段时间。如今，随时记录学习情况的习惯正在慢慢培养，恰又迷上OS X平台，外加Sublime Text编辑神器的助攻，GitBook便有幸复宠。</p><p>本书既是一本在回顾GitBook使用方法的学习笔记，也是一本关于GitBook使用的简明教程，希望可以给各位刚接触GitBook的筒子们一些帮助。 </p><p>先来看一下效果：<a href="/start-gitbook">GitBook 入门</a></p><a id="more"></a><h2 id="GitBook简介"><a href="#GitBook简介" class="headerlink" title="GitBook简介"></a>GitBook简介</h2><p>GitBook  是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。</p><p>GitBook支持输出多种文档格式：</p><ul><li>静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；</li><li>PDF：需要安装gitbook-pdf依赖；</li><li>eBook：需要安装ebook-convert；</li><li>单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程；</li><li>JSON：一般用于电子书的调试或元数据提取。<br>使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md 。</li></ul><p>—— 以上内容来自百度百科</p><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p>安装 Node.js 的最佳方式是使用 nvm。</p><p>cURL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install 4</span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><h3 id="GitBook安装"><a href="#GitBook安装" class="headerlink" title="GitBook安装"></a>GitBook安装</h3><p>GitBook的安装方式有多种，你既可以选择使用npm方式安装，仅仅安装gitbook的相关功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>再配上一个自己喜欢的Markdown编辑器(这里我使用的是Sublime Text):</p><p><img src="/images/2015-12-07/sublime_text.jpg" alt></p><p>也可以选择去 <a href="https://www.gitbook.com" target="_blank" rel="noopener">官网</a> 下载对应平台的编辑器（包含GitBook和Markdown编辑器）：</p><p><img src="/images/2015-12-07/preview_osx.jpg" alt></p><p>官网下载的编辑器带有类似于Macdown一样的实时预览功能。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>跟其他的Linux命令一样，我们可以使用 <code>命令 -h</code> 的形式查看命令的使用信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:GitBook lihui$ gitbook -h</span><br><span class="line"></span><br><span class="line">  Usage: gitbook [options] [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Commands:</span><br><span class="line"></span><br><span class="line">    versions                          list installed versions</span><br><span class="line">    versions:<span class="built_in">print</span>                    <span class="built_in">print</span> current version to use <span class="keyword">in</span> the current directory</span><br><span class="line">    versions:available                list available versions on NPM</span><br><span class="line">    versions:install [version]        force install a specific version of gitbook</span><br><span class="line">    versions:link [folder] [version]  link a version to a <span class="built_in">local</span> folder</span><br><span class="line">    versions:uninstall [version]      uninstall a specific version of gitbook</span><br><span class="line">    versions:update [tag]             update to the latest version of gitbook</span><br><span class="line">    <span class="built_in">help</span>                              list commands <span class="keyword">for</span> a specific version of gitbook</span><br><span class="line">    *                                 run a <span class="built_in">command</span> with a specific gitbook version</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --<span class="built_in">help</span>               output usage information</span><br><span class="line">    -V, --version            output the version number</span><br><span class="line">    -v, --gitbook [version]  specify GitBook version to use</span><br><span class="line">    -d, --debug              <span class="built_in">enable</span> verbose error</span><br></pre></td></tr></table></figure><p>从输出的信息，我们可以看到，使用命令 <code>gitbook help</code> 可以查看GitBook所有的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:GitBook lihui$ gitbook <span class="built_in">help</span></span><br><span class="line">  build [book] [output]      build a book</span><br><span class="line">    --format     Format to build to (Default is website; Values are website, json, ebook)</span><br><span class="line">    --<span class="built_in">log</span>    Minimum <span class="built_in">log</span> level to display (Default is info; Values are debug, info, warn, error, disabled)</span><br><span class="line"></span><br><span class="line">  pdf [book] [output]    build a book to pdf</span><br><span class="line">    --<span class="built_in">log</span>    Minimum <span class="built_in">log</span> level to display (Default is info; Values are debug, info, warn, error, disabled)</span><br><span class="line"></span><br><span class="line">  epub [book] [output]   build a book to epub</span><br><span class="line">    --<span class="built_in">log</span>    Minimum <span class="built_in">log</span> level to display (Default is info; Values are debug, info, warn, error, disabled)</span><br><span class="line"></span><br><span class="line">  mobi [book] [output]   build a book to mobi</span><br><span class="line">    --<span class="built_in">log</span>    Minimum <span class="built_in">log</span> level to display (Default is info; Values are debug, info, warn, error, disabled)</span><br><span class="line"></span><br><span class="line">  serve [book]   Build <span class="keyword">then</span> serve a gitbook from a directory</span><br><span class="line">    --port   Port <span class="keyword">for</span> server to listen on (Default is 4000)</span><br><span class="line">    --lrport     Port <span class="keyword">for</span> livereload server to listen on (Default is 35729)</span><br><span class="line">    --watch      Enable/<span class="built_in">disable</span> file watcher (Default is <span class="literal">true</span>)</span><br><span class="line">    --format     Format to build to (Default is website; Values are website, json, ebook)</span><br><span class="line">    --<span class="built_in">log</span>    Minimum <span class="built_in">log</span> level to display (Default is info; Values are debug, info, warn, error, disabled)</span><br><span class="line"></span><br><span class="line">  install [book]     install plugins dependencies</span><br><span class="line"></span><br><span class="line">  init [directory]   create files and folders based on contents of SUMMARY.md</span><br></pre></td></tr></table></figure><p>可以看到，GitBook的命令并不多，使用起来还是比较简单的。</p><h2 id="编写图书项目结构"><a href="#编写图书项目结构" class="headerlink" title="编写图书项目结构"></a>编写图书项目结构</h2><h3 id="图书项目结构"><a href="#图书项目结构" class="headerlink" title="图书项目结构"></a>图书项目结构</h3><p>一个图书项目根目录下包含以下文件：</p><ul><li><strong>README.md:</strong> REAME相当于书籍的前言部分</li><li><strong>SUMMARY.md:</strong> SUMMARY是最重要的一个部分, 它创建的是整书的索引, 你也可以通过gitbook init读取SUMMARY.md来生成目录结构</li><li><strong>LANGS.md:</strong> 当你需要发布多个语言版本时，根目录需要放置一个LANGS.md</li><li><strong>GLOSSARY.md:</strong> List of terms with descriptions</li><li><strong>book.json:</strong> 图书项目的配置文件</li></ul><p>其中，<strong>README.md:</strong> 文件和 <strong>SUMMARY.md:</strong> 文件是一个图书项目中必须有的，其他的文件可以根据需要自行添加。那么，新建一个简单的图书项目后，目录结构大概如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:how_to_start_gitbook lihui$ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">└── SUMMARY.md</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><h3 id="初始化图书项目"><a href="#初始化图书项目" class="headerlink" title="初始化图书项目"></a>初始化图书项目</h3><p>在完成一个基本的图书项目结构的创建后，我们需要在 <strong>SUMMARY.md</strong> 文件中录入我们所要编写的图书的目录结构信息，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* [GitBook简介](Chapter-1/README.md)</span><br><span class="line">* 基本安装</span><br><span class="line">    * [Node.js安装](Chapter-2/node.js_install.md)</span><br><span class="line">    * [GitBook安装](Chapter-2/gitbook_install.md)</span><br><span class="line">    * [基本命令](Chapter-2/gitbook_command.md)</span><br><span class="line">* 编写图书项目结构</span><br><span class="line">    * [图书项目结构](Chapter-3/book_format.md)</span><br><span class="line">    * [初始化图书项目](Chapter-3/project_init.md)</span><br><span class="line">    * [生成与发布](Chapter-3/generate_and_post.md)</span><br></pre></td></tr></table></figure><p>保存后，使用命令 <code>gitbook init</code> 初始化我们的图书项目，这时GitBook会根据我们的目录结构信息生成所对应的目录和文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">lihuis-MacBook-Pro:how_to_start_gitbook lihui$ tree</span><br><span class="line">.</span><br><span class="line">├── Chapter-1</span><br><span class="line">│   └── README.md</span><br><span class="line">├── Chapter-2</span><br><span class="line">│   ├── gitbook_command.md</span><br><span class="line">│   ├── gitbook_install.md</span><br><span class="line">│   ├── node.js.png</span><br><span class="line">│   ├── node.js_install.md</span><br><span class="line">│   ├── preview_osx.jpg</span><br><span class="line">│   └── sublime_text.png</span><br><span class="line">├── Chapter-3</span><br><span class="line">│   ├── book_format.md</span><br><span class="line">│   ├── generate_and_post.md</span><br><span class="line">│   └── project_init.md</span><br><span class="line">├── README.md</span><br><span class="line">├── SUMMARY.md</span><br><span class="line">├── _book</span><br><span class="line">│   ├── Chapter-1</span><br><span class="line">│   │   └── index.html</span><br><span class="line">│   ├── Chapter-2</span><br><span class="line">│   │   ├── gitbook_command.html</span><br><span class="line">│   │   ├── gitbook_install.html</span><br><span class="line">│   │   ├── node.js.png</span><br><span class="line">│   │   ├── node.js_install.html</span><br><span class="line">│   │   ├── preview_osx.jpg</span><br><span class="line">│   │   └── sublime_text.png</span><br><span class="line">│   ├── Chapter-3</span><br><span class="line">│   │   ├── book_format.html</span><br><span class="line">│   │   ├── generate_and_post.html</span><br><span class="line">│   │   └── project_init.html</span><br><span class="line">│   ├── gitbook</span><br><span class="line">│   │   ├── app.js</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   └── fontawesome</span><br><span class="line">│   │   │       ├── FontAwesome.otf</span><br><span class="line">│   │   │       ├── fontawesome-webfont.eot</span><br><span class="line">│   │   │       ├── fontawesome-webfont.svg</span><br><span class="line">│   │   │       ├── fontawesome-webfont.ttf</span><br><span class="line">│   │   │       └── fontawesome-webfont.woff</span><br><span class="line">│   │   ├── images</span><br><span class="line">│   │   │   ├── apple-touch-icon-precomposed-152.png</span><br><span class="line">│   │   │   └── favicon.ico</span><br><span class="line">│   │   ├── plugins</span><br><span class="line">│   │   │   ├── gitbook-plugin-fontsettings</span><br><span class="line">│   │   │   │   ├── buttons.js</span><br><span class="line">│   │   │   │   └── website.css</span><br><span class="line">│   │   │   ├── gitbook-plugin-highlight</span><br><span class="line">│   │   │   │   ├── ebook.css</span><br><span class="line">│   │   │   │   └── website.css</span><br><span class="line">│   │   │   ├── gitbook-plugin-livereload</span><br><span class="line">│   │   │   │   └── plugin.js</span><br><span class="line">│   │   │   ├── gitbook-plugin-search</span><br><span class="line">│   │   │   │   ├── lunr.min.js</span><br><span class="line">│   │   │   │   ├── search.css</span><br><span class="line">│   │   │   │   └── search.js</span><br><span class="line">│   │   │   └── gitbook-plugin-sharing</span><br><span class="line">│   │   │       └── buttons.js</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── search_index.json</span><br><span class="line">└── book.json</span><br><span class="line"></span><br><span class="line">17 directories, 43 files</span><br></pre></td></tr></table></figure><p>随后，我们就可以在对应章节的对应文件中编写对应的内容了。</p><h3 id="生成与发布"><a href="#生成与发布" class="headerlink" title="生成与发布"></a>生成与发布</h3><p>完成对应章节内容的便携后，我们可以使用gitbook提供的几个命令生成对应格式的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">build [options] [source_dir] 编译指定目录，输出Web格式(_book文件夹中)</span><br><span class="line">serve [options] [source_dir] 监听文件变化并编译指定目录，同时会创建一个服务器用于预览Web</span><br><span class="line">pdf [options] [source_dir] 编译指定目录，输出PDF</span><br><span class="line">epub [options] [source_dir] 编译指定目录，输出epub</span><br><span class="line">mobi [options] [source_dir] 编译指定目录，输出mobi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 在线手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言函数指针</title>
      <link href="/2015/11/18/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
      <url>/2015/11/18/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>指针是C语言的一大特色，也是其学习过程中的一大难点，在一般的编程中，我们见得最多的就是常见数据类型的指针变量，包括基本数据类型和复合数据类型，而针对于函数指针的编程则显得少之又少，不过，少见并不代表其不重要，利用好它将有助于我们在复杂的项目中大大提高代码的复用率，下面我们来一起学习函数指针的最基本使用方法。</p><a id="more"></a><h2 id="Hello-World-与函数指针"><a href="#Hello-World-与函数指针" class="headerlink" title="Hello World 与函数指针"></a>Hello World 与函数指针</h2><p>和学习其他编程语言一样，我们将从最简单的 Hello World 程序来学习函数指针的使用方法。在 C 语言中，我们通常会使用一下的方式来输出一个 Hello World ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建了一个返回值为 <code>void</code> 类型、参数为空的函数 <code>sayHello</code>，使用C语言标准输出函数 <code>printf</code> 打印出 <code>Hello World!</code>，在主函数中，我们直接通过函数名调用该函数打印出 <code>Hello World!</code>。下面，我们将创建一个最简单的函数指针来实现同样的功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> (* ptr)() = sayHello;</span><br><span class="line"></span><br><span class="line">        ptr();</span><br><span class="line">        (*ptr)();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看一看程序执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o hello hello.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./hello</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>可以看到，和通过函数名调用函数一样，通过函数指针调用函数的两种方式同样打印出了 <code>Hello World!</code> ，我们来分析一下这个过程是如何实现的：</p><ul><li>首先，我们通过 <code>void (* ptr)() = sayHello</code> 的方式定义了一个函数指针，并将函数 <code>sayHello</code> 的地址赋给它，这里，我们需要注意的是，<code>void</code> 代表函数指针所指向函数的返回值类型，函数名代表的是函数地址，这和数组名代表数组地址是一样的；</li><li><code>(* ptr)</code> 表示一个指向函数的指针，一定要用括号括起来，否则就变成了 <code>void * ptr()</code>，这表示一个返回值类型为 <code>void</code> 的函数，而非函数指针；</li><li><code>(* ptr)</code> 后的 <code>()</code> 则是函数指针所指向函数的参数列表，这里 <code>sayHello</code> 函数的参数列表为空；</li><li>在定义完函数指针后，我们通过两种方式来调用函数指针所指向的函数，分别是： <code>ptr()</code> 和 <code>(* ptr)()</code>，这两种调用方式的结果是一样的；</li></ul><p>由以上分析可以，通过 <code>void (* ptr)()</code>，我们实际上定义了一个指向参数列表为空，返回值类型为 <code>void</code> 的函数指针 <code>ptr</code>。通过 <code>ptr()</code> 或者是 <code>(* ptr)()</code>，我们可以调用函数指针 <code>ptr</code> 所指向的函数。</p><h2 id="带参数的函数指针"><a href="#带参数的函数指针" class="headerlink" title="带参数的函数指针"></a>带参数的函数指针</h2><p>我们不妨改进一下上面的 <code>Hello World</code> 程序，使其可以动态的输出调用者的名字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">char</span> *author)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Hello World! By %s.\n"</span>, author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sayHello(<span class="string">"Hui Li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，我们将上面带参数的 <code>Hello World</code> 程序改为通过函数指针的方式执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">char</span> *author)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Hello World! By %s.\n"</span>, author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sayHello(<span class="string">"Hui Li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> (* ptr)(<span class="keyword">char</span> *) = sayHello;</span><br><span class="line"></span><br><span class="line">        ptr(<span class="string">"Hui Li"</span>);</span><br><span class="line">        (*ptr)(<span class="string">"Hui Li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下程序执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o hello hello.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./hello</span><br><span class="line">Hello World! By Hui Li.</span><br><span class="line">Hello World! By Hui Li.</span><br><span class="line">Hello World! By Hui Li.</span><br></pre></td></tr></table></figure><p>和预期一样，函数依然正确执行。和不带参数列表的函数指针不同，指向带参函数的指针在定义时必须定义与所指函数参数列表一致的参数列表，这样才能保证我们可以通过函数指针来正确调用其所指的函数。</p><h2 id="带参数列表和返回值类型的函数指针"><a href="#带参数列表和返回值类型的函数指针" class="headerlink" title="带参数列表和返回值类型的函数指针"></a>带参数列表和返回值类型的函数指针</h2><p>现在，我们来写一个既带参数，又有返回值的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, <span class="number">3</span>, <span class="number">5</span>, sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将其修改为函数指针来执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, <span class="number">3</span>, <span class="number">5</span>, sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> (* ptr)(<span class="keyword">int</span>, <span class="keyword">int</span>) = add;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum_1 = ptr(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, <span class="number">3</span>, <span class="number">5</span>, sum_1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum_2 = (*ptr)(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, <span class="number">3</span>, <span class="number">5</span>, sum_2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o add add.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./add</span><br><span class="line">3 + 5 = 8</span><br><span class="line">3 + 5 = 8</span><br><span class="line">3 + 5 = 8</span><br></pre></td></tr></table></figure><p>和前面部分一样，函数执行结果依然没有问题。所以，我们只要理解函数指针的基本使用方式，无论再复杂的函数指针调用问题，我们都可以轻松解决。</p><p><strong>函数指针基本定义形式：函数返回值类型 (* 指针变量)(函数参数列表) ＝ 函数地址</strong></p><h2 id="函数指针作为参数调用不同的函数"><a href="#函数指针作为参数调用不同的函数" class="headerlink" title="函数指针作为参数调用不同的函数"></a>函数指针作为参数调用不同的函数</h2><p>接下来，我们将通过一个例子来学习如何通过函数指针来调用不同的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">domath</span><span class="params">(<span class="keyword">int</span> (* fun_name)(<span class="keyword">int</span>, <span class="keyword">int</span>), <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun_name(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a + b = %d\n"</span>, domath(add, a, b));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a - b = %d\n"</span>, domath(subtract, a, b));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们首先定义了两个函数 <code>int add(int, int)</code> 、 <code>int subtract(int, int)</code>，分别执行两个整数的加法与减法操作，接着定义了一个 <code>int domath(int (* fun_name)(int, int), int, int)</code> 函数，根据函数指针所指向的函数执行相关的操作。可以看到，<code>domath</code> 函数参数中，有一个指向带两个整形参数并且返回值为整形的函数的指针，而函数 <code>int add(int, int)</code> 和函数 <code>int subtract(int, int)</code> 恰好满足此特征，故通过函数名来分别调用这两种不同的方法是再好不过的了，<code>domath</code> 函数刚好实现了这一功能。</p><p>函数指针的这种灵活性在Linux内核的代码中得到充分体现，这种编码方式在Linux内核中比较常见，下面一段截取于 <code>include/linux/netlink.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">netlink_dump_control</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> (*dump)(struct sk_buff *skb, struct netlink_callback *);</span><br><span class="line">    <span class="keyword">int</span> (*done)(struct netlink_callback *);</span><br><span class="line">    <span class="keyword">void</span> *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">module</span>;</span></span><br><span class="line">    u16 min_dump_alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>到此，我们对函数指针的学习就告一段落了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 函数指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神农架风景</title>
      <link href="/2015/11/18/%E7%A5%9E%E5%86%9C%E6%9E%B6%E9%A3%8E%E6%99%AF/"/>
      <url>/2015/11/18/%E7%A5%9E%E5%86%9C%E6%9E%B6%E9%A3%8E%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/images/2015-11-18/1.jpg" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2015-11-18/2.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2015-11-18/3.jpg" alt></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/2015-11-18/5.jpg" alt></div></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 看世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神农架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的指针问题</title>
      <link href="/2015/10/28/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/"/>
      <url>/2015/10/28/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在 <a href="http://denniskubes.com/2014/08/11/interesting-pointer-puzzle/" target="_blank" rel="noopener">网上</a> 看到一个关于C中指针数组（其实关于指针数组和数组指针的叫法因人而异，在我的理解中，指针数组是指一个存储指针的数组，而数组指针则是指向数组的指针）的有趣问题，乍一看，觉得作者讲的好高深，有一种似懂非懂的感觉，仔细分析，其实就是一个指针数组的问题。</p><a id="more"></a><p>先来看一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t%d\t%d\t%d\t%d\n"</span>, *a, *a + <span class="number">1</span>, *a + <span class="number">2</span>, *a + <span class="number">3</span>, *a + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这，有人就会说，这段代码有错误吧，编译都通不过！Windows环境下一般会是这样，不过在Linux环境下确实可以通过的，只不过会有一大串的警告而已，原因就是使用的编译器不同。下面我们步入正题，看看这段代码输出的结果会是什么。</p><p>可能有部分程序员一看便会觉得输出的结果会是：<code>0    2    4    6    8</code>，然而程序正真的运行时结果并非如此：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o bad bad.c</span><br><span class="line">bad.c:5:20: warning: incompatible <span class="built_in">integer</span> to pointer conversion initializing <span class="string">'int *'</span> with an</span><br><span class="line">      expression of <span class="built_in">type</span> <span class="string">'int'</span> [-Wint-conversion]</span><br><span class="line">    int *a[] = &#123;0, 1, 2, 3, 4&#125;;</span><br><span class="line">                   ^</span><br><span class="line">...</span><br><span class="line">                   </span><br><span class="line">bad.c:7:36: warning: format specifies <span class="built_in">type</span> <span class="string">'int'</span> but the argument has <span class="built_in">type</span> <span class="string">'int *'</span> [-Wformat]</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t%d\t%d\t%d\t%d\n"</span>, *a, *a + 1, *a + 2, *a + 3, *a + 4);</span><br><span class="line">            ~~                     ^~</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">9 warnings generated.</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./bad</span><br><span class="line">0481216</span><br></pre></td></tr></table></figure><p>我们来看看为什么会是这样。</p><p>首先，在定义时，由于操作符优先级关系，<code>[]</code>首先与<code>a</code>集合，组成数组<code>a</code>，<code>int *</code>用于修饰数组<code>a</code>，形成一个指针数组，数组的值依次为<code>0</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>，请注意，这时<strong><em><code>0</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>虽然是整型数据，但代表却是地址</em></strong>。在打印时，代码依然有些混淆视听，采用<code>%d</code>的格式输出，让很多人以为输出的是整型数据。从前面的分析知，<code>a</code>是数组，那么<code>a</code>代表的就是数组首地址，<code>\*a</code>是数组中第一个元素的值，由于操作符优先级关系，<code>*</code>先与<code>a</code>集合，再执行加法，于是后续的输出的结果一次在<code>*a</code>的值上加<code>1</code>，<strong>请注意，这时<code>*a</code>的值虽然是<code>1</code>，但它却代表的是一个整型数据的地址，所以执行加法时自然加上的是整型数据所占子节的整数倍</strong>，结果自然是<code>0</code>、<code>4</code>、<code>8</code>、<code>12</code>、<code>16</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> 指针数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言函数可变参数列表</title>
      <link href="/2015/10/27/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/"/>
      <url>/2015/10/27/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>C语言中，函数的可变参数列表通过三个宏定义(<code>va_start</code>、<code>va_arg</code>、<code>va_end</code>、<code>va_copy</code>)和一个类型(<code>va_list</code>)来实现，用户可以根据需要向函数传递个数不同、类型不同的参数，使用之前必须包含<code>stdarg.h</code>头文件。</p><a id="more"></a><p><strong>void va_start(va_list ap, last)</strong></p><p><code>va_start</code>初始化被<code>va_arg</code>和<code>va_end</code>使用的<code>ap</code>，必须首先被调用。其中，<code>last</code>是可变参数列表之前的最后一个参数，参数之间用逗号隔开。</p><p><strong>type va_arg(va_list ap, type)</strong></p><p><code>va_arg</code>用于获取参数列表中的参数，每获取一个参数后，参数列表的指针将指向下一个参数位置，其中，<code>type</code>用于指定获取参数的类型。</p><p><strong>void va_end(va_list ap)</strong></p><p>在同一个函数中，每一个<code>va_start</code>的调用必须以一个<code>va_end</code>结束，在调用<code>va_end</code>后，<code>ap</code>将被置为未定义。</p><p><strong>void va_copy(va_list dest, va_list src)</strong></p><p><code>va_copy</code>用于复制初始化过的<code>va_list</code>到目的参数列表<code>dest</code>，这就相当于使用<code>va_start</code>去初始化具有相同参数列表的<code>dest</code>，接下来就是使用<code>va_arg</code>获取每一个参数的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">va_list aq;</span><br><span class="line">va_copy(aq, ap);</span><br><span class="line"> ...</span><br><span class="line">va_end(aq);</span><br></pre></td></tr></table></figure><p>示例一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">char</span> c, *s;</span><br><span class="line"></span><br><span class="line">    va_start(ap, fmt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*fmt)</span><br><span class="line">        <span class="keyword">switch</span> (*fmt++) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span>:              <span class="comment">/* string */</span></span><br><span class="line">            s = va_arg(ap, <span class="keyword">char</span> *);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"string %s\n"</span>, s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:              <span class="comment">/* int */</span></span><br><span class="line">            d = va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"int %d\n"</span>, d);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>:              <span class="comment">/* char */</span></span><br><span class="line">            <span class="comment">/* need a cast here since va_arg only</span></span><br><span class="line"><span class="comment">               takes fully promoted types */</span></span><br><span class="line">            c = (<span class="keyword">char</span>) va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"char %c\n"</span>, c);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    va_end(ap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo(<span class="string">"sdc"</span>, <span class="string">"sdc"</span>, <span class="number">100</span>, <span class="string">'C'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o stdarg stdarg.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./stdarg</span><br><span class="line">string sdc</span><br><span class="line">int 100</span><br><span class="line">char C</span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">int</span> num, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    va_list <span class="built_in">list</span>;</span><br><span class="line">    va_start(<span class="built_in">list</span>, num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; num; i++)&#123;</span><br><span class="line">        sum += (<span class="keyword">float</span>)va_arg(<span class="built_in">list</span>, <span class="keyword">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum/num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> result = average(<span class="number">7</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">214</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="number">272</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o stdarg_1 stdarg_1.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./stdarg_1</span><br><span class="line">78.142860</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://man7.org/linux/man-pages/man3/stdarg.3.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man3/stdarg.3.html</a><br><a href="http://blog.csdn.net/weiwangchao_/article/details/4857567" target="_blank" rel="noopener">http://blog.csdn.net/weiwangchao_/article/details/4857567</a><br><a href="http://stackoverflow.com/questions/28054194/char-type-in-va-arg" target="_blank" rel="noopener">http://stackoverflow.com/questions/28054194/char-type-in-va-arg</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 可变参数列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNU C常用扩展</title>
      <link href="/2015/10/25/GNU-C%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95/"/>
      <url>/2015/10/25/GNU-C%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<p>最近在修改Linux内核代码时发现根本就看不懂其中的语法，咨询周边同学无果后，就在网上各种论坛搜索，哎，还真被我找到了。</p><p>Linux内核代码大部分采用GNU C 标准编写，而 GNU C于标准C并不完全相同，它在标准C之上扩展了许多特性，其中很多特性都被运用到Linux内核的编码之中，要想阅读Linux内核代码，首先得对 GNU C 扩展有一定的了解，不然看Linux内核代码时，必定会有千万只“草泥马”在你脑子中奔腾……</p><a id="more"></a><h2 id="typeof关键字"><a href="#typeof关键字" class="headerlink" title="typeof关键字"></a>typeof关键字</h2><p>GNU C 中允许通过变量的引用识别变量的类型，这种操作我个人感觉是类似于C++中的泛性编程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    typeof(a) b = a;  <span class="comment">//也可以使用typeof(int)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of b is %d.\n"</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o typeof typeof.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./typeof</span><br><span class="line">The value of b is 10.</span><br></pre></td></tr></table></figure><h2 id="语句表达式"><a href="#语句表达式" class="headerlink" title="语句表达式"></a>语句表达式</h2><p>GNU C 中把包含在一个圆括号中的复合语句看成是一个表达式，称为语句表达式。一个语句表达式中可以包含循环、switch语句、局部变量等，并且可出现在任何表达式可以出现的地方。位于语句表达式中的最后一个复合语句必须以分号结束，它的值将作为整个语句表达式的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = (&#123;</span><br><span class="line">              <span class="keyword">int</span> b = <span class="number">1</span>, c = <span class="number">2</span>;</span><br><span class="line">              b + c;</span><br><span class="line">              b - c;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d.\n"</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o s<span class="_">-d</span>-expression s<span class="_">-d</span>-expression.c </span><br><span class="line">s<span class="_">-d</span>-expression.c:7:17: warning: expression result unused [-Wunused-value]</span><br><span class="line">              b + c;</span><br><span class="line">              ~ ^ ~</span><br><span class="line">1 warning generated.</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./s<span class="_">-d</span>-expression </span><br><span class="line">a = -1.</span><br></pre></td></tr></table></figure><p>在Linux内核中，通常将typeof和复合语句结合使用，构成一个泛性宏（见include/linux/kernel.h）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x, y) (&#123;                            \</span></span><br><span class="line">        typeof(x) _min1 = (x);                  \</span><br><span class="line">        typeof(y) _min2 = (y);                  \</span><br><span class="line">        (<span class="keyword">void</span>) (&amp;_min1 == &amp;_min2);              \</span><br><span class="line">        _min1 &lt; _min2 ? _min1 : _min2; &#125;)</span><br></pre></td></tr></table></figure><p>其中<code>(void) (&amp;_min1 == &amp;_min2)</code>是用来检查<code>_min1</code>和<code>_min2</code>类型是否一致。</p><h2 id="可变参数宏"><a href="#可变参数宏" class="headerlink" title="可变参数宏"></a>可变参数宏</h2><p>GNU C 中，宏可以接受可变数目的参数，就像函数一样（见include/linux/kernel.h）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __trace_printk_check_format(fmt, args...)                       \</span></span><br><span class="line"><span class="keyword">do</span> &#123;                                                                    \</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>)                                                          \</span><br><span class="line">                ____trace_printk_check_format(fmt, ##args);             \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>其中args表示其余的参数，可以为一个或者零个，多个参数时，参数之间采用逗号隔开，逗号和参数共同构成args的值。宏替换中采用## 是为了在零个参数时将##之前的逗号丢弃。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> my_printf(fmt, arg...)  printf(fmt, ##arg);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a, b, c;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">  c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  my_printf(<span class="string">"%d\t%d\t%d\n"</span>, a, b, c);</span><br><span class="line">  my_printf(<span class="string">"Hello world!\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o v-macro v_macro.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./v-macro</span><br><span class="line">123</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><h2 id="标号元素"><a href="#标号元素" class="headerlink" title="标号元素"></a>标号元素</h2><p>在标准C里，数组或结构变量的初始化值必须以固定的顺序出现，而在GCC中，通过指定索引或结构域名，则允许初始化值以任意顺序出现。</p><p>指定数组索引的方法是在初始化值前写”[INDEX] value”或者”[INDEX] =”，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[<span class="number">5</span>] = &#123;[<span class="number">2</span>] <span class="number">5</span>, [<span class="number">4</span>] <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><p>或者是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[<span class="number">5</span>] = &#123;[<span class="number">2</span>] = <span class="number">5</span>, [<span class="number">4</span>] = <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>这两种做法相当于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><p>还可以通过定义索引区间（[FIRST … LAST] =）的方式来将一系列的元素初始化为相同的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[<span class="number">10</span>] = &#123;[<span class="number">0.</span>.<span class="number">.9</span>]= <span class="number">1</span>, [<span class="number">10.</span>.<span class="number">.98</span>] = <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>这会将0至9号元素的值初始化为1，10至98号元素的值初始化为2，99号元素的值初始化为3。</p><p>在C语言中，如果你在初始化时已经指定了所有元素的值，那么你可以不指定数组的大小，数组的大小由你所初始化的元素的值的分数决定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;   <span class="comment">// 数组长度为5</span></span><br></pre></td></tr></table></figure><p>在GNU C 扩展中，也可以使用同样的方法，除此之外，在GNU扩展中，如果你初始化时指定了一个特定元素的值，数组的大小将由你初始化时指定的元素的最大索引值决定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[] = &#123;<span class="number">0</span>, <span class="number">1</span>, [<span class="number">99</span>] = <span class="number">2</span>&#125;;  <span class="comment">// 数组长度为100</span></span><br></pre></td></tr></table></figure><p>对于结构体类型的变量，C中常用的方法是按照成员的顺序依此给定初值，在 GNU C 中，我们可以通过结构域名指定成员的值，也可以不按照成员定义的顺序赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> *sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">info</span> <span class="title">student</span> = &#123;</span><span class="string">"Hui Li"</span>, <span class="number">23</span>, <span class="string">"man"</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">info</span> <span class="title">student_1</span> = &#123;</span></span><br><span class="line">        .name = <span class="string">"Zhang San"</span>,</span><br><span class="line">        .age = <span class="number">25</span>,</span><br><span class="line">        .sex = <span class="string">"man"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">info</span> <span class="title">student_2</span> = &#123;</span></span><br><span class="line">        .sex = <span class="string">"man"</span>,</span><br><span class="line">        .name = <span class="string">"Wang Wu"</span>,</span><br><span class="line">        .age = <span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"name: %s\t age: %d\t sex: %s\n"</span>, student.name, student.age, student.sex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"name: %s\t age: %d\t sex: %s\n"</span>, student_1.name, student_1.age, student_1.sex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"name: %s\t age: %d\t sex: %s\n"</span>, student_2.name, student_2.age, student_2.sex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o struct struct.c</span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./struct</span><br><span class="line">name: Hui Li age: 23 sex: man</span><br><span class="line">name: Zhang San age: 25 sex: man</span><br><span class="line">name: Wang Wu age: 20 sex: man</span><br></pre></td></tr></table></figure><h2 id="柔性数组"><a href="#柔性数组" class="headerlink" title="柔性数组"></a>柔性数组</h2><h3 id="零长度数组"><a href="#零长度数组" class="headerlink" title="零长度数组"></a>零长度数组</h3><p>在标准C语言中，数组的初始化必须指定数组的长度:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_array[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>作为 GNU C 的一个扩展，数组中的元素可以为0，长度为0的数组通常作为结构体的最后一个元素实际上是一个可变对象的指针，非常有用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">char</span> contents[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">line</span> *<span class="title">this_line</span> = (<span class="title">struct</span> <span class="title">line</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">line</span>) + <span class="title">this_length</span>);</span></span><br><span class="line">    this_line-&gt;length = this_length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组长度变量"><a href="#数组长度变量" class="headerlink" title="数组长度变量"></a>数组长度变量</h3><p>GNU C 扩展允许你使用一个变量申明一个数组的大小，而不仅仅是常量。例如在一个函数中，使用函数的参数作为数组大小申明一个数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_function</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> my_array[number];</span><br><span class="line">...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="case范围"><a href="#case范围" class="headerlink" title="case范围"></a>case范围</h2><p>在标准C中，<code>switch...case...</code>的常用方法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is 0.\n"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is 1.\n"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is 2.\n"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  defalut:</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Default case"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GNU对C的扩展中，单一的case下可以匹配一个数值区间(<code>case low ... high</code>)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span> ... <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is %d.\n"</span>, a);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">11</span> ... <span class="number">13</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value is between 11 and 13.\n"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  defalut:</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Default case"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法同样适合于字符类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'A'</span> ... <span class="string">'Z'</span>:</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The value of a is between 'A' and 'Z'."</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>...</code>与<code>low</code>和<code>high</code>之间的空格。</p><h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><p>在标准C中，我们可以使用<code>goto</code>使程序调到指定标记处执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> end_of_program;</span><br><span class="line">     ...</span><br><span class="line">end_of_program:</span><br></pre></td></tr></table></figure><p>在 GNU C 扩展中，我们除了可以使用这种方式之外，还可以跳转到<code>void *</code>类型的地址，为了正常工作，必须使用<code>&amp;&amp;</code>(而不是<code>&amp;</code>)获取一个标记的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Play &#123; ROCK=<span class="number">0</span>, PAPER=<span class="number">1</span>, SCISSORS=<span class="number">2</span> &#125;;</span><br><span class="line">     <span class="keyword">enum</span> Result &#123; WIN, LOSE, DRAW &#125;;</span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">enum</span> Result <span class="title">turn</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">const</span> jumptable[] = &#123;&amp;&amp;rock, &amp;&amp;paper, &amp;&amp;scissors&#125;; <span class="keyword">enum</span> Play opp; <span class="comment">/* opponent’s play */</span></span><br><span class="line"><span class="keyword">goto</span> *jumptable[select_option (&amp;opp)];</span><br><span class="line">      rock:</span><br><span class="line">       <span class="keyword">return</span> opp == ROCK ? DRAW : (opp == PAPER ? LOSE : WIN);</span><br><span class="line">      paper:</span><br><span class="line">       <span class="keyword">return</span> opp == ROCK ? WIN  : (opp == PAPER ? DRAW : LOSE);</span><br><span class="line">      scissors:</span><br><span class="line">       <span class="keyword">return</span> opp == ROCK ? LOSE : (opp == PAPER ? WIN  : DRAW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>在 GNU C 扩展中，我们可以在函数内定义新的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">factorial_helper</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> factorial_helper ((a - <span class="number">1</span>), (a * b));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> factorial_helper (x, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="当前函数名-FUNCTION"><a href="#当前函数名-FUNCTION" class="headerlink" title="当前函数名 __FUNCTION__"></a>当前函数名 __FUNCTION__</h2><p>GNU C 预定义了两个标志符保存当前函数的名字，<code>__FUNCTION__</code> 保存函数在源码中的名字，<code>__PRETTY_FUNCTION__</code> 保存带语言特色的名字。在 C 函数中，这两个名字是相同的，在 C++ 函数中，<code>__PRETTY_FUNCTION__</code> 包括函数返回类型等额外信息，Linux 内核只使用了 <code>__FUNCTION__</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_fun_name(name) printf(<span class="meta-string">"%s\n"</span>, name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get_fun_name(__FUNCTION__);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Learn lihui$ gcc -o <span class="keyword">function</span> function.c </span><br><span class="line">lihuideMacBook-Pro:Learn lihui$ ./<span class="keyword">function</span> </span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html" target="_blank" rel="noopener">http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html</a><br><a href="http://www.groad.net/bbs/thread-1035-1-1.html" target="_blank" rel="noopener">http://www.groad.net/bbs/thread-1035-1-1.html</a><br><a href="http://book.51cto.com/art/201007/213548.htm" target="_blank" rel="noopener">http://book.51cto.com/art/201007/213548.htm</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-gcc-hacks/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-gcc-hacks/</a><br><a href="http://blog.csdn.net/tigerjibo/article/details/8299557" target="_blank" rel="noopener">http://blog.csdn.net/tigerjibo/article/details/8299557</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GNU </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记－整理(2)</title>
      <link href="/2015/10/11/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8D%E6%95%B4%E7%90%86-2/"/>
      <url>/2015/10/11/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8D%E6%95%B4%E7%90%86-2/</url>
      
        <content type="html"><![CDATA[<p>无论是小的可怜的免费数据库空间还是大的电商网站，合理设计数据表结构、充分利用数据库空间都是必要的，这就要求我们对数据库所支持的数据库类型有充分的认识。MySQL中主要的数据类型包括：整型、日期时间类型、字符型、浮点型，下面来看看每种数据类型支持的具体类型和相应的存储范围。</p><a id="more"></a><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:center">无符号</th><th style="text-align:center">有符号</th></tr></thead><tbody><tr><td style="text-align:left">tinyint</td><td style="text-align:center"><math display="block"><mo>-128到127</mo><mo>(-</mo><msubsup><mi>2</mi> <mi></mi><mi>7</mi></msubsup> <mo>到</mo> <msubsup><mi>2</mi> <mi></mi><mi>7</mi></msubsup><mo>-1)</mo></math></td><td style="text-align:center"><math display="block"><mo>0到255</mo><mo>(</mo><mo>0 到</mo><msubsup><mi>2</mi><mi></mi><mi>8</mi></msubsup><mo>-1)</mo></math></td></tr><tr><td style="text-align:left">smallint</td><td style="text-align:center"><math display="block"><mo>-32768到32767</mo><mo>(-</mo><msubsup><mi>2</mi> <mi></mi><mi>15</mi></msubsup> <mo>到</mo> <msubsup><mi>2</mi> <mi></mi><mi>15</mi></msubsup><mo>-1)</mo></math></td><td style="text-align:center"><math display="block"><mo>0到65535</mo><mo>(</mo><mo>0 到</mo><msubsup><mi>2</mi><mi></mi><mi>16</mi></msubsup><mo>-1)</mo></math></td></tr><tr><td style="text-align:left">mediumint</td><td style="text-align:center"><math display="block"><mo>-</mo><msubsup><mi>2</mi> <mi></mi><mi>23</mi></msubsup> <mo>到</mo> <msubsup><mi>2</mi> <mi></mi><mi>23</mi></msubsup><mo>-1</mo></math></td><td style="text-align:center"><math display="block"><mo>0 到</mo><msubsup><mi>2</mi><mi></mi><mi>24</mi></msubsup><mo>-1</mo></math></td></tr><tr><td style="text-align:left">int</td><td style="text-align:center"><math display="block"><mo>-</mo><msubsup><mi>2</mi> <mi></mi><mi>31</mi></msubsup> <mo>到</mo> <msubsup><mi>2</mi> <mi></mi><mi>31</mi></msubsup><mo>-1</mo></math></td><td style="text-align:center"><math display="block"><mo>0 到 </mo><msubsup><mi>2</mi><mi></mi><mi>32</mi></msubsup><mo>-1</mo></math></td></tr><tr><td style="text-align:left">bigint</td><td style="text-align:center"><math display="block"><mo>-</mo><msubsup><mi>2</mi> <mi></mi><mi>63</mi></msubsup> <mo>到</mo> <msubsup><mi>2</mi> <mi></mi><mi>63</mi></msubsup><mo>-1</mo></math></td><td style="text-align:center"><math display="block"><mo>0 到 </mo><msubsup><mi>2</mi><mi></mi><mi>64</mi></msubsup><mo>-1</mo></math></td></tr></tbody></table><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><table><thead><tr><th>日期类型</th><th>存储空间</th><th>日期格式</th><th>日期范围</th></tr></thead><tbody><tr><td>datetime</td><td>8 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td></tr><tr><td>timestamp</td><td>4 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:01 ~ 2038</td></tr><tr><td>date</td><td>3 bytes</td><td>YYYY-MM-DD</td><td>1000-01-01          ~ 9999-12-31</td></tr><tr><td>year</td><td>1 bytes</td><td>YYYY</td><td>1901                ~ 2155</td></tr><tr><td>time</td><td>3 bytes</td><td>HH:MM:SS</td><td>-838:59:59          ~ 838:59:59</td></tr></tbody></table><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>char(m)</td><td>M个字节，0 &lt;= M &lt;= 255</td></tr><tr><td>varchar(m)</td><td>L + 1 个字节，其中 L &lt;= M 且 0 &lt;= M &lt;= 65535</td></tr><tr><td>tinytext</td><td><math display="block"><mo>L + 1个字节，其中 L &lt; </mo><msubsup><mi>2</mi><mi></mi><mi>8</mi></msubsup></math></td></tr><tr><td>text</td><td><math display="block"><mo>L + 2个字节，其中 L &lt; </mo><msubsup><mi>2</mi><mi></mi><mi>16</mi></msubsup></math></td></tr><tr><td>mediumtext</td><td><math display="block"><mo>L + 3个字节，其中 L &lt; </mo><msubsup><mi>2</mi><mi></mi><mi>24</mi></msubsup></math></td></tr><tr><td>longtext</td><td><math display="block"><mo>L + 4个字节，其中 L &lt; </mo><msubsup><mi>2</mi><mi></mi><mi>32</mi></msubsup></math></td></tr><tr><td>enum(‘value1’, ‘value2’…)</td><td>1或者2个字节，取决于枚举类型值的个数（最多65535个值）</td></tr><tr><td>set(‘value1’, ‘value2’…)</td><td>1、2、3、4或者8个8个字节，取决于set成员的数目（最多64个成员）</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>float(m, d)</td><td>-3.402823466E+38 到 -1.175494351E-38、0 和 1.175494351E-38 到 3.402823466E＋38  m时数字总位数，d是小数点后面的位数，如果m和d被省略，根据硬件允许的限制条件来保存值，单精度精确到小数点后大概7位小数</td></tr><tr><td>double[(m, d)]</td><td>基本同上</td></tr></tbody></table><h2 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] table_name (</span><br><span class="line">column_name data_type,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">age TINYINT UNSIGNED,</span><br><span class="line">sarary FLOAT(8,2) UNSIGNED</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查看数据表列表"><a href="#查看数据表列表" class="headerlink" title="查看数据表列表"></a>查看数据表列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES [FROM db_name] [LIKE <span class="string">'partern'</span> | WHERE expr];</span><br></pre></td></tr></table></figure><h3 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CLOUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] tbl_name [(col_name, ...)] VALUES (VAL, ...);</span><br></pre></td></tr></table></figure><p>如果省略 <code>col_name</code>则必须为所有的字段赋值。</p><h3 id="字段定义中常用关键字"><a href="#字段定义中常用关键字" class="headerlink" title="字段定义中常用关键字"></a>字段定义中常用关键字</h3><h4 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h4><p>自动编号，且必须与主键组合使用，默认情况下起始值为1，每次的增量为1。</p><h4 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h4><p>每张表只能有一个主键，保证纪录的唯一性，主键自动为 <code>NOT NULL</code>。</p><p><code>AUTO_INCREMENT</code> 必须与 <code>PRIMARY KEY</code> 一起使用，反之不然。</p><h4 id="UNIQUE-KEY"><a href="#UNIQUE-KEY" class="headerlink" title="UNIQUE KEY"></a>UNIQUE KEY</h4><p>唯一约束，可以保证记录的唯一性，可以为空值，每张表可以存在多个唯一约束。</p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="键约束的要求"><a href="#键约束的要求" class="headerlink" title="键约束的要求"></a>键约束的要求</h3><ol><li>父表和子表必须使用相同的存储引擎，并且禁止使用临时表；</li><li>数据表的存储引擎只能为InnoDB；</li><li>外键列和参照列必须具有相似的数据类型，其中数据的长度或者是否有符号位必须相同，而字符的长度可以不同；</li><li>外键列和参照列必须创建索引，如果外键不存在索引的话，MySQL将自动创建索引。</li></ol><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE provinces (</span><br><span class="line">  id SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  pname VARCHAR(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY(id)</span><br><span class="line">)ENGINE = InnoDB DEFAULT CHARSET = utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE users (</span><br><span class="line">  id SMALLINT(5) UNDSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  username VARCHAR(20) NOT NULL,</span><br><span class="line">  pid SMALLINT(5) UNSIGNED,</span><br><span class="line">  FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM tbl_name \G;</span><br></pre></td></tr></table></figure><h3 id="外键约束的参照条件"><a href="#外键约束的参照条件" class="headerlink" title="外键约束的参照条件"></a>外键约束的参照条件</h3><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>CASCADE</td><td>删除包含与已删除键值有参照关系的所有记录</td></tr><tr><td>SET NULL</td><td>修改包含与已删除键值有参照关系的所有记录，使用NULL值替换(只能用于已标记为NOT NULL的字段)</td></tr><tr><td>RESTRICT</td><td>拒绝删除要求，直到使用删除键值的辅助表被手工删除，并且没有参照时(这是默认设置，也是最安全的设置)</td></tr><tr><td>NO ACTION</td><td>啥也不做</td></tr></tbody></table><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">  id SMALLINT(5) UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  username VARCHAR(20) NOT NULL,</span><br><span class="line">  pid SMALLINT(5) UNSIGNED,</span><br><span class="line">  FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h2><h3 id="添加单列"><a href="#添加单列" class="headerlink" title="添加单列"></a>添加单列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure><p>如果没有<code>FIRST | AFTER col_name</code>，所添加的字段将会加在最后；如果使用了<code>FIRST | AFTER</code>而没有写<code>col_name</code>，则新添加的行会在最前或者是最后。</p><h3 id="添加多列"><a href="#添加多列" class="headerlink" title="添加多列"></a>添加多列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ADD [COLUMN] (col_name, column_definition, ...);</span><br></pre></td></tr></table></figure><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name DROP [COLUMN] col_name, DROP [COLUMN] col_name, ... ;</span><br></pre></td></tr></table></figure><p>允许删除的同时新增加列，这些操作之间用逗号分隔。</p><h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name, ...);</span><br></pre></td></tr></table></figure><h3 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY] [index_name] [index_type] (index_col_name, ...);</span><br></pre></td></tr></table></figure><h3 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name, ...) reference_definition;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE user ADD CONSTRAINT FROEIGN KEY (pid) REFERENCES provinces (id);</span><br></pre></td></tr></table></figure><h3 id="添加／删除默认约束"><a href="#添加／删除默认约束" class="headerlink" title="添加／删除默认约束"></a>添加／删除默认约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name  ALTER [COLUMN] col_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;;</span><br></pre></td></tr></table></figure><h3 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LATER TABLE tbl_name DROP PRIMARY KEY</span><br></pre></td></tr></table></figure><h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name DROP &#123;INDEX | KEY&#125; index_name;</span><br></pre></td></tr></table></figure><h3 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;</span><br></pre></td></tr></table></figure><h3 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure><h3 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure><h3 id="数据表更名"><a href="#数据表更名" class="headerlink" title="数据表更名"></a>数据表更名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name RENAME [TO | AS] new_tbl_name ;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE tbl_name TO new_tbl_name [, tbl_name TO new_tbl_name];</span><br></pre></td></tr></table></figure><p>为自动编号的列赋值时可以使用NULL或者DEFAULT，例如：<code>INSERT INTO user VALUES(NULL, &quot;Tom&quot;, 25, 0);</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记－整理(1)</title>
      <link href="/2015/10/11/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8D%E6%95%B4%E7%90%86-1/"/>
      <url>/2015/10/11/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8D%E6%95%B4%E7%90%86-1/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL语句规范"><a href="#MySQL语句规范" class="headerlink" title="MySQL语句规范"></a>MySQL语句规范</h2><ul><li>关键字与函数名称全部大些；</li><li>数据库名称、表名称、字段名称全部小写；</li><li>SQL语句必须以分号结尾。</li></ul><a id="more"></a><h2 id="登录与注销"><a href="#登录与注销" class="headerlink" title="登录与注销"></a>登录与注销</h2><h3 id="通过客户端链接"><a href="#通过客户端链接" class="headerlink" title="通过客户端链接"></a>通过客户端链接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --user 用户名 --password (密码)</span><br></pre></td></tr></table></figure><p>或者是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p(密码)</span><br></pre></td></tr></table></figure></p><h3 id="指定连接主机"><a href="#指定连接主机" class="headerlink" title="指定连接主机"></a>指定连接主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --host (主机地址) --user 用户名 --password (密码)</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h(主机地址) -u用户名 -p(密码)</span><br></pre></td></tr></table></figure></p><p>如果在<code>--password</code>或<code>-p</code>后直接书写密码，则密码会以明文的的形式显示，用<code>ps</code>查看进程时会看到密码，建议是在<code>Enter</code>键后再输入密码。</p><h3 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit/<span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：MySQL命令都是以<code>;</code>或者是<code>\g</code>结束。</p><h3 id="建立一个只能操作指定数据库的账号"><a href="#建立一个只能操作指定数据库的账号" class="headerlink" title="建立一个只能操作指定数据库的账号"></a>建立一个只能操作指定数据库的账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on 数据库名.* to <span class="string">"用户名"</span>@<span class="string">"localhost"</span> identified by <span class="string">"密码"</span>;</span><br></pre></td></tr></table></figure><p>如果该用户已经存在，则<code>identified by &quot;密码&quot;</code>部分可以省略。</p><p>Windows中命令行中启动／关闭MySQL：<code>net start/stop mysql</code>，所有的Windows服务都可以使用<code>net start/stop</code>来启动或者是关闭。</p><h2 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h2><table><thead><tr><th style="text-align:left">简写</th><th style="text-align:left">全写</th></tr></thead><tbody><tr><td style="text-align:left">SELECT VERSION();</td><td style="text-align:left">显示当前服务器版本</td></tr><tr><td style="text-align:left">SELECT NOW();</td><td style="text-align:left">显示当前日期时间</td></tr><tr><td style="text-align:left">SELECT USER();</td><td style="text-align:left">显示当前用户</td></tr></tbody></table><h2 id="mysql命令参数"><a href="#mysql命令参数" class="headerlink" title="mysql命令参数"></a>mysql命令参数</h2><table><thead><tr><th style="text-align:left">简写</th><th style="text-align:center">全写</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">-D</td><td style="text-align:center">–database</td><td style="text-align:left">打开指定数据库</td></tr><tr><td style="text-align:left">-h</td><td style="text-align:center">–host</td><td style="text-align:left">服务器地址</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:center">–password</td><td style="text-align:left">密码</td></tr><tr><td style="text-align:left">-P</td><td style="text-align:center">–port</td><td style="text-align:left">端口号</td></tr><tr><td style="text-align:left">-u</td><td style="text-align:center">–user</td><td style="text-align:left">用户名</td></tr><tr><td style="text-align:left">-V</td><td style="text-align:center">–version</td><td style="text-align:left">输出版本信息并退出</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">–delimiter</td><td style="text-align:left">指定分隔符</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">–prompt</td><td style="text-align:left">设置提示符</td></tr></tbody></table><h2 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h2><ul><li>登录时通过参数修改<code>mysql -uroot -proot --prompt 提示符</code></li><li>连接上客户端后通过<code>prompt</code>命令修改：<code>mysql&gt; prompt 提示符</code></li></ul><p><strong>提示符可以跟的参数</strong>：</p><table><thead><tr><th style="text-align:left">简写</th><th style="text-align:center">含义</th><th style="text-align:left">简写</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">\D</td><td style="text-align:center">完整的日期</td><td style="text-align:left">\d</td><td style="text-align:left">当前数据库</td></tr><tr><td style="text-align:left">\h</td><td style="text-align:center">服务器名称</td><td style="text-align:left">\u</td><td style="text-align:left">当前用户</td></tr></tbody></table><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; PROMPT \u@\h \d&gt;</span><br><span class="line">root@localhost (none)&gt;</span><br></pre></td></tr></table></figure></p><h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;</span><br></pre></td></tr></table></figure><h3 id="查看当前服务器下的数据库列表"><a href="#查看当前服务器下的数据库列表" class="headerlink" title="查看当前服务器下的数据库列表"></a>查看当前服务器下的数据库列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW &#123;DATABASE | SCHEMA&#125; [LIKE ‘pattern’ | WHERE expr];</span><br></pre></td></tr></table></figure><p><code>SHOW WARNINGS;</code>查看警告信息；<code>SHOW CREATE DATABASE db_name;</code>查看创建数据库时所使用的命令。</p><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name] [DEFAULT] CHARACTER SET [=] charset_name;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写属于你的第一个Linux内核模块</title>
      <link href="/2015/10/10/%E7%BC%96%E5%86%99%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AALinux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/"/>
      <url>/2015/10/10/%E7%BC%96%E5%86%99%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AALinux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>转载自：<a href="https://linux.cn/article-3251-1.html" target="_blank" rel="noopener">https://linux.cn/article-3251-1.html</a></p><p>内核编程常常看起来像是黑魔法，而在亚瑟 C 克拉克的眼中，它八成就是了。Linux内核和它的用户空间是大不相同的：抛开漫不经心，你必须小心翼翼，因为你编程中的一个bug就会影响到整个系统。浮点运算做起来可不容易，堆栈固定而狭小，而你写的代码总是异步的，因此你需要想想并发会导致什么。而除了所有这一切之外，Linux内核只是一个很大的、很复杂的C程序，它对每个人开放，任何人都去读它、学习它并改进它，而你也可以是其中之一。</p><a id="more"></a><p><img src="/images/2015-10-10/img-1.jpg" alt></p><p>学习内核编程的最简单的方式也许就是写个内核模块：一段可以动态加载进内核的代码。模块所能做的事是有限的——例如，他们不能在类似进程描述符这样的公共数据结构中增减字段（LCTT译注：可能会破坏整个内核及系统的功能）。但是，在其它方面，他们是成熟的内核级的代码，可以在需要时随时编译进内核（这样就可以摒弃所有的限制了）。完全可以在Linux源代码树以外来开发并编译一个模块（这并不奇怪，它称为树外开发），如果你只是想稍微玩玩，而并不想提交修改以包含到主线内核中去，这样的方式是很方便的。</p><p>在本教程中，我们将开发一个简单的内核模块用以创建一个<code>/dev/reverse</code>设备。写入该设备的字符串将以相反字序的方式读回（“Hello World”读成“World Hello”）。这是一个很受欢迎的程序员面试难题，当你利用自己的能力在内核级别实现这个功能时，可以使你得到一些加分。在开始前，有一句忠告：你的模块中的一个bug就会导致系统崩溃（虽然可能性不大，但还是有可能的）和数据丢失。在开始前，请确保你已经将重要数据备份，或者，采用一种更好的方式，在虚拟机中进行试验。</p><h2 id="尽可能不要用root身份"><a href="#尽可能不要用root身份" class="headerlink" title="尽可能不要用root身份"></a>尽可能不要用root身份</h2><p>默认情况下，<code>/dev/reverse</code>只有root可以使用，因此你只能使用sudo来运行你的测试程序。要解决该限制，可以创建一个包含以下内容的<code>/lib/udev/rules.d/99-reverse.rules</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSYSTEM==<span class="string">"misc"</span>, KERNEL==<span class="string">"reverse"</span>, MODE=<span class="string">"0666"</span></span><br></pre></td></tr></table></figure><p>别忘了重新插入模块。让非root用户访问设备节点往往不是一个好主意，但是在开发其间却是十分有用的。这并不是说以root身份运行二进制测试文件也不是个好主意。</p><h3 id="模块的构造"><a href="#模块的构造" class="headerlink" title="模块的构造"></a>模块的构造</h3><p>由于大多数的Linux内核模块是用C写的（除了底层的特定于体系结构的部分），所以推荐你将你的模块以单一文件形式保存（例如，<code>reverse.c</code>）。我们已经把完整的源代码放在<a href="https://github.com/vsinitsyn/reverse" target="_blank" rel="noopener">GitHub</a>上——这里我们将看其中的一些片段。开始时，我们先要包含一些常见的文件头，并用预定义的宏来描述模块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"Valentine Sinitsyn &lt;valentine.sinitsyn@gmail.com&gt;"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"In-kernel phrase reverser"</span>);</span><br></pre></td></tr></table></figure><p>这里一切都直接明了，除了<code>MODULE_LICENSE()</code>：它不仅仅是一个标记。内核坚定地支持GPL兼容代码，因此如果你把许可证设置为其它非GPL兼容的（如，“Proprietary”[专利]），某些特定的内核功能将在你的模块中不可用。</p><h2 id="什么时候不该写内核模块"><a href="#什么时候不该写内核模块" class="headerlink" title="什么时候不该写内核模块"></a>什么时候不该写内核模块</h2><p>内核编程很有趣，但是在现实项目中写（尤其是调试）内核代码要求特定的技巧。通常来讲，在没有其它方式可以解决你的问题时，你才应该在内核级别解决它。以下情形中，可能你在用户空间中解决它更好：</p><ul><li>你要开发一个USB驱动 —— 请查看libusb。</li><li>你要开发一个文件系统 —— 试试FUSE。</li><li>你在扩展Netfilter —— 那么<code>libnetfilter_queue</code>对你有所帮助。</li></ul><p>通常，内核里面代码的性能会更好，但是对于许多项目而言，这点性能丢失并不严重。</p><p>由于内核编程总是异步的，没有一个<code>main()</code>函数来让Linux顺序执行你的模块。取而代之的是，你要为各种事件提供回调函数，像这个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">reverse_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"reverse device has been registered\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">reverse_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"reverse device has been unregistered\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(reverse_init);</span><br><span class="line">module_exit(reverse_exit);</span><br></pre></td></tr></table></figure><p>这里，我们定义的函数被称为模块的插入和删除。只有第一个的插入函数是必要的。目前，它们只是打印消息到内核环缓冲区（可以在用户空间通过<code>dmesg</code>命令访问）；<code>KERN_INFO</code>是日志级别（注意，没有逗号）。<code>__init</code>和<code>__exit</code>是属性 —— 联结到函数（或者变量）的元数据片。属性在用户空间的C代码中是很罕见的，但是内核中却很普遍。所有标记为<code>__init</code>的，会在初始化后释放内存以供重用（还记得那条过去内核的那条“Freeing unused kernel memory…[释放未使用的内核内存……]”信息吗？）。<code>__exit</code>表明，当代码被静态构建进内核时，该函数可以安全地优化了，不需要清理收尾。最后，<code>module_init()</code>和<code>module_exit()</code>这两个宏将<code>reverse_init()</code>和<code>reverse_exit()</code>函数设置成为我们模块的生命周期回调函数。实际的函数名称并不重要，你可以称它们为<code>init()</code>和<code>exit()</code>，或者<code>start()</code>和<code>stop()</code>，你想叫什么就叫什么吧。他们都是静态声明，你在外部模块是看不到的。事实上，内核中的任何函数都是不可见的，除非明确地被导出。然而，在内核程序员中，给你的函数加上模块名前缀是约定俗成的。</p><p>这些都是些基本概念 - 让我们来做更多有趣的事情吧。模块可以接收参数，就像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># modprobe foo bar=1</span></span><br></pre></td></tr></table></figure><p><code>modinfo</code>命令显示了模块接受的所有参数，而这些也可以在<code>/sys/module//parameters</code>下作为文件使用。我们的模块需要一个缓冲区来存储参数 —— 让我们把这大小设置为用户可配置。在<code>MODULE_DESCRIPTION()</code>下添加如下三行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> buffer_size = <span class="number">8192</span>;</span><br><span class="line">module_param(buffer_size, ulong, (S_IRUSR | S_IRGRP | S_IROTH));</span><br><span class="line">MODULE_PARM_DESC(buffer_size, <span class="string">"Internal buffer size"</span>);</span><br></pre></td></tr></table></figure><p>这儿，我们定义了一个变量来存储该值，封装成一个参数，并通过<code>sysfs</code>来让所有人可读。这个参数的描述（最后一行）出现在<code>modinfo</code>的输出中。</p><p>由于用户可以直接设置<code>buffer_size</code>，我们需要在<code>reverse_init()</code>来清除无效取值。你总该检查来自内核之外的数据 —— 如果你不这么做，你就是将自己置身于内核异常或安全漏洞之中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">reverse_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!buffer_size)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    printk(KERN_INFO</span><br><span class="line">        <span class="string">"reverse device has been registered, buffer size is %lu bytes\n"</span>,</span><br><span class="line">        buffer_size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来自模块初始化函数的非0返回值意味着模块执行失败。</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>但你开发模块时，Linux内核就是你所需一切的源头。然而，它相当大，你可能在查找你所要的内容时会有困难。幸运的是，在庞大的代码库面前，有许多工具使这个过程变得简单。首先，是Cscope —— 在终端中运行的一个比较经典的工具。你所要做的，就是在内核源代码的顶级目录中运行<code>make cscope &amp;&amp; cscope</code>。Cscope和Vim以及Emacs整合得很好，因此你可以在你最喜爱的编辑器中使用它。</p><p>如果基于终端的工具不是你的最爱，那么就访问<a href="http://lxr.free-electrons.com" target="_blank" rel="noopener">http://lxr.free-electrons.com</a>吧。它是一个基于web的内核导航工具，即使它的功能没有Cscope来得多（例如，你不能方便地找到函数的用法），但它仍然提供了足够多的快速查询功能。</p><p>现在是时候来编译模块了。你需要你正在运行的内核版本头文件（<code>linux-headers</code>，或者等同的软件包）和<code>build-essential</code>（或者类似的包）。接下来，该创建一个标准的<code>Makefile</code>模板：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj-m += reverse.o</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    make -C /lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    make -C /lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build M=<span class="variable">$(PWD)</span> clean</span><br></pre></td></tr></table></figure><p>现在，调用make来构建你的第一个模块。如果你输入的都正确，在当前目录内会找到<code>reverse.ko</code>文件。使用<code>sudo insmod reverse.ko</code>插入内核模块，然后运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dmesg | tail -1</span><br><span class="line">[ 5905.042081] reverse device has been registered, buffer size is 8192 bytes</span><br></pre></td></tr></table></figure><p>恭喜了！然而，目前这一行还只是假象而已 —— 还没有设备节点呢。让我们来搞定它。</p><h3 id="混杂设备"><a href="#混杂设备" class="headerlink" title="混杂设备"></a>混杂设备</h3><p>在Linux中，有一种特殊的字符设备类型，叫做“混杂设备”（或者简称为“misc”）。它是专为单一接入点的小型设备驱动而设计的，而这正是我们所需要的。所有混杂设备共享同一个主设备号（10），因此一个驱动(<code>drivers/char/misc.c</code>）就可以查看它们所有设备了，而这些设备用次设备号来区分。从其他意义来说，它们只是普通字符设备。</p><p>要为该设备注册一个次设备号（以及一个接入点），你需要声明<code>struct misc_device</code>，填上所有字段（注意语法），然后使用指向该结构的指针作为参数来调用<code>misc_register()</code>。为此，你也需要包含<code>linux/miscdevice.h</code>头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">reverse_misc_device</span> = &#123;</span></span><br><span class="line">    .minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">    .name = <span class="string">"reverse"</span>,</span><br><span class="line">    .fops = &amp;reverse_fops</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">reverse_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    misc_register(&amp;reverse_misc_device);</span><br><span class="line">    printk(KERN_INFO ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这儿，我们为名为“reverse”的设备请求一个第一个可用的（动态的）次设备号；省略号表明我们之前已经见过的省略的代码。别忘了在模块卸下后注销掉该设备。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">reverse_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    misc_deregister(&amp;reverse_misc_device);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘fops’字段存储了一个指针，指向一个<code>file_operations</code>结构（在<code>Linux/fs.h</code>中声明），而这正是我们模块的接入点。<code>reverse_fops</code>定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">reverse_fops</span> = &#123;</span></span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open = reverse_open,</span><br><span class="line">    ...</span><br><span class="line">    .llseek = noop_llseek</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，<code>reverse_fops</code>包含了一系列回调函数（也称之为方法），当用户空间代码打开一个设备，读写或者关闭文件描述符时，就会执行。如果你要忽略这些回调，可以指定一个明确的回调函数来替代。这就是为什么我们将llseek设置为<code>noop_llseek()</code>，（顾名思义）它什么都不干。这个默认实现改变了一个文件指针，而且我们现在并不需要我们的设备可以寻址（这是今天留给你们的家庭作业）。</p><h3 id="关闭和打开"><a href="#关闭和打开" class="headerlink" title="关闭和打开"></a>关闭和打开</h3><p>让我们来实现该方法。我们将给每个打开的文件描述符分配一个新的缓冲区，并在它关闭时释放。这实际上并不安全：如果一个用户空间应用程序泄漏了描述符（也许是故意的），它就会霸占RAM，并导致系统不可用。在现实世界中，你总得考虑到这些可能性。但在本教程中，这种方法不要紧。</p><p>我们需要一个结构函数来描述缓冲区。内核提供了许多常规的数据结构：链接列表（双联的），哈希表，树等等之类。不过，缓冲区常常从头设计。我们将调用我们的“struct buffer”：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *data, *end, *read_ptr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>data是该缓冲区存储的一个指向字符串的指针，而end指向字符串结尾后的第一个字节。<code>read_ptr</code>是<code>read()</code>开始读取数据的地方。缓冲区的size是为了保证完整性而存储的 —— 目前，我们还没有使用该区域。你不能假设使用你结构体的用户会正确地初始化所有这些东西，所以最好在函数中封装缓冲区的分配和收回。它们通常命名为<code>buffer_alloc()</code>和<code>buffer_free()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct buffer <span class="title">buffer_alloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> size)</span> </span>&#123; <span class="class"><span class="keyword">struct</span> <span class="title">buffer</span> *<span class="title">buf</span>;</span> buf = kzalloc(<span class="keyword">sizeof</span>(buf), GFP_KERNEL); <span class="keyword">if</span> (unlikely(!buf)) <span class="keyword">goto</span> out; ... out: <span class="keyword">return</span> buf; &#125;</span><br></pre></td></tr></table></figure><p>内核内存使用<code>kmalloc()</code>来分配，并使用<code>kfree()</code>来释放；<code>kzalloc()</code>的风格是将内存设置为全零。不同于标准的<code>malloc()</code>，它的内核对应部分收到的标志指定了第二个参数中请求的内存类型。这里，<code>GFP_KERNEL</code>是说我们需要一个普通的内核内存（不是在DMA或高内存区中）以及如果需要的话函数可以睡眠（重新调度进程）。<code>sizeof(*buf)</code>是一种常见的方式，它用来获取可通过指针访问的结构体的大小。</p><p>你应该随时检查<code>kmalloc()</code>的返回值：访问NULL指针将导致内核异常。同时也需要注意<code>unlikely()</code>宏的使用。它（及其相对宏<code>likely()</code>）被广泛用于内核中，用于表明条件几乎总是真的（或假的）。它不会影响到控制流程，但是能帮助现代处理器通过分支预测技术来提升性能。</p><p>最后，注意goto语句。它们常常为认为是邪恶的，但是，Linux内核（以及一些其它系统软件）采用它们来实施集中式的函数退出。这样的结果是减少嵌套深度，使代码更具可读性，而且非常像更高级语言中的<code>try-catch</code>区块。</p><p>有了<code>buffer_alloc()</code>和<code>buffer_free()</code>，open和close方法就变得很简单了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse_open</span><span class="params">(struct inode *inode, struct file *file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line">    file-&gt;private_data = buffer_alloc(buffer_size);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>struct file是一个标准的内核数据结构，用以存储打开的文件的信息，如当前文件位置（<code>file-&gt;f_pos</code>)、标志(<code>file-&gt;f_flags</code>），或者打开模式（<code>file-&gt;f_mode</code>)等。另外一个字段<code>file-&gt;privatedata</code>用于关联文件到一些专有数据，它的类型是void *，而且它在文件拥有者以外，对内核不透明。我们将一个缓冲区存储在那里。</p><p>如果缓冲区分配失败，我们通过返回否定值（<code>-ENOMEM</code>）来为调用的用户空间代码标明。一个C库中调用的<code>open(2)</code>系统调用(如 <code>glibc</code>)将会检测这个并适当地设置<code>errno</code> 。</p><h3 id="学习如何读和写"><a href="#学习如何读和写" class="headerlink" title="学习如何读和写"></a>学习如何读和写</h3><p>“read”和“write”方法是真正完成工作的地方。当数据写入到缓冲区时，我们放弃之前的内容和反向地存储该字段，不需要任何临时存储。read方法仅仅是从内核缓冲区复制数据到用户空间。但是如果缓冲区还没有数据，<code>revers_eread()</code>会做什么呢？在用户空间中，<code>read()</code>调用会在有可用数据前阻塞它。在内核中，你就必须等待。幸运的是，有一项机制用于处理这种情况，就是‘wait queues’。</p><p>想法很简单。如果当前进程需要等待某个事件，它的描述符（<code>struct task_struct</code>存储‘current’信息）被放进非可运行（睡眠中）状态，并添加到一个队列中。然后schedule()就被调用来选择另一个进程运行。生成事件的代码通过使用队列将等待进程放回<code>TASK_RUNNING</code>状态来唤醒它们。调度程序将在以后在某个地方选择它们之一。Linux有多种非可运行状态，最值得注意的是<code>TASK_INTERRUPTIBLE</code>（一个可以通过信号中断的睡眠）和<code>TASK_KILLABLE</code>（一个可被杀死的睡眠中的进程）。所有这些都应该正确处理，并等待队列为你做这些事。</p><p>一个用以存储读取等待队列头的天然场所就是结构缓冲区，所以从为它添加<code>wait_queue_headt read\queue</code>字段开始。你也应该包含<code>linux/sched.h</code>头文件。可以使用<code>DECLARE_WAITQUEUE()</code>宏来静态声明一个等待队列。在我们的情况下，需要动态初始化，因此添加下面这行到<code>buffer_alloc()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_waitqueue_head(&amp;buf-&gt;read_queue);</span><br></pre></td></tr></table></figure><p>我们等待可用数据；或者等待<code>read_ptr != end</code>条件成立。我们也想要让等待操作可以被中断（如，通过<code>Ctrl+C</code>）。因此，“read”方法应该像这样开始：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">reverse_read</span><span class="params">(struct file *file, <span class="keyword">char</span> __user * out,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">size_t</span> size, <span class="keyword">loff_t</span> * off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">buffer</span> *<span class="title">buf</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="keyword">ssize_t</span> result;</span><br><span class="line">    <span class="keyword">while</span> (buf-&gt;read_ptr == buf-&gt;end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file-&gt;f_flags &amp; O_NONBLOCK) &#123;</span><br><span class="line">            result = -EAGAIN;</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (wait_event_interruptible</span><br><span class="line">        (buf-&gt;read_queue, buf-&gt;read_ptr != buf-&gt;end)) &#123;</span><br><span class="line">            result = -ERESTARTSYS;</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们让它循环，直到有可用数据，如果没有则使用<code>wait_event_interruptible()</code>（它是一个宏，不是函数，这就是为什么要通过值的方式给队列传递）来等待。好吧，如果<code>wait_event_interruptible()</code>被中断，它返回一个非0值，这个值代表-ERESTARTSYS。这段代码意味着系统调用应该重新启动。<code>file-&gt;f_flags</code>检查以非阻塞模式打开的文件数：如果没有数据，返回-EAGAIN。</p><p>我们不能使用<code>if()</code>来替代<code>while()</code>，因为可能有许多进程正等待数据。当write方法唤醒它们时，调度程序以不可预知的方式选择一个来运行，因此，在这段代码有机会执行的时候，缓冲区可能再次空出。现在，我们需要将数据从<code>buf-&gt;data</code> 复制到用户空间。<code>copy_to_user()</code>内核函数就干了此事：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size = min(size, (<span class="keyword">size_t</span>) (buf-&gt;end - buf-&gt;read_ptr));</span><br><span class="line"><span class="keyword">if</span> (copy_to_user(out, buf-&gt;read_ptr, size)) &#123;</span><br><span class="line">    result = -EFAULT;</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用户空间指针错误，那么调用可能会失败；如果发生了此事，我们就返回<code>-EFAULT</code>。记住，不要相信任何来自内核外的事物！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    buf-&gt;read_ptr += size;</span><br><span class="line">    result = size;</span><br><span class="line">out:</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使数据在任意块可读，需要进行简单运算。该方法返回读入的字节数，或者一个错误代码。</p><p>写方法更简短。首先，我们检查缓冲区是否有足够的空间，然后我们使用<code>copy_from_userspace()</code>函数来获取数据。再然后<code>read_ptr</code>和结束指针会被重置，并且反转存储缓冲区内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buf-&gt;end = buf-&gt;data + size;</span><br><span class="line">    buf-&gt;read_ptr = buf-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (buf-&gt;end &gt; buf-&gt;data)</span><br><span class="line">        reverse_phrase(buf-&gt;data, buf-&gt;end - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这里， <code>reverse_phrase()</code>干了所有吃力的工作。它依赖于<code>reverse_word()</code>函数，该函数相当简短并且标记为内联。这是另外一个常见的优化；但是，你不能过度使用。因为过多的内联会导致内核映像徒然增大。</p><p>最后，我们需要唤醒<code>read_queue</code>中等待数据的进程，就跟先前讲过的那样。<code>wake_up_interruptible()</code>就是用来干此事的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wake_up_interruptible(&amp;buf-&gt;read_queue);</span><br></pre></td></tr></table></figure><p>耶！你现在已经有了一个内核模块，它至少已经编译成功了。现在，是时候来测试了。</p><h2 id="调试内核代码"><a href="#调试内核代码" class="headerlink" title="调试内核代码"></a>调试内核代码</h2><p>或许，内核中最常见的调试方法就是打印。如果你愿意，你可以使用普通的<code>printk()</code>（假定使用<code>KERN_DEBUG</code>日志等级）。然而，那儿还有更好的办法。如果你正在写一个设备驱动，这个设备驱动有它自己的“struct device”，可以使用<code>pr_debug()</code>或者<code>dev_dbg()</code>：它们支持动态调试（dyndbg）特性，并可以根据需要启用或者禁用（请查阅<code>Documentation/dynamic-debug-howto.txt</code>）。对于单纯的开发消息，使用<code>pr_devel()</code>，除非设置了DEBUG，否则什么都不会做。要为我们的模块启用DEBUG，请添加以下行到<code>Makefile</code>中：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS_reverse.o := -DDEBUG</span><br></pre></td></tr></table></figure><p>完了之后，使用dmesg来查看<code>pr_debug()</code>或<code>pr_devel()</code>生成的调试信息。 或者，你可以直接发送调试信息到控制台。要想这么干，你可以设置<code>console_loglevel</code>内核变量为8或者更大的值（<code>echo 8 /proc/sys/kernel/printk</code>），或者在高日志等级，如KERN_ERR，来临时打印要查询的调试信息。很自然，在发布代码前，你应该移除这样的调试声明。</p><p>注意内核消息出现在控制台，不要在Xterm这样的终端模拟器窗口中去查看；这也是在内核开发时，建议你不在X环境下进行的原因。</p><h3 id="惊喜，惊喜！"><a href="#惊喜，惊喜！" class="headerlink" title="惊喜，惊喜！"></a>惊喜，惊喜！</h3><p>编译模块，然后加载进内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ sudo insmod reverse.ko buffer_size=2048</span><br><span class="line">$ lsmod</span><br><span class="line">reverse 2419 0</span><br><span class="line">$ ls -l /dev/reverse</span><br><span class="line">crw-rw-rw- 1 root root 10, 58 Feb 22 15:53 /dev/reverse</span><br></pre></td></tr></table></figure><p>一切似乎就位。现在，要测试模块是否正常工作，我们将写一段小程序来翻转它的第一个命令行参数。<code>main()</code>（再三检查错误）可能看上去像这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/reverse"</span>, O_RDWR);</span><br><span class="line">write(fd, argv[<span class="number">1</span>], <span class="built_in">strlen</span>(argv[<span class="number">1</span>]));</span><br><span class="line">read(fd, argv[<span class="number">1</span>], <span class="built_in">strlen</span>(argv[<span class="number">1</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read: %s\n"</span>, argv[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>像这样运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./<span class="built_in">test</span> <span class="string">'A quick brown fox jumped over the lazy dog'</span></span><br><span class="line">Read: dog lazy the over jumped fox brown quick A</span><br></pre></td></tr></table></figure><p>它工作正常！玩得更逗一点：试试传递单个单词或者单个字母的短语，空的字符串或者是非英语字符串（如果你有这样的键盘布局设置），以及其它任何东西。</p><p>现在，让我们让事情变得更好玩一点。我们将创建两个进程，它们共享一个文件描述符（及其内核缓冲区）。其中一个会持续写入字符串到设备，而另一个将读取这些字符串。在下例中，我们使用了<code>fork(2)</code>系统调用，而pthreads也很好用。我也省略打开和关闭设备的代码，并在此检查代码错误（又来了）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *phrase = <span class="string">"A quick brown fox jumped over the lazy dog"</span>;</span><br><span class="line"><span class="keyword">if</span> (fork())</span><br><span class="line">    <span class="comment">/* Parent is the writer */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        write(fd, phrase, len);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">/* child is the reader */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        read(fd, buf, len);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Read: %s\n"</span>, buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你希望这个程序会输出什么呢？下面就是在我的笔记本上得到的东西：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Read: dog lazy the over jumped fox brown quick A</span><br><span class="line">Read: A kcicq brown fox jumped over the lazy dog</span><br><span class="line">Read: A kciuq nworb xor jumped fox brown quick A</span><br><span class="line">Read: A kciuq nworb xor jumped fox brown quick A</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里发生了什么呢？就像举行了一场比赛。我们认为read和write是原子操作，或者从头到尾一次执行一个指令。然而，内核确实无序并发的，随便就重新调度了<code>reverse_phrase()</code>函数内部某个地方运行着的写入操作的内核部分。如果在写入操作结束前就调度了read()操作呢？就会产生数据不完整的状态。这样的bug非常难以找到。但是，怎样来处理这个问题呢？</p><p>基本上，我们需要确保在写方法返回前没有read方法能被执行。如果你曾经编写过一个多线程的应用程序，你可能见过同步原语（锁），如互斥锁或者信号。Linux也有这些，但有些细微的差别。内核代码可以运行进程上下文（用户空间代码的“代表”工作，就像我们使用的方法）和终端上下文（例如，一个IRQ处理线程）。如果你已经在进程上下文中和并且你已经得到了所需的锁，你只需要简单地睡眠和重试直到成功为止。在中断上下文时你不能处于休眠状态，因此代码会在一个循环中运行直到锁可用。关联原语被称为自旋锁，但在我们的环境中，一个简单的互斥锁 —— 在特定时间内只有唯一一个进程能“占有”的对象 —— 就足够了。处于性能方面的考虑，现实的代码可能也会使用读-写信号。</p><p>锁总是保护某些数据（在我们的环境中，是一个“struct buffer”实例），而且也常常会把它们嵌入到它们所保护的结构体中。因此，我们添加一个互斥锁（‘struct mutex lock’）到“struct buffer”中。我们也必须用<code>mutex_init()</code>来初始化互斥锁；<code>buffer_alloc</code>是用来处理这件事的好地方。使用互斥锁的代码也必须包含<code>linux/mutex.h</code>。</p><p>互斥锁很像交通信号灯 —— 要是司机不看它和不听它的，它就没什么用。因此，在对缓冲区做操作并在操作完成时释放它之前，我们需要更新<code>reverse_read()</code>和<code>reverse_write()</code>来获取互斥锁。让我们来看看read方法 —— write的工作原理相同：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">reverse_read</span><span class="params">(struct file *file, <span class="keyword">char</span> __user * out,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">size_t</span> size, <span class="keyword">loff_t</span> * off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">buffer</span> *<span class="title">buf</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="keyword">ssize_t</span> result;</span><br><span class="line">    <span class="keyword">if</span> (mutex_lock_interruptible(&amp;buf-&gt;lock)) &#123;</span><br><span class="line">        result = -ERESTARTSYS;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在函数一开始就获取锁。<code>mutex_lock_interruptible()</code>要么得到互斥锁然后返回，要么让进程睡眠，直到有可用的互斥锁。就像前面一样，<code>_interruptible</code>后缀意味着睡眠可以由信号来中断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (buf-&gt;read_ptr == buf-&gt;end) &#123;</span><br><span class="line">    mutex_unlock(&amp;buf-&gt;lock);</span><br><span class="line">    <span class="comment">/* ... wait_event_interruptible() here ... */</span></span><br><span class="line">    <span class="keyword">if</span> (mutex_lock_interruptible(&amp;buf-&gt;lock)) &#123;</span><br><span class="line">        result = -ERESTARTSYS;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我们的“等待数据”循环。当获取互斥锁时，或者发生称之为“死锁”的情境时，不应该让进程睡眠。因此，如果没有数据，我们释放互斥锁并调用<code>wait_event_interruptible()</code>。当它返回时，我们重新获取互斥锁并像往常一样继续：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (copy_to_user(out, buf-&gt;read_ptr, size)) &#123;</span><br><span class="line">        result = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">out_unlock:</span><br><span class="line">    mutex_unlock(&amp;buf-&gt;lock);</span><br><span class="line">out:</span><br><span class="line">    <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>最后，当函数结束，或者在互斥锁被获取过程中发生错误时，互斥锁被解锁。重新编译模块（别忘了重新加载），然后再次进行测试。现在你应该没发现毁坏的数据了。</p><h3 id="接下来是什么？"><a href="#接下来是什么？" class="headerlink" title="接下来是什么？"></a>接下来是什么？</h3><p>现在你已经尝试了一次内核黑客。我们刚刚为你揭开了这个话题的外衣，里面还有更多东西供你探索。我们的第一个模块有意识地写得简单一点，在从中学到的概念在更复杂的环境中也一样。并发、方法表、注册回调函数、使进程睡眠以及唤醒进程，这些都是内核黑客们耳熟能详的东西，而现在你已经看过了它们的运作。或许某天，你的内核代码也将被加入到主线Linux源代码树中 —— 如果真这样，请联系我们！</p><p>转载自：<a href="https://linux.cn/article-3251-1.html" target="_blank" rel="noopener">https://linux.cn/article-3251-1.html</a></p><p>原文：<a href="http://www.linuxvoice.com/be-a-kernel-hacker/" target="_blank" rel="noopener">http://www.linuxvoice.com/be-a-kernel-hacker</a> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《皮囊》《孩子你慢慢来》</title>
      <link href="/2015/10/07/%E3%80%8A%E7%9A%AE%E5%9B%8A%E3%80%8B%E3%80%8A%E5%AD%A9%E5%AD%90%E4%BD%A0%E6%85%A2%E6%85%A2%E6%9D%A5%E3%80%8B/"/>
      <url>/2015/10/07/%E3%80%8A%E7%9A%AE%E5%9B%8A%E3%80%8B%E3%80%8A%E5%AD%A9%E5%AD%90%E4%BD%A0%E6%85%A2%E6%85%A2%E6%9D%A5%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>我是一个不爱读书的人，记得小时侯，别人家孩子都在读各种名著时，我却在各种嗨，以至于每每考试之前，不得不将各种可能考到的题目背诵下来，偶尔碰到遗漏的，也一定会记下来，下次出现时会做就行，所以那时候倒也觉得没有什么。这种情形一直到高中，直到到了大学后，才有所转变。可能是由于人生阅历的增加，接触的人和事变得广一些，后来逐渐觉得其实阅读也并不是一件痛苦的事，反而会给人一种轻松愉悦之感，加之其对人性情、价值观的影响，突然发现自己竟爱上了阅读，这期间要特别感谢几位向我推荐书籍的好友：）。</p><p>恰逢十一假期，1、2号处理完一些事情后便回到了学校，由于假期较长，很多同学外出旅游，学校里倒也清静，于是接下来几天，捧了几本书，一头钻进了自习室，相比于实验室，我更喜欢自习室的学习氛围，每个人都有自己的学习计划和目标，偶尔遇见几个调皮捣蛋的家伙，但也是极少数的。这期间我看了两本书：《皮囊》和《孩子你慢慢来》。</p><a id="more"></a><p>一次去小辉实验室，看见他手捧《皮囊》，正在津津有味地阅读，看到我后极力向我推荐，随后不久，这本书便到了我的手上。其实，就在不久前，我就有在微博上看到有人在推荐，只不过当时没太在意。</p><p>开始阅读本书是在拿到书的第二个晚上，在完成当天的工作后，我便打开了携带在身边的《皮囊》，刚开始看的很慢，也不知道过了多久，竟情不自禁地流泪了。书中的前两个章节确实感人，其中的情景不禁让我想起来母亲，当晚看完前两个章节后便合上书离开了自习室，一是因为当时时间已经很晚；二怕情绪进一步受其影响。</p><p>随着阅读的一步步深入，慢慢发现，书的后续部分竟与一般的的小说没有太大的区别，都是讲小时玩伴的没落，与作者现在的成果形成鲜明对比，忽然间觉得，这不是小学、初中老师长谈的两种不同的人生么？然而却又有些许不同，作者并没有大张旗鼓的宣扬自己的成就，整本书都是以一种悲哀的基调展开，是对过去的悼念还是对那些不走正途的玩伴的叹息？亦或者是批判？</p><p>我并不赞同这种暗贬，每个人都有自己的价值取向和生活方式，有的人玩世不恭，有的人放荡不羁，也有的人整天兢兢业业却郁郁而终。没有谁可以评判他人人生的对与错，唯有遵从本心，方可活得潇洒！</p><p>与《皮囊》的基调完全相反，《孩子你慢慢来》整本书中洋溢着欢乐、祥和之气，书中描绘了孩子成长过程中的点点滴滴的小事，细细品读，一幅幅生动活泼的亲子画面尽显眼前。与传统的“棍棒底下出孝子”的中国式教育相反，作者教育后代的方式显得尤为独特，欣赏之际，不免为自己年少时所受的教育感到惋惜。</p><p>题外话：《孩子你慢慢来》属于台湾作家龙应台的“人生三书”之一，其余两本为《亲爱的安德烈》和《目送》。</p>]]></content>
      
      
      <categories>
          
          <category> 课外阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《皮囊》 </tag>
            
            <tag> 《孩子你慢慢来》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu编译安装新内核</title>
      <link href="/2015/08/31/Ubuntu%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E5%86%85%E6%A0%B8/"/>
      <url>/2015/08/31/Ubuntu%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%96%B0%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<p>这一部分无关紧要，着急看正文的请直接从“实验环境”开始。</p><p>对于一般用户来说，在使用Ubuntu的过程中大部分情况下是不用修改Ubuntu内核的，但最近因为试验需要，在开发的过程中需要对Ubuntu系统中的内核进行部分修改，由于以前没有相关的经验和知识储备，导致在编译安装Ubuntu内核的过程中走了很多弯路，断断续续折腾了一个多月，终于在今天搞定了！！！</p><a id="more"></a><p>先来展示几张图片：</p><p><img src="/images/2015-08-31/yahoo.jpg" alt></p><p><img src="/images/2015-08-31/google.jpg" alt></p><p><img src="/images/2015-08-31/baidu.jpg" alt></p><p>前一段时间一直用Google来找相关的解决方案，直到遇到Yahoo，命运才被改变^_^，这里并不是贬低Google，而是强调在解决问题的过程中，一定要尝试多种途径，不能困死在一条路上！</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>Ubuntu14.04 （3.16.0-30-generic）</p><h2 id="获取对应版本的内核源码"><a href="#获取对应版本的内核源码" class="headerlink" title="获取对应版本的内核源码"></a>获取对应版本的内核源码</h2><p>获取Ubuntu内核源码的方式有两种，如果你已经安装了Ubuntu系统，并且想在现有的内核上做一些修改，那么请使用<code>apt-get</code>方式；如果你想获取最新的内核版本并在上面做一些修改，那么请使用<code>git</code>方式。</p><h3 id="方式一：apt-get"><a href="#方式一：apt-get" class="headerlink" title="方式一：apt-get"></a>方式一：apt-get</h3><p>使用命令<code>apt-get source linux-image-$(uname -r)</code>可以获取与当前系统匹配的内核源码，并且在源码下载完成后自动解压到当前目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~/Kernel$ apt-get <span class="built_in">source</span> linux-image-$(uname -r)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Picking <span class="string">'linux-lts-utopic'</span> as <span class="built_in">source</span> package instead of <span class="string">'linux-image-3.16.0-30-generic'</span></span><br><span class="line">NOTICE: <span class="string">'linux-lts-utopic'</span> packaging is maintained <span class="keyword">in</span> the <span class="string">'Git'</span> version control system at:</span><br><span class="line">http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-trusty.git</span><br><span class="line">Need to get 132 MB of <span class="built_in">source</span> archives.</span><br><span class="line">Get:1 http://cn.archive.ubuntu.com/ubuntu/ trusty-updates/main linux-lts-utopic 3.16.0-46.62~14.04.1 (dsc) [11.2 kB]</span><br><span class="line">Get:2 http://cn.archive.ubuntu.com/ubuntu/ trusty-updates/main linux-lts-utopic 3.16.0-46.62~14.04.1 (tar) [122 MB]</span><br><span class="line">Get:3 http://cn.archive.ubuntu.com/ubuntu/ trusty-updates/main linux-lts-utopic 3.16.0-46.62~14.04.1 (diff) [10.1 MB]</span><br><span class="line">Fetched 132 MB <span class="keyword">in</span> 4min 49s (456 kB/s)                                          </span><br><span class="line">gpgv: Signature made 2015年08月12日 星期三 00时19分47秒 CST using RSA key ID FDCE24FC</span><br><span class="line">gpgv: Can<span class="string">'t check signature: public key not found</span></span><br><span class="line"><span class="string">dpkg-source: warning: failed to verify signature on ./linux-lts-utopic_3.16.0-46.62~14.04.1.dsc</span></span><br><span class="line"><span class="string">dpkg-source: info: extracting linux-lts-utopic in linux-lts-utopic-3.16.0</span></span><br><span class="line"><span class="string">dpkg-source: info: unpacking linux-lts-utopic_3.16.0.orig.tar.gz</span></span><br><span class="line"><span class="string">dpkg-source: info: applying linux-lts-utopic_3.16.0-46.62~14.04.1.diff.gz</span></span><br><span class="line"><span class="string">dpkg-source: info: upstream files that have been modified: </span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/ABI/stable/sysfs-devices</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/ABI/testing/sysfs-class-cxl</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/ABI/testing/sysfs-driver-genwqe</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/arm64/booting.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/arm/gic-v3.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/arm/pmu.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/ata/sata_rcar.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/chosen.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/dma/fsl-mxs-dma.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/hwmon/ibmpowernv.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/i2c/i2c-designware.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/i2c/i2c-opal.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/interrupt-controller/interrupts.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/net/apm-xgene-enet.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/net/cpsw.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/net/marvell-armada-370-neta.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/pci/xgene-pci.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/pinctrl/marvell,armada-370-pinctrl.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/pinctrl/marvell,armada-375-pinctrl.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/pinctrl/marvell,armada-38x-pinctrl.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/pinctrl/marvell,armada-xp-pinctrl.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/power/reset/syscon-reboot.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/rng/apm,rng.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/sound/adi,axi-spdif-tx.txt</span></span><br><span class="line"><span class="string"> linux-lts-utopic-3.16.0/Documentation/devicetree/bindings/staging/imx-drm/ldb.txt</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> ...</span></span><br></pre></td></tr></table></figure><p>如果在获取源码之前没有安装<code>dpkg-dev</code>，那么在源码获取后不能自动解压，可能会出现以下的错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~/Kernel$ apt-get <span class="built_in">source</span> linux-image-$(uname -r)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Picking <span class="string">'linux-lts-utopic'</span> as <span class="built_in">source</span> package instead of <span class="string">'linux-image-3.16.0-30-generic'</span></span><br><span class="line">NOTICE: <span class="string">'linux-lts-utopic'</span> packaging is maintained <span class="keyword">in</span> the <span class="string">'Git'</span> version control system at:</span><br><span class="line">http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-trusty.git</span><br><span class="line">Need to get 132 MB of <span class="built_in">source</span> archives.</span><br><span class="line">Get:1 http://cn.archive.ubuntu.com/ubuntu/ trusty-updates/main linux-lts-utopic 3.16.0-46.62~14.04.1 (dsc) [11.2 kB]</span><br><span class="line">Get:2 http://cn.archive.ubuntu.com/ubuntu/ trusty-updates/main linux-lts-utopic 3.16.0-46.62~14.04.1 (tar) [122 MB]</span><br><span class="line">Get:3 http://cn.archive.ubuntu.com/ubuntu/ trusty-updates/main linux-lts-utopic 3.16.0-46.62~14.04.1 (diff) [10.1 MB]</span><br><span class="line">Fetched 132 MB <span class="keyword">in</span> 7min 55s (278 kB/s)                                          </span><br><span class="line">sh: 1: dpkg-source: not found</span><br><span class="line">Unpack <span class="built_in">command</span> <span class="string">'dpkg-source -x linux-lts-utopic_3.16.0-46.62~14.04.1.dsc'</span> failed.</span><br><span class="line">Check <span class="keyword">if</span> the <span class="string">'dpkg-dev'</span> package is installed.</span><br><span class="line">E: Child process failed</span><br></pre></td></tr></table></figure><p>这个时候，我们只需要安装<code>dpkg-dev</code>，然后使用命令<code>dpkg-source -x linux-lts-utopic_3.16.0-46.62~14.04.1.dsc</code>解压源码即可。下载的源码在未解压前有3个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~/Kernel$ ls</span><br><span class="line">linux-lts-utopic_3.16.0-46.62~14.04.1.dsc</span><br><span class="line">linux-lts-utopic_3.16.0-46.62~14.04.1.diff.gz  </span><br><span class="line">linux-lts-utopic_3.16.0.orig.tar.gz</span><br></pre></td></tr></table></figure><p>解压后会在当前目录生成一个文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~/Kernel$ ls</span><br><span class="line">linux-lts-utopic-3.16.0                        </span><br><span class="line">linux-lts-utopic_3.16.0-46.62~14.04.1.dsc</span><br><span class="line">linux-lts-utopic_3.16.0-46.62~14.04.1.diff.gz  </span><br><span class="line">linux-lts-utopic_3.16.0.orig.tar.gz</span><br></pre></td></tr></table></figure><h3 id="方式二：git"><a href="#方式二：git" class="headerlink" title="方式二：git"></a>方式二：git</h3><p>所有的Ubuntu内核源码都维持在git下，并且每一个<code>release</code>版本的内核源码都维护在单独的git分支上，我们可以在本地使用<code>git clone</code>获取每一个<code>release</code>版本的最新内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://kernel.ubuntu.com/ubuntu/ubuntu-&lt;release codename&gt;.git</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-&lt;release codename&gt;.git</span><br></pre></td></tr></table></figure><p>其中，<code>release codename</code>是每一个发行版本的开发代号，下面给出目前常见版本的相关信息：</p><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">开发代号</th><th style="text-align:center">发布日期</th><th style="text-align:center">最近更新</th><th style="text-align:center">支持情况</th><th style="text-align:center">内核版本</th></tr></thead><tbody><tr><td style="text-align:center">12.04 LTS</td><td style="text-align:center">Precise Pangolin</td><td style="text-align:center">2012-04-26</td><td style="text-align:center">12.04.4发布于2014年2月6日</td><td style="text-align:center">2017-04</td><td style="text-align:center">3.2</td></tr><tr><td style="text-align:center">12.10</td><td style="text-align:center">Quantal Quetzal</td><td style="text-align:center">2012-10-18</td><td style="text-align:center"></td><td style="text-align:center">2014-05</td><td style="text-align:center">3.5</td></tr><tr><td style="text-align:center">13.04</td><td style="text-align:center">Raring Ringtail</td><td style="text-align:center">2013-04-25</td><td style="text-align:center"></td><td style="text-align:center">2014-01</td><td style="text-align:center">3.8</td></tr><tr><td style="text-align:center">13.10</td><td style="text-align:center">Saucy Salamander</td><td style="text-align:center">2013-10-17</td><td style="text-align:center"></td><td style="text-align:center">2014-07</td><td style="text-align:center">3.11</td></tr><tr><td style="text-align:center">14.04 LTS</td><td style="text-align:center">Trusty Tahr</td><td style="text-align:center">2014-04-17</td><td style="text-align:center"></td><td style="text-align:center">2019-04</td><td style="text-align:center">3.13</td></tr><tr><td style="text-align:center">14.10</td><td style="text-align:center">Utopic Unicorn</td><td style="text-align:center">2014-10-23</td><td style="text-align:center"></td><td style="text-align:center">2015-07</td><td style="text-align:center">3.16</td></tr><tr><td style="text-align:center">15.04</td><td style="text-align:center">Vivid Vervet</td><td style="text-align:center">2015-04-23</td><td style="text-align:center"></td><td style="text-align:center">2016-01</td><td style="text-align:center">3.19</td></tr></tbody></table><p>参考：<a href="https://linux.cn/article-3238-1.html" target="_blank" rel="noopener">https://linux.cn/article-3238-1.html</a></p><p>也可以通过命令<code>cat /etc/lsb-release</code>找到<code>codename</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~$ cat /etc/lsb-release</span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=14.04</span><br><span class="line">DISTRIB_CODENAME=trusty</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">"Ubuntu 14.04.2 LTS"</span></span><br></pre></td></tr></table></figure><p>找到<code>codename</code>后就可以通过<code>git clone</code>获取最新的内核源码了，例如我要获取<code>14.04 LTS</code>版本的最新内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://kernel.ubuntu.com/ubuntu/ubuntu-trusty.git</span><br></pre></td></tr></table></figure><p>除此之外，还有一种方式可以直接获取当前系统对应的内核开发分支：在终端中直接输入<code>apt-cache showsrc linux</code>，找到其中的<code>Vcs-</code>属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Files:</span><br><span class="line"> 00f287928ebb2e9038277f2c1fea6fd1 11800 linux_3.13.0-24.46.dsc</span><br><span class="line"> 8c85f9d0962f2a9335028e4879b03343 116419243 linux_3.13.0.orig.tar.gz</span><br><span class="line"> b724896d88cd73187e61b9d2b6abf5c8 7201652 linux_3.13.0-24.46.diff.gz</span><br><span class="line">Vcs-Git: http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-trusty.git</span><br><span class="line">Package-List: </span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>也可以先将信息通过<code>| grep Vcs-</code>过滤后再输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~$ apt-cache showsrc linux | grep Vcs-</span><br><span class="line">Vcs-Git: http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-trusty.git</span><br><span class="line">Vcs-Git: http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-trusty.git</span><br><span class="line">Vcs-Git: http://kernel.ubuntu.com/git-repos/ubuntu/ubuntu-trusty.git</span><br></pre></td></tr></table></figure><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>如果你以前没有在当前系统中编译过内核，那么你在编译新内核之前你需要安装一些包，这样你才可以编译成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get build-dep linux-image-$(uname -r)</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>如果不需要改变任何配置信息的话，这个步骤可以跳过。这个构建过程将会使用从子配置文件中获取的配置信息，最简单的方式就是在源码目录中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x debian/scripts/*</span><br><span class="line">chmod a+x debian/scripts/misc/*</span><br><span class="line">fakeroot debian/rules clean</span><br><span class="line">fakeroot debian/rules editconfigs</span><br></pre></td></tr></table></figure><p>这将对支持的每一种架构／特性采用当前的配置信息并调用<code>menuconfig</code>修改配置文件，之所以需要<code>chmod</code>是因为源码包被创建时，每一个脚本文件失去了可执行的属性。</p><p>为了使新编译的内核与原来的内核版本有一定的区别，你可以为新编译的内核添加一些本地版本标识，具体的方法就是在文件<code>debian.master/changelog</code>中第一个版本号后添加你自己的版本标识，例如：<code>+vap</code>。在使用<code>uname -a</code>时这将有助于你区分你编译后的内核。请注意添加的版本号已定要比原来的内核版本高。</p><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>编译内核源码比较简单。切换到内核源码根目录，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fakeroot debian/rules clean</span><br><span class="line">fakeroot debian/rules binary-headers binary-generic</span><br></pre></td></tr></table></figure><p>整个编译过程大概需要两个小时。如果编译成功，在源码根目录的外层目录下会生成一些<code>.deb</code>文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~/Kernel/linux-lts-utopic-3.16.0$ <span class="built_in">cd</span> ..</span><br><span class="line">lihui@ubuntu:~/Kernel$ ls *deb</span><br><span class="line">linux-cloud-tools-3.16.0-46-generic_3.16.0-46.62~14.04.1_amd64.deb</span><br><span class="line">linux-headers-3.16.0-46_3.16.0-46.62~14.04.1_all.deb</span><br><span class="line">linux-headers-3.16.0-46-generic_3.16.0-46.62~14.04.1_amd64.deb</span><br><span class="line">linux-image-3.16.0-46-generic_3.16.0-46.62~14.04.1_amd64.deb</span><br><span class="line">linux-image-extra-3.16.0-46-generic_3.16.0-46.62~14.04.1_amd64.deb</span><br><span class="line">linux-tools-3.16.0-46-generic_3.16.0-46.62~14.04.1_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="安装新内核"><a href="#安装新内核" class="headerlink" title="安装新内核"></a>安装新内核</h2><p>使用<code>dpkg -i linux*3.16.0-46*.deb</code>命令安装新内核，然后重启系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i linux*3.16.0-46*.deb</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>进入系统后，使用命令<code>uname -r</code>查看内核版本，如果为自定的版本表示，则表明内核安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~$ uname -r</span><br><span class="line">3.16.0-46-generic</span><br></pre></td></tr></table></figure><p>发现内核版本确实发生改变，证明新的内核安装成功。</p><p>参考：</p><ol><li><a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel" target="_blank" rel="noopener">https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel</a></li><li><a href="https://help.ubuntu.com/community/Kernel/Compile" target="_blank" rel="noopener">https://help.ubuntu.com/community/Kernel/Compile</a></li><li><a href="https://wiki.ubuntu.com/Kernel/Dev/KernelGitGuide?action=show&amp;redirect=KernelTeam%2FKernelGitGuide" target="_blank" rel="noopener">https://wiki.ubuntu.com/Kernel/Dev/KernelGitGuide?action=show&amp;redirect=KernelTeam%2FKernelGitGuide</a></li><li><a href="http://askubuntu.com/questions/159833/how-do-i-get-the-kernel-source-code" target="_blank" rel="noopener">http://askubuntu.com/questions/159833/how-do-i-get-the-kernel-source-code</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(2)</title>
      <link href="/2015/08/30/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
      <url>/2015/08/30/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</url>
      
        <content type="html"><![CDATA[<h2 id="创建里程碑"><a href="#创建里程碑" class="headerlink" title="创建里程碑"></a>创建里程碑</h2><p>项目一般是按阶段进行，开发人员按照既定的时间节点，完成各阶段性任务，每个阶段性性任务完成后，我们有必要采取一些措施来保存或者是展示这一阶段的成果，但同时又不能影响后续的开发工作。在这种情况下，我们可以采用GitHub提供的“releases”功能：</p><a id="more"></a><p><img src="/images/2015-08-30/release_1.jpg" alt></p><p>点击“releases”——&gt;“Create a new release”</p><p><img src="/images/2015-08-30/release_2.jpg" alt></p><p>填写一些必要信息，页面的右侧有一些填写建议，点击下方的“Publish release”即可发布：</p><p><img src="/images/2015-08-30/release_3.jpg" alt></p><p>发布成功后，我们就会看到相应的版本信息，并且提供了几种格式的压缩包供我们下载：</p><p><img src="/images/2015-08-30/release_4.jpg" alt></p><p>每一个版本发布后都不会受后面提交的内容的影响，等待下一个稳定版本开发完成时，我们可以采用同样的方式发布下一个版本。</p><h2 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>在<a href="http://www.huberylee.cn/2015/08/28/Git简明教程(1" target="_blank" rel="noopener">Git简明教程(1)</a>)关于Git的介绍中，我有提到过，Git的一大特点就是分支功能，它能使整个团队高效地协同开发，方便我们进行一些试验性的创新……</p><p>使用命令<code>git checkout -b &lt;分支名称&gt;</code>我们可以创建并且换到分支，该命令可以拆解为一下两条命令分开执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;分支名称&gt;      /*创建分支*/</span><br><span class="line">git checkout &lt;分支名称&gt;    /*切换分支*/</span><br></pre></td></tr></table></figure><p>例如我们创建并且换到<code>dev</code>分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p>创建完成后，我们可以使用命令<code>git branch</code>查看分支情况，<code>git branch</code>会列出所有的分支，当前所在的分支会被标以<code>*</code>号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>现在，我们修改分支<code>dev</code>中<code>log.txt</code>的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ vi log.txt</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git add log.txt</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git commit -m <span class="string">"在dev分支中修改了log.txt的内容"</span></span><br><span class="line">[dev 25c8e7a] 在dev分支中修改了log.txt的内容</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件</span><br><span class="line"></span><br><span class="line">第一次修改log.txt文件</span><br><span class="line"></span><br><span class="line">在dev分支中修改了log.txt的内容</span><br></pre></td></tr></table></figure><p>然后我们切换到<code>master</code>分支中，查看没有合并分支前<code>master</code>分支中<code>log.txt</code>的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件</span><br><span class="line"></span><br><span class="line">第一次修改log.txt文件</span><br></pre></td></tr></table></figure><p>我们可以发现<code>master</code>分支中的内容并未收到影响，现在假设<code>dev</code>分支上进行的开发工作已经完成，可以合并到<code>master</code>分支上来了，那么我们可以使用<code>git merge &lt;指定分支名称&gt;</code>，<code>git merge &lt;指定分支名称&gt;</code>命令用于将指定分支合并到当前分支上来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git merge dev</span><br><span class="line">Updating 040d014..25c8e7a</span><br><span class="line">Fast-forward</span><br><span class="line"> log.txt | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件</span><br><span class="line"></span><br><span class="line">第一次修改log.txt文件</span><br><span class="line"></span><br><span class="line">在dev分支中修改了log.txt的内容</span><br></pre></td></tr></table></figure><p>可以看到，<code>dev</code>分支中修改的内容已经在<code>master</code>分支中生效，下一步就是将<code>dev</code>分支删除，使用命令<code>git branch -d &lt;分支名称&gt;</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git branch -d dev</span><br><span class="line">Deleted branch dev (was 25c8e7a).</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>到此，一个因工作需要而创建，到工作完成而删除的分支的使命就完成了。</p><p>小结：</p><ol><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code></li><li>创建＋切换分支：<code>git checkout -b &lt;name&gt;</code></li><li>合并指定分支到当前分支： <code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ol><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>假设你现在正在<code>dev</code>分支上进行开发工作，突然接到一个修改bug的任务，要求你在两个小时内解决，而当前在<code>dev</code>分支上的开发工作一时半会结束不了，那么你可以使用<code>git stash</code>命令将当前开发现场“储藏”起来，等以后恢复现场继续工作。</p><p>使用<code>git stash</code>储存当前开发现场，<code>git status</code>查看工作区是否干净，如果干净便可以开始bug修复工作了。切换到需要修复bug的分支上，创建修复bug的临时分支，开始修复bug……</p><p>修复工作完成后，可以使用<code>git stash list</code>查看刚刚保存的工作现场，恢复工作现场的方法有两种：</p><ol><li>用<code>git stash apply</code>恢复，但是这种方式恢复后，<code>stash</code>中的内容并不会被删除，还需要使用<code>git stash drop</code>手动删除；</li><li>用<code>git stash pop</code>恢复的同时删除<code>stash</code>中的内容。</li></ol><p>可以多次<code>stash</code>恢复的时候，先用<code>git stash list</code>查看，然后用<code>git stash apply stash@{id}</code>恢复指定的<code>stash</code>。</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>查看远程库信息： <code>git remote -v</code></p><p>本地创建的分支如果不推送到远程，对其他人就是不可见的。</p><p>从本地推送分支：<code>git push origin/branch-name local-branch-name</code>，如果推送失败，先使用<code>git pull</code>获取远程库。</p><p>在本地创建和远程分支对应的分支：<code>git checkout -b local-branch-name origin/branch-name</code>,本地分支名称和远程分支的名称最好一致。</p><p>建立本地分支和远程分支的关联：<code>git branch --set-upstream local-branch-name origin/branch-name</code></p><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p><code>git tag &lt;name&gt; [commit id]</code>创建一个标签，默认为HEAD，也可以指定<code>commit id</code>，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag v1.0 6224927</span><br></pre></td></tr></table></figure><p><code>git show &lt;tagname&gt;</code>查看指定标签说明信息</p><p><code>git tag -a &lt;tagname&gt; -m &quot;Version 1.0 released.&quot; [commit id]</code>创建标签并填写说明信息，其中<code>-a</code>参数后面跟的是标签名称，<code>-m</code>后面跟的是说明信息。</p><p><code>git tag</code>查看所有标签信息。</p><p><code>git tag -d &lt;tagname&gt;</code>删除指定标签。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 源代码管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 源代码管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(1)</title>
      <link href="/2015/08/28/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
      <url>/2015/08/28/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<p>Git是一款免费、开源的分布式版本控制系统，与集中式版本控制系统相比，Git可以将版本库保存在本地，弱化了中心服务器的作用。集中式版本控制系统中，用户在每次使用时都必须从中心服务器上获取最新的版本，才可以进行本地的开发工作，一旦与中心服务器脱离链接，开发工作将没法开始。而在分布式版本控制系统中，每个用户在本地都保存有一个完整的版本库，开发时不必每次都从服务器上获取最新版本，只需在本地完成工作后提交新的版本即可，如果新提交的版本与他人产生冲突，需将冲突解决后再将两人的新版本合并。采用这样做的好处是，项目的安全性进一步提高，即使一个人（多人）或者服务器坏了，我们也可以从他人的机器上获取完整的项目；另外一个就是灵活性大大提高，即便在没有网络的情况下，我们也可以正常开发，在有网络的环境下推送新版本，与其他成员共享新版本信息，保持项目进度，减小中心服务器对开发工作的影响。</p><a id="more"></a><p>Git另外一大特点就是强大的分支开发能力，就好比造一辆车，我们先把车的底盘造好，然后开制造其他零部件，这些零部件是一样一样制造的吗？当然不是！我们按照一定的标准制造相应的零部件， 可能是同时，亦可能有一定的先后次序，但绝对不会是一样一样来！！零部件制造完成后才会安装到车的底盘上，这个过程也可以有先后顺序，最终整辆车制造完成，可以上路了：）</p><p>项目的开发亦是如此，一个项目有公共的部分（基础部分），这部分我们可以先行完成，后面的各部分都在此基础上。在后续的开发过程中，每个部分可以在基础部分上创建一个单独的分支，进行开发，完成后再将所有的部分合并一起来，完成整个项目的开发工作，这样的方式恰好满足了项目的模块化要求。分支的另一个功能就是进行一些试验性的开发。例如制作一款APP，当前的版本比较稳定，我们想给他添就一些新的功能，但不确定是否可以实现，那么这个时候我们就可以在稳定版本上创建一个新的分支dev，在上面进行开发，如果试验成功，便可将dev分支合并到稳定版本上去，失败的话则可以直接舍弃掉dev分支而不影响现有的稳定版本，这个功能是不是很好能！</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><h3 id="Windows上"><a href="#Windows上" class="headerlink" title="Windows上"></a>Windows上</h3><p>Windows上有Git客户端软件，下载地址<a href="https://git-for-windows.github.io" target="_blank" rel="noopener">https://git-for-windows.github.io</a></p><h3 id="Linux-Mac-OS"><a href="#Linux-Mac-OS" class="headerlink" title="Linux/Mac OS"></a>Linux/Mac OS</h3><p>Linux和Mac中采用命令行的方式安装，如果你不知道使用什么命令安装的话，你可以在Terminal中输入<code>git</code>，系统一般会给出提示信息。下面给出在Ubuntu和Mac中的安装命令：</p><p>Ubuntu中：<code>sudo apt-get install git</code></p><p>Mac中：<code>brew install git</code></p><h2 id="基本操作流程"><a href="#基本操作流程" class="headerlink" title="基本操作流程"></a>基本操作流程</h2><p>首先在磁盘适当位置创建项目文件夹，进入新创建的文件夹，初始化本地git仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Workspace lihui$ mkdir <span class="built_in">test</span></span><br><span class="line">lihuideMacBook-Pro:Workspace lihui$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/lihui/Workspace/<span class="built_in">test</span>/.git/</span><br></pre></td></tr></table></figure><p>在项目文件夹中添加新的内容log.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ vi log.txt</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件log.txt</span><br></pre></td></tr></table></figure><p>然后我们使用<code>git status</code>命令查看一下当前状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">log.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><p>系统会提示有未被跟踪的文件，并提示我们使用命令<code>git add &lt;file&gt;...</code>去跟踪新添加的文件。</p><p>使用命令<code>git add log.txt</code>将文件log.txt添加到仓库，并在此查看当前状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git add log.txt</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   log.txt</span><br></pre></td></tr></table></figure><p>会提示我们可以使用<code>git rm --cached &lt;file&gt;...</code>取消刚才的添加操作，如果我们对刚才的操作没有问题，就可以使用命令<code>git commit</code>提交刚刚添加的文件，这是会要求我们填写过提交描述：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git commit</span><br><span class="line">[master (root-commit) 73255a6] 添加一个新文件<span class="string">"log.txt"</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 log.txt</span><br></pre></td></tr></table></figure><p>这个过程也可以直接使用命令<code>git commit -m &quot;描述信息&quot;</code>完成。<br>那么到此，Git的基本操作就完成了。</p><p>小结：</p><ol><li><code>git init</code>  初始化本地Git仓库</li><li><code>git add &lt;file&gt;</code>   将文件添加到仓库</li><li><code>git commit [-m &quot;描述信息&quot;]</code>  将文件提交到仓库</li></ol><p>对当前工作区状态不太清楚时可以使用命令<code>git status</code>查看当前工作区状态。</p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><h3 id="场景一：本地仓库已存在"><a href="#场景一：本地仓库已存在" class="headerlink" title="场景一：本地仓库已存在"></a>场景一：本地仓库已存在</h3><p>首先在<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>上注册一个账号，注册完成后登陆，在右上角点击“＋”号，创建一个新的仓库：</p><p><img src="/images/2015-08-28/create.jpg" alt></p><p>填写必要的一些信息：项目名称、项目描述、项目属性（私有OR开源）、初始化仓库时是否带有READEME文件、添加何种.gitignore文件、使用何种开源协议:</p><p><img src="/images/2015-08-28/info.jpg" alt></p><p>初始化Git仓库，根据提示，主要有四种方式，在这里，我选择第三种<code>push an existing repository from the command line</code>：</p><p><img src="/images/2015-08-28/init.jpg" alt></p><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git remote add origin https://github.com/HuberyLee/test.git</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git push -u origin master</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: huberylee</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://huberylee@github.com'</span>: </span><br><span class="line">Counting objects: 6, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 578 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/HuberyLee/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><p>添加后，远程库的名字叫“origin”，这是Git的默认叫法，也可以改成其他的。命令<code>git push -u origin master</code>是将本地的<code>master</code>分支推送到远程，并将本地的<code>master</code>分支与远程的<code>master</code>分支关联起来，其中<code>-u</code>参数只是在远程库为空的情况下使用，以后在推送的过程中使用命令<code>git push origin master</code>即可。</p><p>在Github上查看推送结果：</p><p><img src="/images/2015-08-28/push.jpg" alt></p><h3 id="场景二：本地仓库不存在"><a href="#场景二：本地仓库不存在" class="headerlink" title="场景二：本地仓库不存在"></a>场景二：本地仓库不存在</h3><p>在Github上创建仓库时需要勾选<code>Initialize this repository with a README</code>：</p><p><img src="/images/2015-08-28/create_without_local_repoitory.jpg" alt></p><p>创建完成后直接可以看到项目内容：</p><p><img src="/images/2015-08-28/result_without_local_repository.jpg" alt></p><p>在这个页面的右下方，我们可以看到三种初始化本地Git仓库的方法，在这里我们选择第一种方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Workspace lihui$ ls</span><br><span class="line">nginx<span class="built_in">test</span></span><br><span class="line">lihuideMacBook-Pro:Workspace lihui$ git <span class="built_in">clone</span> https://github.com/HuberyLee/test_1.git</span><br><span class="line">Cloning into <span class="string">'test_1'</span>...</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Checking connectivity... <span class="keyword">done</span>.</span><br><span class="line">lihuideMacBook-Pro:Workspace lihui$ ls</span><br><span class="line">nginx<span class="built_in">test</span>test_1</span><br><span class="line">lihuideMacBook-Pro:Workspace lihui$</span><br></pre></td></tr></table></figure><p>完成后会发现，本地多了一个一项目名称命名的文件夹，进入文件夹中，会看到初始的README文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:Workspace lihui$ <span class="built_in">cd</span> test_1</span><br><span class="line">lihuideMacBook-Pro:test_1 lihui$ ls</span><br><span class="line">README.md</span><br><span class="line">lihuideMacBook-Pro:test_1 lihui$ cat README.md </span><br><span class="line"><span class="comment"># test_1</span></span><br><span class="line">演示项目（未创建本地仓库）</span><br><span class="line">lihuideMacBook-Pro:test_1 lihui$</span><br></pre></td></tr></table></figure><p>修改README文件，并推送到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:test_1 lihui$ vi README.md </span><br><span class="line">lihuideMacBook-Pro:test_1 lihui$  cat README.md</span><br><span class="line"><span class="comment"># test_1</span></span><br><span class="line">演示项目（未创建本地仓库）</span><br><span class="line"></span><br><span class="line">初始化本地Git仓库，并修改README文件内容</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:test_1 lihui$ git add README.md</span><br><span class="line">lihuideMacBook-Pro:test_1 lihui$ git commit</span><br><span class="line">[master 10e76f0] 初始化本地Git仓库，并修改README文件</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">lihuideMacBook-Pro:test_1 lihui$ git push</span><br><span class="line">warning: push.default is <span class="built_in">unset</span>; its implicit value has changed <span class="keyword">in</span></span><br><span class="line">Git 2.0 from <span class="string">'matching'</span> to <span class="string">'simple'</span>. To squelch this message</span><br><span class="line">and maintain the traditional behavior, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default matching</span><br><span class="line"></span><br><span class="line">To squelch this message and adopt the new behavior now, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default simple</span><br><span class="line"></span><br><span class="line">When push.default is <span class="built_in">set</span> to <span class="string">'matching'</span>, git will push <span class="built_in">local</span> branches</span><br><span class="line">to the remote branches that already exist with the same name.</span><br><span class="line"></span><br><span class="line">Since Git 2.0, Git defaults to the more conservative <span class="string">'simple'</span></span><br><span class="line">behavior, <span class="built_in">which</span> only pushes the current branch to the corresponding</span><br><span class="line">remote branch that <span class="string">'git pull'</span> uses to update the current branch.</span><br><span class="line"></span><br><span class="line">See <span class="string">'git help config'</span> and search <span class="keyword">for</span> <span class="string">'push.default'</span> <span class="keyword">for</span> further information.</span><br><span class="line">(the <span class="string">'simple'</span> mode was introduced <span class="keyword">in</span> Git 1.7.11. Use the similar mode</span><br><span class="line"><span class="string">'current'</span> instead of <span class="string">'simple'</span> <span class="keyword">if</span> you sometimes use older versions of Git)</span><br><span class="line"></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: huberylee</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://huberylee@github.com'</span>: </span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 406 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/HuberyLee/test_1.git</span><br><span class="line">   f29baa3..10e76f0  master -&gt; master</span><br></pre></td></tr></table></figure><p>在GitHub上查看推送结果：</p><p><img src="/images/2015-08-28/push_without_local_repository.jpg" alt></p><p> 可以看到已经推送成功。</p><h2 id="回退与前进"><a href="#回退与前进" class="headerlink" title="回退与前进"></a>回退与前进</h2><h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><p>随着项目的推进，log.txt文件中的内容不断被改变，里面添加了新的内容“第一次修改log.txt文件”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ vi log.txt</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件</span><br><span class="line"></span><br><span class="line">第一次修改log.txt文件</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git add log.txt</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git commit -m <span class="string">"第一次修改log.txt文件"</span></span><br><span class="line">[master 040d014] 第一次修改log.txt文件</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure><p>然而提交后我们发现，这个文件我们修改错了，但是又不记得改了什么地方，该怎么办？别担心，Git提供了版本回退的功能。</p><p>使用命令<code>git log</code>查看之前都有哪些提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git <span class="built_in">log</span></span><br><span class="line">commit 040d014ea0be16a7c3163b60398bc1803176d534</span><br><span class="line">Author: HuberyLee &lt;cughli@163.com&gt;</span><br><span class="line">Date:   Sat Aug 29 12:10:06 2015 +0800</span><br><span class="line"></span><br><span class="line">    第一次修改log.txt文件</span><br><span class="line"></span><br><span class="line">commit 8da79bfe38f0d3da57b796f21b0e8d4539705de3</span><br><span class="line">Author: HuberyLee &lt;cughli@163.com&gt;</span><br><span class="line">Date:   Sat Aug 29 12:05:15 2015 +0800</span><br><span class="line"></span><br><span class="line">    添加一个新文件<span class="string">"log.txt"</span></span><br></pre></td></tr></table></figure><p>是不是很详细，不仅有提交日期和时间，还有提交作者和提交信息描述。在其中找到我们需要恢复的版本，复制其commit id，使用命令<code>git reset --hard &lt;commit id&gt;</code>把当前项目的版本指针回退到要恢复的时间节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git reset --hard 8da79bfe38f0d3da57b796f21b0e8d4539705de3</span><br><span class="line">HEAD is now at 8da79bf 添加一个新文件<span class="string">"log.txt"</span></span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件</span><br></pre></td></tr></table></figure><p>是不是很神奇呢？！但是，糟糕的事又来了，刚刚大脑开了小差，那个修改是没有任何问题的，如何再回去呢（回到未来）？</p><h3 id="前进"><a href="#前进" class="headerlink" title="前进"></a>前进</h3><p>使用命令<code>git reflog</code>查看所有的提交信息，包括当前版本之后的版本提交信息（使用命令<code>git log</code>是查看不到的），然后用命令<code>git reset --hard &lt;commit id&gt;</code>恢复到指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git reflog</span><br><span class="line">8da79bf HEAD@&#123;0&#125;: reset: moving to 8da79bfe38f0d3da57b796f21b0e8d4539705de3</span><br><span class="line">040d014 HEAD@&#123;1&#125;: commit: 第一次修改log.txt文件</span><br><span class="line">8da79bf HEAD@&#123;2&#125;: commit (initial): 添加一个新文件<span class="string">"log.txt"</span></span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ git reset --hard 040d014</span><br><span class="line">HEAD is now at 040d014 第一次修改log.txt文件</span><br><span class="line">lihuideMacBook-Pro:<span class="built_in">test</span> lihui$ cat log.txt</span><br><span class="line">这是项目添加的第一个文件</span><br><span class="line"></span><br><span class="line">第一次修改log.txt文件</span><br></pre></td></tr></table></figure><p>到此，Git的回退与前进功能就学习完了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 源代码管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 源代码管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你还有我，便不孤独</title>
      <link href="/2015/07/27/%E4%BD%A0%E8%BF%98%E6%9C%89%E6%88%91%EF%BC%8C%E4%BE%BF%E4%B8%8D%E5%AD%A4%E7%8B%AC/"/>
      <url>/2015/07/27/%E4%BD%A0%E8%BF%98%E6%9C%89%E6%88%91%EF%BC%8C%E4%BE%BF%E4%B8%8D%E5%AD%A4%E7%8B%AC/</url>
      
        <content type="html"><![CDATA[<p>为什么用这个标题呢，其实我也不知道，因为此刻我的心情很复杂，不知道是孤独、是烦躁还是悲伤，抑或是三者都有，当再次阅读《你的孤独，虽败犹荣》时，忽然想起了好多事情，联系最近发生的一些事，我觉得借用书中标题“你还有我，便不孤独”再适合不过。<br><a id="more"></a></p><p>前一段时间，在一次和曾博聊天后，我对以后的发展方向考虑了很久，想想当时自己选择读研的初衷，再看看目前各位学姐学长的状态，我觉得很有必要在研究生的早些阶段好好考虑一下自己的发展方向。我选择读研的很大一个原因就是在本科期间没有好好规划自己的学习和生活，想在读研期间，强化自己的专业能力（刚开始是想好好学习一门编程语言），后来仔细想了一番，如果读研仅仅是为了使自己的编程能力得到提高的话，那我何必来浪费这三年的时间呢，本科毕业后直接去工作且不是一种更好的选择？如果研究生毕业找的工作和本科生一样，那么读研的意义又何在？所以，在一番思想斗争下，我决定尽量争取研究生毕业之后出国读博，并与曾博交流了一番，得到了老师的支持，这也让我对自己的决定增添了一份信心。</p><p>那么，做完这个决定后，接下来该做什么呢？当然是好好的为这件事准备，要知道，想要全额奖学金出国留学还是没那么简单的！所以，在做出这个决定后我就想尽快结束手头上的事情，这也就是我最近比较烦的原因。</p><p>恰好这一段时间又要回家办助学金续贷的事情……</p><p>来到学校后，实验室位置被小学弟占了，所以就跑来自习室了，其实自习室也挺好的，安静，位置还大，在读了一篇paper后，决定重新看一遍《你的孤独，虽败犹荣》。看着看着，就想起了果爷，也许，在这么多朋友中，果爷是少数能够包容我脾气、能在关键时刻给我帮助的人了，尽管在学校期间我对他发了那么多次火……</p><p>现在突然想起了果爷以前经常说的一句话“身边的人很多，找一个志同道合的人却很难”，以前没有太大的感觉，但此时此刻却深有感触。不是身边的人少了，而是和自己走得很近的人少了……</p><p>以后还是要过健康一点的生活：</p><blockquote><ul><li>多读一些课外书籍</li><li>坚持锻炼身体</li><li>坚决不发脾气（尽管很难，但我一定会改掉）</li><li>培养发展一门健康的兴趣爱好</li><li>早睡早起</li></ul></blockquote><p>“也许你现在仍是 一个人吃饭 一个人看电影 一个人睡觉 一个人乘地铁 然而你却能 一个人吃饭 一个人看电影 一个人睡觉 一个人乘地铁”   ——《你的孤独，虽败犹荣》</p><p>2015年07月27日下午于北区自习室</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 团队建设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上用hostapd创建AP</title>
      <link href="/2015/07/17/Linux%E4%B8%8A%E7%94%A8hostapd%E5%88%9B%E5%BB%BAAP/"/>
      <url>/2015/07/17/Linux%E4%B8%8A%E7%94%A8hostapd%E5%88%9B%E5%BB%BAAP/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>Ubuntu 14.04.2(3.16.0-30-generic)</p><p>Hostapd_2_4</p><h2 id="安装Hostapd"><a href="#安装Hostapd" class="headerlink" title="安装Hostapd"></a>安装Hostapd</h2><p>安装hostapd主要有两种方法，第一种就是通过命令直接安装<code>sudo apt-get install hostapd</code>，另外一种方法就是通过源码安装，在这里我选择的是第二种方法。<br><a id="more"></a><br>首先在<a href="http://w1.fi/cgit" target="_blank" rel="noopener">http://w1.fi/cgit</a>下载源码，我下载的是hostapd_2_4版本，下载完成后解压后编译，进入文件夹hostap_2_4/hostapd，在编译之前，首先需要将deconfig拷贝一份为.config，随后输入make命令，如果系统中没有安装libnl和libssl库的话，一般会有错误提示，这时只需要通过命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linssl-dev libnl-dev</span><br></pre></td></tr></table></figure><p>安装这两个库就行，接下来再编译就行了。</p><h2 id="配置Hostapd"><a href="#配置Hostapd" class="headerlink" title="配置Hostapd"></a>配置Hostapd</h2><p>在下载的hostapd中有默认的配置文件hostapd.conf，同样在文件夹hostap_2_4/hostapd文件夹中，我们只需要修改一下就可以了，每一个配置项都有说明，稍有点英语基础的基本上都可以读懂，我修改的比较少：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=<span class="built_in">test</span></span><br><span class="line">hw_mode=g</span><br><span class="line">channel=1</span><br></pre></td></tr></table></figure><p>配置完成后我们就可以通过命令<code>sudo ./hostapd hostapd.conf</code>启动hostapd了，如果没有报任何错误，这时你应该可以在手机上搜到SSID为test的WI-FI信号了。不过，在很多系统中都会报这样的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Configuration file: hostapd.conf</span><br><span class="line">nl80211: Could not configure driver mode</span><br><span class="line">nl80211: deinit ifname=wlan0 disabled_11b_rates=0</span><br><span class="line">nl80211 driver initialization failed.</span><br><span class="line">wlan0: interface state UNINITIALIZED-&gt;DISABLED</span><br><span class="line">wlan0: AP-DISABLED </span><br><span class="line">hostapd_free_hapd_data: Interface wlan0 wasn<span class="string">'t started</span></span><br></pre></td></tr></table></figure><p>遇到这样的报错，你可以参照这个链接去解决<a href="http://huberylee.github.io/2015/07/09/nl80211-Could-not-configure-driver-mode/" target="_blank" rel="noopener">nl80211:Could not configure driver mode</a>。</p><p>到这一步，你会发现，直接连接这个WI-FI是连接不上的，通过在手机上配置静态IP可以连接上，主要配置这几项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address:192.168.1.10  <span class="comment">##这个地址和AP在同一个网段即可</span></span><br><span class="line">netmask:255.255.255.0</span><br><span class="line">gateway:192.168.1.1   <span class="comment">##这是AP的地址</span></span><br></pre></td></tr></table></figure><p>这样就可以连上WI-FI了，不过这样是不是太麻烦了？</p><h2 id="通过配置DHCP动态获取IP"><a href="#通过配置DHCP动态获取IP" class="headerlink" title="通过配置DHCP动态获取IP"></a>通过配置DHCP动态获取IP</h2><p>为了方便手机连接，我们通过配置DHCP来动态获取IP。首先安装DHCP服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dhcp3-server</span><br></pre></td></tr></table></figure><p>安装DHCP后，接下来就是对它进行一些必要的配置。首先我们在<code>/etc/dhcp/dhcpd.conf</code>文件的末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.1.2 192.168.1.200;  <span class="comment">##这是地址池的范围</span></span><br><span class="line">  option routers 192.168.1.1;       <span class="comment">##这个我设置的是AP的IP</span></span><br><span class="line">  option domain-name-servers 192.168.10.1;  <span class="comment">##这个我设置的是物理机所连接路由器的IP，你也可以&lt;br/&gt;设置为可用的DNS，例如8.8.8.8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们设置无线网卡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig wlan0 192.168.1.1 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>启动dhcp-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dhcpd wlan0 -pf /var/run/dhcp-server/dhcpd.pid</span><br></pre></td></tr></table></figure><p>这个时候可能会报错，大概就是权限不够的意思，通过<code>ls -la</code>命令查看，我们会发现，安装dhcp时自动创建了一个dhcpd用户和dhcpd用户组，其他用户对这个文件夹只有读的权限，通过命令<code>sudo chmod -R 733 /var/run/dhcp-server</code>给其他用户赋予执行该文件夹中文件的权限，这样，再次执行的时候就不会报错了。</p><p>打开ip转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">"echo 1 &gt; /proc/sys/net/ipv4/ip_forward"</span></span><br></pre></td></tr></table></figure><p>设置nat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>至此，手机就可以直接连接上WI-FI上网了。不过，在每次系统重启后，上面对无线网卡、IP转发、NAT的配置就失效了，不过，这些都可以解决。无线网卡我们可以通过静态IP的形式，给wlan0配置静态IP，ip转发和nat设置我们可以在系统启动时进行，只需要将上面的配置命令写在<code>/etc/init.d/rc.loacl</code>中即可，如果hostapd有必要在系统启动时就开启的话，我们也可以写在这里。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Hostapd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hostapd </tag>
            
            <tag> SoftAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nl80211:Could not configure driver mode</title>
      <link href="/2015/07/09/nl80211-Could-not-configure-driver-mode/"/>
      <url>/2015/07/09/nl80211-Could-not-configure-driver-mode/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Ubuntu 14.04.2 LTS (3.16.0-30-generic)</p><p>Hostapd_2_4</p><h2 id="配置hostapd"><a href="#配置hostapd" class="headerlink" title="配置hostapd"></a>配置hostapd</h2><p>利用Hostapd在Linux中做软AP的过程中，完成Hostapd编译后，接下来就是配置hostapd.conf文件，简单起见，这里我只修改了如下几个参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=CloudMAC</span><br></pre></td></tr></table></figure><a id="more"></a><p>其余的参数保持不变。</p><h2 id="错误一：Could-not-configure-driver-mode"><a href="#错误一：Could-not-configure-driver-mode" class="headerlink" title="错误一：Could not configure driver mode"></a>错误一：Could not configure driver mode</h2><p>修改完配置文件后，接下来就是启动Hostapd了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./hostapd hostapd.conf</span><br></pre></td></tr></table></figure><p>随后，出现如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Configuration file: hostapd.conf</span><br><span class="line">nl80211: Could not configure driver mode</span><br><span class="line">nl80211: deinit ifname=wlan0 disabled_11b_rates=0</span><br><span class="line">nl80211 driver initialization failed.</span><br><span class="line">wlan0: interface state UNINITIALIZED-&gt;DISABLED</span><br><span class="line">wlan0: AP-DISABLED </span><br><span class="line">hostapd_free_hapd_data: Interface wlan0 wasn<span class="string">'t started</span></span><br></pre></td></tr></table></figure><p>在网上找了好久，大部分文章都说该问题是由于NetworkManager引起的，给出的解决方案有两种：</p><p><strong>方案一</strong></p><p>改变NetworkManager里的状态，关闭WI-FI，同时软锁定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmcli nm wifi off</span><br></pre></td></tr></table></figure><p>启用wifi设备，不同于网络状态中的启用wifi（后者改变NetworkManager里的状态）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rfkill unblock wlan</span><br></pre></td></tr></table></figure><p>再次启动hostapd，启动成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lihui@ubuntu:~/VAP/hostap_2_4/hostapd$ sudo ./hostapd hostapd.conf</span><br><span class="line">Configuration file: hostapd.conf</span><br><span class="line">Using interface wlan0 with hwaddr 02:00:00:00:00:00 and ssid <span class="string">"CloudMAC"</span></span><br><span class="line">wlan0: interface state UNINITIALIZED-&gt;ENABLED</span><br><span class="line">wlan0: AP-ENABLED</span><br></pre></td></tr></table></figure><p><strong>方案二</strong></p><p>放弃NetworkManager对无线热点网卡的管理，具体的做法是在/etc/NetWorkManager/NetworkManager.conf最后添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[keyfile]</span><br><span class="line">unmanaged-devices=mac:[hwaddr]</span><br></pre></td></tr></table></figure><p><code>[hwaddr]</code>是无线网卡的mac地址,并且将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ifupdown]</span><br><span class="line">managed=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ifupdown]</span><br><span class="line">managed=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>不过，按照这种方法，需要手动开启<code>unmanaged-devices</code>亲测，可行。</p><h2 id="错误二：Operation-not-possible-due-to-RF-kill"><a href="#错误二：Operation-not-possible-due-to-RF-kill" class="headerlink" title="错误二：Operation not possible due to RF-kill"></a>错误二：Operation not possible due to RF-kill</h2><p>通过第一种方法可以正常启动Hostapd，但随之而来带来另外一个问题：重启系统后，重新加载<code>mac80211_hwsim</code>模块，用<code>ifconfig</code>命令查看，发现wlan口根本没有启动，尝试用<code>sudo ifconfig wlan0 up</code>开启<code>wlan0</code>口，结果报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SIOCSIFFLAGS: Operation not possible due to RF-kill</span><br></pre></td></tr></table></figure><p>通过<code>sudo rfkill list</code>查看，会发现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0: phy0: Wireless LAN</span><br><span class="line">Soft blocked: yes</span><br><span class="line">Hard blocked: no</span><br><span class="line">1: phy1: Wireless LAN</span><br><span class="line">Soft blocked: yes</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure><p>一种解决方法就是<code>sudo rfkill unblock all</code>，再来查看一下<code>sudo rfkill list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0: phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: no</span><br><span class="line">1: phy1: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure><p>这时，我们就可以通过命令<code>sudo ifconfig wlan0 up</code>开启<code>wlan0</code>口了。</p><p>不过，这种解决方法不彻底，每次在系统重启后，该问题会再次出现，又得用同样的方法再次解决，非常麻烦。</p><p>说到这里，我们不妨想想问题出现的原因，会发现，采用方案一时，我们一开始就关闭wifi并软锁定，该问题可能就是由于这个原因引起的，尝试采用<code>sudo nmcli nm wifi on</code>，问题解决，系统重启后该问题不再出现。</p><p><strong>参考：</strong></p><p><a href="http://blog.csdn.net/gsls200808/article/details/39370597" target="_blank" rel="noopener">http://blog.csdn.net/gsls200808/article/details/39370597</a><br><a href="http://askubuntu.com/questions/62166/siocsifflags-operation-not-possible-due-to-rf-kill" target="_blank" rel="noopener">http://askubuntu.com/questions/62166/siocsifflags-operation-not-possible-due-to-rf-kill</a><br><a href="http://blog.csdn.net/q1302182594/article/details/8687826" target="_blank" rel="noopener">http://blog.csdn.net/q1302182594/article/details/8687826</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Hostapd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hostapd </tag>
            
            <tag> SoftAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hostapd编译错误：too few arguments to function ‘hostap_send_mlme’</title>
      <link href="/2015/07/03/Hostapd%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%EF%BC%9Atoo-few-arguments-to-function-%E2%80%98hostap-send-mlme%E2%80%99/"/>
      <url>/2015/07/03/Hostapd%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%EF%BC%9Atoo-few-arguments-to-function-%E2%80%98hostap-send-mlme%E2%80%99/</url>
      
        <content type="html"><![CDATA[<p>有一段时间没有碰Hostapd了，以前在使用时直接下载源码编译，即可使用，不过最近在使用它时发现，竟然不能编译通过，总是提示 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">too few arguments to <span class="keyword">function</span> ‘hostap_send_mlme’</span><br></pre></td></tr></table></figure><p>刚开始以为git clone命令获取的是最新的Hostapd源码（git clone git://w1.fi/srv/git/hostap.git），调用的一些系统函数在Ubuntu 12.04中没有及时更新，于是果断换了一个14.04 LTS系统，结果···还是报同样的错误，泪奔-_-</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">../src/drivers/driver_hostap.c: In <span class="keyword">function</span> ‘hostap_send_eapol’:</span><br><span class="line">../src/drivers/driver_hostap.c:319:2: error: too few arguments to <span class="keyword">function</span> ‘hostap_send_mlme’</span><br><span class="line">  res = hostap_send_mlme(drv, (u8 *) hdr, len, 0);</span><br><span class="line">  ^</span><br><span class="line">../src/drivers/driver_hostap.c:269:12: note: declared here</span><br><span class="line"> static int hostap_send_mlme(void *priv, const u8 *msg, size_t len, int noack,</span><br><span class="line">            ^</span><br><span class="line">make: *** [../src/drivers/driver_hostap.o] Error 1</span><br></pre></td></tr></table></figure><p>于是查看了一下源码，尼玛，在函数hostap_send_eapol中，函数（hostap_send_mlme）调用居然与函数定义不一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hostap_send_mlme</span><span class="params">(<span class="keyword">void</span> *priv, <span class="keyword">const</span> u8 *msg, <span class="keyword">size_t</span> len, <span class="keyword">int</span> noack,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">unsigned</span> <span class="keyword">int</span> freq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hostap_driver_data</span> *<span class="title">drv</span> = <span class="title">priv</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ieee80211_hdr</span> *<span class="title">hdr</span> = (<span class="title">struct</span> <span class="title">ieee80211_hdr</span> *) <span class="title">msg</span>;</span></span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Request TX callback */</span></span><br><span class="line">        hdr-&gt;frame_control |= host_to_le16(BIT(<span class="number">1</span>));</span><br><span class="line">        res = send(drv-&gt;sock, msg, len, <span class="number">0</span>);</span><br><span class="line">        hdr-&gt;frame_control &amp;= ~host_to_le16(BIT(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hostap_send_eapol</span><span class="params">(<span class="keyword">void</span> *priv, <span class="keyword">const</span> u8 *addr, <span class="keyword">const</span> u8 *data,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">size_t</span> data_len, <span class="keyword">int</span> encrypt, <span class="keyword">const</span> u8 *own_addr,</span></span></span><br><span class="line"><span class="function"><span class="params">                             u32 flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hostap_driver_data</span> *<span class="title">drv</span> = <span class="title">priv</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ieee80211_hdr</span> *<span class="title">hdr</span>;</span></span><br><span class="line">        <span class="keyword">size_t</span> len;</span><br><span class="line">        u8 *pos;</span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line">        len = <span class="keyword">sizeof</span>(*hdr) + <span class="keyword">sizeof</span>(rfc1042_header) + <span class="number">2</span> + data_len;</span><br><span class="line">        hdr = os_zalloc(len);</span><br><span class="line">        <span class="keyword">if</span> (hdr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"malloc() failed for hostapd_send_data(len=%lu)\n"</span>,</span><br><span class="line">                       (<span class="keyword">unsigned</span> <span class="keyword">long</span>) len);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hdr-&gt;frame_control =</span><br><span class="line">                IEEE80211_FC(WLAN_FC_TYPE_DATA, WLAN_FC_STYPE_DATA);</span><br><span class="line">        hdr-&gt;frame_control |= host_to_le16(WLAN_FC_FROMDS);</span><br><span class="line">        <span class="keyword">if</span> (encrypt)</span><br><span class="line">                hdr-&gt;frame_control |= host_to_le16(WLAN_FC_ISWEP);</span><br><span class="line">        <span class="built_in">memcpy</span>(hdr-&gt;IEEE80211_DA_FROMDS, addr, ETH_ALEN);</span><br><span class="line">        <span class="built_in">memcpy</span>(hdr-&gt;IEEE80211_BSSID_FROMDS, own_addr, ETH_ALEN);</span><br><span class="line">        <span class="built_in">memcpy</span>(hdr-&gt;IEEE80211_SA_FROMDS, own_addr, ETH_ALEN);</span><br><span class="line"></span><br><span class="line">        pos = (u8 *) (hdr + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(pos, rfc1042_header, <span class="keyword">sizeof</span>(rfc1042_header));</span><br><span class="line">        pos += <span class="keyword">sizeof</span>(rfc1042_header);</span><br><span class="line">        *((u16 *) pos) = htons(ETH_P_PAE);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(pos, data, data_len);</span><br><span class="line"></span><br><span class="line">        res = hostap_send_mlme(drv, (u8 *) hdr, len, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                wpa_printf(MSG_ERROR, <span class="string">"hostap_send_eapol - packet len: %lu - "</span></span><br><span class="line">                           <span class="string">"failed: %d (%s)"</span>,</span><br><span class="line">                           (<span class="keyword">unsigned</span> <span class="keyword">long</span>) len, errno, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">        os_free(hdr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我很纳闷啊，这是作者故意的么？在网上并没有搜到相关问题描述，于是跑到其官网<a href="http://w1.fi/hostapd/" target="_blank" rel="noopener">http://w1.fi/hostapd/</a>溜达了一圈，也没有找到与该问题相关的东西，不过发现了Hostapd的历史版本下载地址 <a href="http://w1.fi/cgit" target="_blank" rel="noopener">http://w1.fi/cgit</a>，下载了hostap_2_4版本，编译居然没有丝毫问题，查看源码，还果真是上面那个原因，哎···</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Hostapd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hostapd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Capsulator初窥</title>
      <link href="/2015/06/30/Capsulator%E5%88%9D%E7%AA%A5/"/>
      <url>/2015/06/30/Capsulator%E5%88%9D%E7%AA%A5/</url>
      
        <content type="html"><![CDATA[<p>Capsulator是一个用户层程序，可用来透明地连接网络，它可以创建任意数量的链接，仿佛他们就连接在一个集线器上。Capsulator虚拟的连接分配了相同标记值的端口，它是基于Mac-in-IP的隧道，这就意味着以太网数据帧从每一个Border Port读入，然后转发给其他Capsulator上每一个具有相同标记值的Border Port，Capsulator之间的通讯就如同IP数据包之间的通讯一样。</p><a id="more"></a><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>Capsulator —— 位于网络边界的软件和机器，连接它的Border Port到其他Capsulator的Border Port；<br><br>Border Port —— 一个位于Capsulator上的端口，虚拟的连接到其他Capsulator上具有相同标识的Border Port，每一个Border Port的标记值都被用户在启动Capsulator时指定；<br><br>Tunnel Port —— 一个位于Capsulator上用于与其他Capsulator通讯的端口。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./capsulator -f destination_machine_ip_addr -t tunnel_port -b border_port<span class="comment">#tag</span></span><br></pre></td></tr></table></figure><p>其中：</p><p>-f 参数是目的IP地址，可跟多个，中间以逗号分隔；<br><br>-t 即Tunnel Port表示数据经由哪个端口发出或接收；<br><br>-b 即Border Port 表示源端口。</p><p>下面结合网络拓扑来具体说明Capsulator的使用方法。</p><p><strong>单一链路中Capsulator使用方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     Machine A                          Machine B</span><br><span class="line">------------------                 ------------------</span><br><span class="line">| port_a -- eth0 | ----------------| eth0 -- port_b |</span><br><span class="line">------------------                 ------------------</span><br><span class="line">     |       |                         |       |</span><br><span class="line">     |       |                         |       |</span><br><span class="line">     |   tunnel port              tunnel port  |</span><br><span class="line"> border port                               border port</span><br></pre></td></tr></table></figure><p><strong>on MachineA</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./capsulator –f machineB_ip_addr –t eth0 –b port_a<span class="comment">#1</span></span><br></pre></td></tr></table></figure><p><strong>on MachineB</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./capsulator –f machineA_ip_addr –t eth0 –b port_b<span class="comment">#1</span></span><br></pre></td></tr></table></figure><p><strong>多重链路中Capsulator使用方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  |eth1  |eth2</span><br><span class="line">-------------               eth0 -------------</span><br><span class="line">| Machine A | ------------------ | Machine B |</span><br><span class="line">-------------| eth0              -------------</span><br><span class="line">             |                         |output to tap port tap1</span><br><span class="line">             |                         |</span><br><span class="line">             |eth0</span><br><span class="line">        ------------</span><br><span class="line">        | Machine C |</span><br><span class="line">        -------------</span><br><span class="line">             |output to tap port tap0</span><br><span class="line">             |</span><br></pre></td></tr></table></figure><p><strong>on MachineA</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./capsulator -f machineB_ip_addr, machineC_ip_addr -t eth0 -b eth1<span class="comment">#20 -b eth2#21</span></span><br></pre></td></tr></table></figure><p>注意：-f参数后书写IP的顺序与border port书写的顺序保持一致。B机器接收eth1端口的数据，C机器接收eth2端口的数据。</p><p><strong>on MachineB</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./capsulator -f machineA_ip_addr -t eth0 -vb tap1<span class="comment">#20</span></span><br></pre></td></tr></table></figure><p><strong>on MachineC</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./capsulator -f machineA_ip_addr -t eth0 -vb tap0<span class="comment">#21</span></span><br></pre></td></tr></table></figure><h2 id="数据收发过程"><a href="#数据收发过程" class="headerlink" title="数据收发过程"></a>数据收发过程</h2><p>隧道基于IP。该Capsulator使用自己的协议，并指定其协议ID是0xF5。含有隧道有效载荷的IP分组的有效载荷是：</p><p><img src="/images/capsulator.png" alt></p><p>当一个以太网数据帧被一个Border Port收到后，它被按以上格式封装到IP数据包中并发送给其他所有的Capsulator。</p><p>当一个Tunnel Port收到一个IP数据包，它移除IP头部，检查标记值，并将它转发给所有标记值匹配的Border Port。操作系统负责分段和重新组装IP包上的每个端部的，所以基本上任意大小（例如大于中间MTU大小）以太网帧可以被隧道传输。</p><p>源代码：<a href="git://github.com/peymank/Capsulator.git" target="_blank" rel="noopener">git://github.com/peymank/Capsulator.git</a></p><p>主页：<a href="http://archive.openflow.org/wk/index.php/Capsulator" target="_blank" rel="noopener">http://archive.openflow.org/wk/index.php/Capsulator</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Capsulator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Capsulator </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
